CCS PCH C Compiler, Version 4.104, 5967               15-set-23 09:09

               Filename: C:\Users\Laboratorio\Desktop\Douglas Autoban\Projetos\Horimetro\Firmware\Horimetro SH1106\Horimetro.lst

               ROM used: 15314 bytes (47%)
                         Largest free fragment is 17450
               RAM used: 1439 (70%) at main() level
                         1612 (79%) worst case
               Stack:    13 worst case (9 in main + 4 for interrupts)

*
0000:  GOTO   2D2A
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.5
004A:  GOTO   0054
004E:  BTFSC  FF2.2
0050:  GOTO   0B96
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include "C:\Users\Laboratorio\Desktop\Douglas Autoban\Projetos\Horimetro\Firmware\Horimetro SH1106\Horimetro.h" 
.................... #include <18F4550.h>    //20MHZ 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                    //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES BORV20                   //Brownout reset at 2.0V 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES LVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                   //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES MCLR                     //Master Clear pin enabled 
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                     //PARA CRISTA EXTERNO É NECESSARIO PLL(5 P/ 20MHZ) 
.................... #FUSES CPUDIV4                  //No System Clock Postscaler 
.................... #FUSES USBDIV                   //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                   //USB voltage regulator enabled 
.................... #FUSES ICPRT                    //ICPRT enabled 
....................  
.................... #use delay(clock=20000000) 
*
0F1A:  MOVLW  05
0F1C:  MOVWF  FEA
0F1E:  MOVLW  9C
0F20:  MOVWF  FE9
0F22:  MOVF   FEF,W
0F24:  BZ    0F40
0F26:  MOVLW  06
0F28:  MOVWF  01
0F2A:  CLRF   00
0F2C:  DECFSZ 00,F
0F2E:  BRA    0F2C
0F30:  DECFSZ 01,F
0F32:  BRA    0F2A
0F34:  MOVLW  7B
0F36:  MOVWF  00
0F38:  DECFSZ 00,F
0F3A:  BRA    0F38
0F3C:  DECFSZ FEF,F
0F3E:  BRA    0F26
0F40:  GOTO   0FC0 (RETURN)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #use i2c(Master,Fast, stream =OLED_stream, sda=PIN_B0,scl=PIN_B1) 
*
02F2:  MOVLW  08
02F4:  MOVWF  01
02F6:  NOP   
02F8:  BCF    F8A.1
02FA:  BCF    F93.1
02FC:  NOP   
02FE:  MOVLB  6
0300:  RLCF   x47,F
0302:  BCF    F8A.0
0304:  BTFSC  FD8.0
0306:  BSF    F93.0
0308:  BTFSS  FD8.0
030A:  BCF    F93.0
030C:  BSF    F93.1
030E:  BTFSS  F81.1
0310:  BRA    030E
0312:  DECFSZ 01,F
0314:  BRA    0318
0316:  BRA    031C
0318:  MOVLB  0
031A:  BRA    02F6
031C:  NOP   
031E:  BCF    F8A.1
0320:  BCF    F93.1
0322:  NOP   
0324:  BSF    F93.0
0326:  NOP   
0328:  NOP   
032A:  BSF    F93.1
032C:  BTFSS  F81.1
032E:  BRA    032C
0330:  CLRF   01
0332:  NOP   
0334:  BTFSC  F81.0
0336:  BSF    01.0
0338:  BCF    F8A.1
033A:  BCF    F93.1
033C:  BCF    F8A.0
033E:  BCF    F93.0
0340:  MOVLB  0
0342:  RETLW  00
*
18D2:  MOVLW  08
18D4:  MOVLB  6
18D6:  MOVWF  x0B
18D8:  MOVFF  00,60C
18DC:  BSF    F93.0
18DE:  NOP   
18E0:  BSF    F93.1
18E2:  BTFSS  F81.1
18E4:  BRA    18E2
18E6:  BTFSC  F81.0
18E8:  BSF    FD8.0
18EA:  BTFSS  F81.0
18EC:  BCF    FD8.0
18EE:  RLCF   01,F
18F0:  NOP   
18F2:  BCF    F93.1
18F4:  BCF    F8A.1
18F6:  DECFSZ x0B,F
18F8:  BRA    18DC
18FA:  BSF    F93.0
18FC:  NOP   
18FE:  BCF    F8A.0
1900:  MOVF   x0C,W
1902:  BTFSS  FD8.2
1904:  BCF    F93.0
1906:  NOP   
1908:  BSF    F93.1
190A:  BTFSS  F81.1
190C:  BRA    190A
190E:  NOP   
1910:  BCF    F8A.1
1912:  BCF    F93.1
1914:  NOP   
1916:  BCF    F8A.0
1918:  BCF    F93.0
191A:  MOVLB  0
191C:  RETLW  00
....................  
....................  
....................  
.................... #include <OLED_I2C.c> 
....................  
....................  /* 
....................  *    PIC C Compiler (CCS) 
....................  * 
....................  *    @section Author 
....................  * 
....................  *    microchipotle.com 
....................  * 
....................  */ 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... //------------------------------ Definitions ---------------------------------// 
.................... //#define OLED_RST PIN_XX  //define un pin para resetear la pantalla  
.................... #define OLED_I2C_ADDRESS 0x78 //ó 0x7A  dirección I2C 
....................  
....................  
.................... #if !defined SSD1306_128_32 && !defined SSD1306_96_16 && !defined SSD1306_128_64 && !defined SH1106_128_64 
....................    #define OLED_LCDWIDTH            128 
....................    #define OLED_LCDHEIGHT            64 
.................... #endif 
....................  
.................... #if defined SH1106_128_64 
....................    #define OLED_LCDWIDTH            128 
....................    #define OLED_LCDHEIGHT            64 
.................... #endif 
.................... #if defined SSD1306_128_64 
....................    #define OLED_LCDWIDTH            128 
....................    #define OLED_LCDHEIGHT            64 
.................... #endif 
.................... #if defined SSD1306_128_32 
....................    #define OLED_LCDWIDTH            128 
....................    #define OLED_LCDHEIGHT            32 
.................... #endif 
.................... #if defined SSD1306_96_16 
....................    #define OLED_LCDWIDTH             96 
....................    #define OLED_LCDHEIGHT            16 
.................... #endif 
....................  
.................... #define OLED_SETCONTRAST          0x81 
.................... #define OLED_DISPLAYALLON_RESUME  0xA4 
.................... #define OLED_DISPLAYALLON         0xA5 
.................... #define OLED_NORMALDISPLAY        0xA6 
.................... #define OLED_INVERTDISPLAY_       0xA7 
.................... #define OLED_DISPLAYOFF           0xAE 
.................... #define OLED_DISPLAYON            0xAF 
.................... #define OLED_SETDISPLAYOFFSET     0xD3 
.................... #define OLED_SETCOMPINS           0xDA 
.................... #define OLED_SETVCOMDETECT        0xDB 
.................... #define OLED_SETDISPLAYCLOCKDIV   0xD5 
.................... #define OLED_SETPRECHARGE         0xD9 
.................... #define OLED_SETMULTIPLEX         0xA8 
.................... #define OLED_SETLOWCOLUMN         0x00 
.................... #define OLED_SETHIGHCOLUMN        0x10 
.................... #define OLED_SETSTARTLINE         0x40 
.................... #define OLED_MEMORYMODE           0x20 
.................... #define OLED_COLUMNADDR           0x21 
.................... #define OLED_PAGEADDR             0x22 
.................... #define OLED_COMSCANINC           0xC0 
.................... #define OLED_COMSCANDEC           0xC8 
.................... #define OLED_SEGREMAP             0xA0 
.................... #define OLED_CHARGEPUMP           0x8D 
.................... #define OLED_EXTERNALVCC          0x01 
.................... #define OLED_SWITCHCAPVCC         0x02 
....................  
.................... // Scrolling #defines 
.................... #define OLED_ACTIVATE_SCROLL                      0x2F 
.................... #define OLED_DEACTIVATE_SCROLL                    0x2E 
.................... #define OLED_SET_VERTICAL_SCROLL_AREA             0xA3 
.................... #define OLED_RIGHT_HORIZONTAL_SCROLL              0x26 
.................... #define OLED_LEFT_HORIZONTAL_SCROLL               0x27 
.................... #define OLED_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29 
.................... #define OLED_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL  0x2A 
....................  
.................... #define OLED_swap(a, b) { int16_t t = a; a = b; b = t; } 
....................  
.................... uint8_t _i2caddr, _vccstate, x_pos, y_pos, text_size; 
.................... boolean wrap = TRUE; 
....................  
.................... void OLED_command(uint8_t c); 
.................... void OLED_Begin(uint8_t vccstate = OLED_SWITCHCAPVCC, uint8_t i2caddr = OLED_I2C_ADDRESS);//inicializa la pantalla 
.................... void OLED_DrawPixel(uint8_t x, uint8_t y, int1 color = True);//cambia de color un pixel de la pantalla 
.................... void OLED_StartScrollRight(uint8_t start, uint8_t stop); 
.................... void OLED_StartScrollLeft(uint8_t start, uint8_t stop); 
.................... void OLED_StartScrollDiagRight(uint8_t start, uint8_t stop); 
.................... void OLED_StartScrollDiagLeft(uint8_t start, uint8_t stop); 
.................... void OLED_StopScroll(void); 
.................... void OLED_Dim(boolean dim); 
.................... void OLED_Display(void);//muestra los datos en pantalla 
.................... void OLED_ClearDisplay(void);//borra la pantalla 
.................... void OLED_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, boolean color = TRUE);//crea una linea (x,y,ancho,alto,color 1/0) 
.................... void OLED_DrawFastHLine(uint8_t x, uint8_t y, uint8_t w, boolean color = TRUE);//linea horizontal (x,y,diametro,color) 
.................... void OLED_DrawFastVLine(uint8_t x, uint8_t y, uint8_t h, boolean color = TRUE);//linea vertical (x,y,diametro,color) 
.................... void OLED_FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, boolean color = TRUE);//rellena el area de un color(x,y,ancho,alto,color 1/0) 
.................... void OLED_FillScreen(boolean color = TRUE);//cambia de color la pantalla 
.................... void OLED_DrawCircle(int16_t x0, int16_t y0, int16_t r);//crea un circulo (x,y,radio) 
.................... void OLED_DrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername);//crea parte de un circulo 
.................... void OLED_FillCircle(int16_t x0, int16_t y0, int16_t r, boolean color = TRUE);//crea un circulo relleno de un color 
.................... void OLED_FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, boolean color = TRUE);//crea parte de un circulo relleno de un color 
.................... void OLED_DrawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h);// crea un rectangulo (x,y,ancho,alto) 
.................... void OLED_DrawRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r);//crea un ovalo 
.................... void OLED_FillRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r, boolean color = TRUE);// crea un rectangulo relleno de un color 
.................... void OLED_DrawTriangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2);//crea un triangulo 
.................... void OLED_FillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, boolean color = TRUE);//crea un triangulo relleno de un color 
.................... void OLED_DrawChar(uint8_t x, uint8_t y, uint8_t c, uint8_t size = 1);//coloca un caracter 
.................... void OLED_DrawText(uint8_t x, uint8_t y, char *_text, uint8_t size = 1);//coloca un texto 
.................... void OLED_TextSize(uint8_t t_size);//cambia el tamaño del texto 
.................... void OLED_GotoXY(uint8_t x, uint8_t y);//posicion de inicion del texto 
.................... void OLED_Print(uint8_t c);//imprime el texto 
.................... void OLED_PutCustomC(rom uint8_t *c);//coloca un caracter creado por el usuario 
.................... void OLED_SetTextWrap(boolean w); 
.................... void OLED_InvertDisplay(boolean i);//invertir el color de la pantalla 
.................... void SSD1306_DrawBMP(uint8_t x, uint8_t y, rom uint8_t *bitmap, uint8_t w, uint8_t h); 
.................... void OLED_ROMBMP(uint8_t x, uint8_t y, rom uint8_t *bitmap, uint8_t w, uint8_t h);//colocar una imagen 
.................... void printBitmap(uint8_t *bitmap, uint8_t width, uint8_t height); 
.................... //--------------------------------------------------------------------------// 
....................  
.................... const char Font[] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x5F, 0x00, 0x00, 
.................... 0x00, 0x07, 0x00, 0x07, 0x00, 
.................... 0x14, 0x7F, 0x14, 0x7F, 0x14, 
.................... 0x24, 0x2A, 0x7F, 0x2A, 0x12, 
.................... 0x23, 0x13, 0x08, 0x64, 0x62, 
.................... 0x36, 0x49, 0x56, 0x20, 0x50, 
.................... 0x00, 0x08, 0x07, 0x03, 0x00, 
.................... 0x00, 0x1C, 0x22, 0x41, 0x00, 
.................... 0x00, 0x41, 0x22, 0x1C, 0x00, 
.................... 0x2A, 0x1C, 0x7F, 0x1C, 0x2A, 
.................... 0x08, 0x08, 0x3E, 0x08, 0x08, 
.................... 0x00, 0x80, 0x70, 0x30, 0x00, 
.................... 0x08, 0x08, 0x08, 0x08, 0x08, 
.................... 0x00, 0x00, 0x60, 0x60, 0x00, 
.................... 0x20, 0x10, 0x08, 0x04, 0x02, 
.................... 0x3E, 0x51, 0x49, 0x45, 0x3E, 
.................... 0x00, 0x42, 0x7F, 0x40, 0x00, 
.................... 0x72, 0x49, 0x49, 0x49, 0x46, 
.................... 0x21, 0x41, 0x49, 0x4D, 0x33, 
.................... 0x18, 0x14, 0x12, 0x7F, 0x10, 
.................... 0x27, 0x45, 0x45, 0x45, 0x39, 
.................... 0x3C, 0x4A, 0x49, 0x49, 0x31, 
.................... 0x41, 0x21, 0x11, 0x09, 0x07, 
.................... 0x36, 0x49, 0x49, 0x49, 0x36, 
.................... 0x46, 0x49, 0x49, 0x29, 0x1E, 
.................... 0x00, 0x00, 0x14, 0x00, 0x00, 
.................... 0x00, 0x40, 0x34, 0x00, 0x00, 
.................... 0x00, 0x08, 0x14, 0x22, 0x41, 
.................... 0x14, 0x14, 0x14, 0x14, 0x14, 
.................... 0x00, 0x41, 0x22, 0x14, 0x08, 
.................... 0x02, 0x01, 0x59, 0x09, 0x06, 
.................... 0x3E, 0x41, 0x5D, 0x59, 0x4E, 
.................... 0x7C, 0x12, 0x11, 0x12, 0x7C, 
.................... 0x7F, 0x49, 0x49, 0x49, 0x36, 
.................... 0x3E, 0x41, 0x41, 0x41, 0x22, 
.................... 0x7F, 0x41, 0x41, 0x41, 0x3E, 
.................... 0x7F, 0x49, 0x49, 0x49, 0x41, 
.................... 0x7F, 0x09, 0x09, 0x09, 0x01, 
.................... 0x3E, 0x41, 0x41, 0x51, 0x73, 
.................... 0x7F, 0x08, 0x08, 0x08, 0x7F, 
.................... 0x00, 0x41, 0x7F, 0x41, 0x00, 
.................... 0x20, 0x40, 0x41, 0x3F, 0x01, 
.................... 0x7F, 0x08, 0x14, 0x22, 0x41, 
.................... 0x7F, 0x40, 0x40, 0x40, 0x40, 
.................... 0x7F, 0x02, 0x1C, 0x02, 0x7F, 
.................... 0x7F, 0x04, 0x08, 0x10, 0x7F, 
.................... 0x3E, 0x41, 0x41, 0x41, 0x3E, 
.................... 0x7F, 0x09, 0x09, 0x09, 0x06, 
.................... 0x3E, 0x41, 0x51, 0x21, 0x5E, 
.................... 0x7F, 0x09, 0x19, 0x29, 0x46 
.................... }; 
.................... const char Font2[] = { 
.................... 0x26, 0x49, 0x49, 0x49, 0x32, 
.................... 0x03, 0x01, 0x7F, 0x01, 0x03, 
.................... 0x3F, 0x40, 0x40, 0x40, 0x3F, 
.................... 0x1F, 0x20, 0x40, 0x20, 0x1F, 
.................... 0x3F, 0x40, 0x38, 0x40, 0x3F, 
.................... 0x63, 0x14, 0x08, 0x14, 0x63, 
.................... 0x03, 0x04, 0x78, 0x04, 0x03, 
.................... 0x61, 0x59, 0x49, 0x4D, 0x43, 
.................... 0x00, 0x7F, 0x41, 0x41, 0x41, 
.................... 0x02, 0x04, 0x08, 0x10, 0x20, 
.................... 0x00, 0x41, 0x41, 0x41, 0x7F, 
.................... 0x04, 0x02, 0x01, 0x02, 0x04, 
.................... 0x40, 0x40, 0x40, 0x40, 0x40, 
.................... 0x00, 0x03, 0x07, 0x08, 0x00, 
.................... 0x20, 0x54, 0x54, 0x78, 0x40, 
.................... 0x7F, 0x28, 0x44, 0x44, 0x38, 
.................... 0x38, 0x44, 0x44, 0x44, 0x28, 
.................... 0x38, 0x44, 0x44, 0x28, 0x7F, 
.................... 0x38, 0x54, 0x54, 0x54, 0x18, 
.................... 0x00, 0x08, 0x7E, 0x09, 0x02, 
.................... 0x18, 0xA4, 0xA4, 0x9C, 0x78, 
.................... 0x7F, 0x08, 0x04, 0x04, 0x78, 
.................... 0x00, 0x44, 0x7D, 0x40, 0x00, 
.................... 0x20, 0x40, 0x40, 0x3D, 0x00, 
.................... 0x7F, 0x10, 0x28, 0x44, 0x00, 
.................... 0x00, 0x41, 0x7F, 0x40, 0x00, 
.................... 0x7C, 0x04, 0x78, 0x04, 0x78, 
.................... 0x7C, 0x08, 0x04, 0x04, 0x78, 
.................... 0x38, 0x44, 0x44, 0x44, 0x38, 
.................... 0xFC, 0x18, 0x24, 0x24, 0x18, 
.................... 0x18, 0x24, 0x24, 0x18, 0xFC, 
.................... 0x7C, 0x08, 0x04, 0x04, 0x08, 
.................... 0x48, 0x54, 0x54, 0x54, 0x24, 
.................... 0x04, 0x04, 0x3F, 0x44, 0x24, 
.................... 0x3C, 0x40, 0x40, 0x20, 0x7C, 
.................... 0x1C, 0x20, 0x40, 0x20, 0x1C, 
.................... 0x3C, 0x40, 0x30, 0x40, 0x3C, 
.................... 0x44, 0x28, 0x10, 0x28, 0x44, 
.................... 0x4C, 0x90, 0x90, 0x90, 0x7C, 
.................... 0x44, 0x64, 0x54, 0x4C, 0x44, 
.................... 0x00, 0x08, 0x36, 0x41, 0x00, 
.................... 0x00, 0x00, 0x77, 0x00, 0x00, 
.................... 0x00, 0x41, 0x36, 0x08, 0x00, 
.................... 0x02, 0x01, 0x02, 0x04, 0x02 
.................... }; 
....................  
.................... static uint8_t OLED_buffer[OLED_LCDHEIGHT * OLED_LCDWIDTH / 8] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
.................... 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x80, 0x80, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 
.................... 0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0xFF 
.................... }; 
....................  
....................  
.................... void OLED_command(uint8_t c) 
.................... { 
*
0F44:  MOVLB  6
0F46:  CLRF   x1C
....................   uint8_t control = 0x00;   // Co = 0, D/C = 0 
....................     I2C_Start(OLED_stream); 
0F48:  BSF    F93.0
0F4A:  NOP   
0F4C:  BSF    F93.1
0F4E:  NOP   
0F50:  BCF    F8A.0
0F52:  BCF    F93.0
0F54:  NOP   
0F56:  BCF    F8A.1
0F58:  BCF    F93.1
0F5A:  CLRF   16
0F5C:  BTFSC  FF2.7
0F5E:  BSF    16.7
0F60:  BCF    FF2.7
....................     I2C_Write(OLED_stream, _i2caddr); 
0F62:  MOVFF  17,647
0F66:  MOVLB  0
0F68:  CALL   02F2
0F6C:  BTFSC  16.7
0F6E:  BSF    FF2.7
0F70:  CLRF   16
0F72:  BTFSC  FF2.7
0F74:  BSF    16.7
0F76:  BCF    FF2.7
....................     I2C_Write(OLED_stream, control); 
0F78:  MOVFF  61C,647
0F7C:  CALL   02F2
0F80:  BTFSC  16.7
0F82:  BSF    FF2.7
0F84:  CLRF   16
0F86:  BTFSC  FF2.7
0F88:  BSF    16.7
0F8A:  BCF    FF2.7
....................     I2C_Write(OLED_stream, c); 
0F8C:  MOVFF  61B,647
0F90:  CALL   02F2
0F94:  BTFSC  16.7
0F96:  BSF    FF2.7
....................     I2C_Stop(OLED_stream); 
0F98:  BCF    F93.0
0F9A:  NOP   
0F9C:  BSF    F93.1
0F9E:  BTFSS  F81.1
0FA0:  BRA    0F9E
0FA2:  NOP   
0FA4:  BRA    0FA6
0FA6:  NOP   
0FA8:  BSF    F93.0
0FAA:  NOP   
.................... } 
0FAC:  RETLW  00
....................  
.................... uint8_t vccstate = OLED_SWITCHCAPVCC; 
.................... uint8_t i2caddr = OLED_I2C_ADDRESS; 
.................... void OLED_Begin() 
.................... { 
....................   _vccstate = vccstate; 
0FAE:  MOVFF  41D,18
....................   _i2caddr  = i2caddr; 
0FB2:  MOVFF  41E,17
....................   delay_ms(10); 
0FB6:  MOVLW  0A
0FB8:  MOVLB  5
0FBA:  MOVWF  x9C
0FBC:  MOVLB  0
0FBE:  BRA    0F1A
....................  
....................   #ifdef OLED_RST 
....................     output_low(OLED_RST); 
....................     output_drive(OLED_RST); 
....................     delay_ms(10); 
....................     output_high(OLED_RST); 
....................   #endif 
....................    
....................   // Init sequence 
....................   OLED_command(OLED_DISPLAYOFF);                    // 0xAE 
0FC0:  MOVLW  AE
0FC2:  MOVLB  6
0FC4:  MOVWF  x1B
0FC6:  MOVLB  0
0FC8:  RCALL  0F44
....................   OLED_command(OLED_SETDISPLAYCLOCKDIV);            // 0xD5 
0FCA:  MOVLW  D5
0FCC:  MOVLB  6
0FCE:  MOVWF  x1B
0FD0:  MOVLB  0
0FD2:  RCALL  0F44
....................   OLED_command(0x80);                                  // the suggested ratio 0x80 
0FD4:  MOVLW  80
0FD6:  MOVLB  6
0FD8:  MOVWF  x1B
0FDA:  MOVLB  0
0FDC:  RCALL  0F44
....................  
....................   OLED_command(OLED_SETMULTIPLEX);                  // 0xA8 
0FDE:  MOVLW  A8
0FE0:  MOVLB  6
0FE2:  MOVWF  x1B
0FE4:  MOVLB  0
0FE6:  RCALL  0F44
....................   OLED_command(OLED_LCDHEIGHT - 1); 
0FE8:  MOVLW  3F
0FEA:  MOVLB  6
0FEC:  MOVWF  x1B
0FEE:  MOVLB  0
0FF0:  RCALL  0F44
....................  
....................   OLED_command(OLED_SETDISPLAYOFFSET);              // 0xD3 
0FF2:  MOVLW  D3
0FF4:  MOVLB  6
0FF6:  MOVWF  x1B
0FF8:  MOVLB  0
0FFA:  RCALL  0F44
....................   OLED_command(0x0);                                   // no offset 
0FFC:  MOVLB  6
0FFE:  CLRF   x1B
1000:  MOVLB  0
1002:  RCALL  0F44
....................   OLED_command(OLED_SETSTARTLINE | 0x0);            // line #0 
1004:  MOVLW  40
1006:  MOVLB  6
1008:  MOVWF  x1B
100A:  MOVLB  0
100C:  RCALL  0F44
....................   OLED_command(OLED_CHARGEPUMP);                    // 0x8D 
100E:  MOVLW  8D
1010:  MOVLB  6
1012:  MOVWF  x1B
1014:  MOVLB  0
1016:  RCALL  0F44
....................   if (vccstate == OLED_EXTERNALVCC) 
1018:  MOVLB  4
101A:  DECFSZ x1D,W
101C:  BRA    102A
....................     { OLED_command(0x10); } 
101E:  MOVLW  10
1020:  MOVLB  6
1022:  MOVWF  x1B
1024:  MOVLB  0
1026:  RCALL  0F44
....................   else 
1028:  BRA    1034
....................     { OLED_command(0x14); } 
102A:  MOVLW  14
102C:  MOVLB  6
102E:  MOVWF  x1B
1030:  MOVLB  0
1032:  RCALL  0F44
....................   OLED_command(OLED_MEMORYMODE);                    // 0x20 
1034:  MOVLW  20
1036:  MOVLB  6
1038:  MOVWF  x1B
103A:  MOVLB  0
103C:  RCALL  0F44
....................   OLED_command(0x00);                                  // 0x0 act like ks0108 
103E:  MOVLB  6
1040:  CLRF   x1B
1042:  MOVLB  0
1044:  RCALL  0F44
....................   OLED_command(OLED_SEGREMAP | 0x1); 
1046:  MOVLW  A1
1048:  MOVLB  6
104A:  MOVWF  x1B
104C:  MOVLB  0
104E:  RCALL  0F44
....................   OLED_command(OLED_COMSCANDEC); 
1050:  MOVLW  C8
1052:  MOVLB  6
1054:  MOVWF  x1B
1056:  MOVLB  0
1058:  RCALL  0F44
....................  
....................  #if defined SSD1306_128_32 
....................   OLED_command(OLED_SETCOMPINS);                    // 0xDA 
....................   OLED_command(0x02); 
....................   OLED_command(OLED_SETCONTRAST);                   // 0x81 
....................   OLED_command(0x8F); 
....................  
.................... #elif defined SSD1306_128_64 
....................   OLED_command(OLED_SETCOMPINS);                    // 0xDA 
....................   OLED_command(0x12); 
....................   OLED_command(OLED_SETCONTRAST);                   // 0x81 
....................   if (vccstate == OLED_EXTERNALVCC) 
....................     { OLED_command(0x9F); } 
....................   else 
....................     { OLED_command(0xCF); } 
....................  
.................... #elif defined SSD1306_96_16 
....................   OLED_command(OLED_SETCOMPINS);                    // 0xDA 
....................   OLED_command(0x2);   //ada x12 
....................   OLED_command(OLED_SETCONTRAST);                   // 0x81 
....................   if (vccstate == OLED_EXTERNALVCC) 
....................     { OLED_command(0x10); } 
....................   else 
....................     { OLED_command(0xAF); } 
....................  
.................... #endif 
....................  
....................   OLED_command(OLED_SETPRECHARGE);                  // 0xd9 
105A:  MOVLW  D9
105C:  MOVLB  6
105E:  MOVWF  x1B
1060:  MOVLB  0
1062:  RCALL  0F44
....................   if (vccstate == OLED_EXTERNALVCC) 
1064:  MOVLB  4
1066:  DECFSZ x1D,W
1068:  BRA    1076
....................     { OLED_command(0x22); } 
106A:  MOVLW  22
106C:  MOVLB  6
106E:  MOVWF  x1B
1070:  MOVLB  0
1072:  RCALL  0F44
....................   else 
1074:  BRA    1080
....................     { OLED_command(0xF1); } 
1076:  MOVLW  F1
1078:  MOVLB  6
107A:  MOVWF  x1B
107C:  MOVLB  0
107E:  RCALL  0F44
....................   OLED_command(OLED_SETVCOMDETECT);                 // 0xDB 
1080:  MOVLW  DB
1082:  MOVLB  6
1084:  MOVWF  x1B
1086:  MOVLB  0
1088:  RCALL  0F44
....................   OLED_command(0x40); 
108A:  MOVLW  40
108C:  MOVLB  6
108E:  MOVWF  x1B
1090:  MOVLB  0
1092:  RCALL  0F44
....................   OLED_command(OLED_DISPLAYALLON_RESUME);           // 0xA4 
1094:  MOVLW  A4
1096:  MOVLB  6
1098:  MOVWF  x1B
109A:  MOVLB  0
109C:  RCALL  0F44
....................   OLED_command(OLED_NORMALDISPLAY);                 // 0xA6 
109E:  MOVLW  A6
10A0:  MOVLB  6
10A2:  MOVWF  x1B
10A4:  MOVLB  0
10A6:  RCALL  0F44
....................  
....................   OLED_command(OLED_DEACTIVATE_SCROLL); 
10A8:  MOVLW  2E
10AA:  MOVLB  6
10AC:  MOVWF  x1B
10AE:  MOVLB  0
10B0:  RCALL  0F44
....................  
....................   OLED_command(OLED_DISPLAYON);//--turn on oled panel 
10B2:  MOVLW  AF
10B4:  MOVLB  6
10B6:  MOVWF  x1B
10B8:  MOVLB  0
10BA:  RCALL  0F44
....................    
....................   // set cursor to (0, 0) 
....................   x_pos = 0; 
10BC:  CLRF   19
....................   y_pos = 0; 
10BE:  CLRF   1A
....................   // set text size to 1 
....................   text_size = 1; 
10C0:  MOVLW  01
10C2:  MOVWF  1B
.................... } 
10C4:  GOTO   1248 (RETURN)
....................  
.................... void OLED_DrawPixel(uint8_t x, uint8_t y, boolean color = TRUE) 
.................... { 
....................   if ((x >= OLED_LCDWIDTH) || (y >= OLED_LCDHEIGHT)) 
*
12A8:  MOVLB  6
12AA:  MOVF   x3B,W
12AC:  SUBLW  7F
12AE:  BNC   12B6
12B0:  MOVF   x3C,W
12B2:  SUBLW  3F
12B4:  BC    12B8
....................     return; 
12B6:  BRA    1394
....................   if (color) 
12B8:  MOVF   x3D,F
12BA:  BZ    1328
....................     OLED_buffer[x + (uint16_t)(y / 8) * OLED_LCDWIDTH] |=  (1 << (y & 7)); 
12BC:  RRCF   x3C,W
12BE:  MOVWF  00
12C0:  RRCF   00,F
12C2:  RRCF   00,F
12C4:  MOVLW  1F
12C6:  ANDWF  00,F
12C8:  MOVF   00,W
12CA:  CLRF   x3F
12CC:  MOVWF  x3E
12CE:  RLCF   x3E,W
12D0:  MOVWF  02
12D2:  RLCF   x3F,W
12D4:  MOVWF  03
12D6:  RLCF   02,F
12D8:  RLCF   03,F
12DA:  RLCF   02,F
12DC:  RLCF   03,F
12DE:  RLCF   02,F
12E0:  RLCF   03,F
12E2:  RLCF   02,F
12E4:  RLCF   03,F
12E6:  RLCF   02,F
12E8:  RLCF   03,F
12EA:  RLCF   02,F
12EC:  RLCF   03,F
12EE:  MOVLW  80
12F0:  ANDWF  02,F
12F2:  MOVF   02,W
12F4:  ADDWF  x3B,W
12F6:  MOVWF  x3E
12F8:  MOVLW  00
12FA:  ADDWFC 03,W
12FC:  MOVWF  x3F
12FE:  MOVLW  1D
1300:  ADDWF  x3E,W
1302:  MOVWF  FE9
1304:  MOVLW  00
1306:  ADDWFC x3F,W
1308:  MOVWF  FEA
130A:  MOVF   x3C,W
130C:  ANDLW  07
130E:  MOVWF  01
1310:  MOVLW  01
1312:  MOVWF  00
1314:  MOVF   01,F
1316:  BZ    1320
1318:  BCF    FD8.0
131A:  RLCF   00,F
131C:  DECFSZ 01,F
131E:  BRA    1318
1320:  MOVF   00,W
1322:  IORWF  FEF,W
1324:  MOVWF  FEF
....................   else 
1326:  BRA    1394
....................     OLED_buffer[x + (uint16_t)(y / 8) * OLED_LCDWIDTH] &=  ~(1 << (y & 7)); 
1328:  RRCF   x3C,W
132A:  MOVWF  00
132C:  RRCF   00,F
132E:  RRCF   00,F
1330:  MOVLW  1F
1332:  ANDWF  00,F
1334:  MOVF   00,W
1336:  CLRF   x3F
1338:  MOVWF  x3E
133A:  RLCF   x3E,W
133C:  MOVWF  02
133E:  RLCF   x3F,W
1340:  MOVWF  03
1342:  RLCF   02,F
1344:  RLCF   03,F
1346:  RLCF   02,F
1348:  RLCF   03,F
134A:  RLCF   02,F
134C:  RLCF   03,F
134E:  RLCF   02,F
1350:  RLCF   03,F
1352:  RLCF   02,F
1354:  RLCF   03,F
1356:  RLCF   02,F
1358:  RLCF   03,F
135A:  MOVLW  80
135C:  ANDWF  02,F
135E:  MOVF   02,W
1360:  ADDWF  x3B,W
1362:  MOVWF  x3E
1364:  MOVLW  00
1366:  ADDWFC 03,W
1368:  MOVWF  x3F
136A:  MOVLW  1D
136C:  ADDWF  x3E,W
136E:  MOVWF  FE9
1370:  MOVLW  00
1372:  ADDWFC x3F,W
1374:  MOVWF  FEA
1376:  MOVF   x3C,W
1378:  ANDLW  07
137A:  MOVWF  01
137C:  MOVLW  01
137E:  MOVWF  00
1380:  MOVF   01,F
1382:  BZ    138C
1384:  BCF    FD8.0
1386:  RLCF   00,F
1388:  DECFSZ 01,F
138A:  BRA    1384
138C:  MOVF   00,W
138E:  XORLW  FF
1390:  ANDWF  FEF,W
1392:  MOVWF  FEF
.................... } 
1394:  MOVLB  0
1396:  RETLW  00
....................  
.................... void OLED_StartScrollRight(uint8_t start, uint8_t stop) 
.................... { 
....................   OLED_command(OLED_RIGHT_HORIZONTAL_SCROLL); 
....................   OLED_command(0X00); 
....................   OLED_command(start); 
....................   OLED_command(0X00); 
....................   OLED_command(stop); 
....................   OLED_command(0X00); 
....................   OLED_command(0XFF); 
....................   OLED_command(OLED_ACTIVATE_SCROLL); 
.................... } 
....................  
.................... void OLED_StartScrollLeft(uint8_t start, uint8_t stop) 
.................... { 
....................   OLED_command(OLED_LEFT_HORIZONTAL_SCROLL); 
....................   OLED_command(0X00); 
....................   OLED_command(start); 
....................   OLED_command(0X00); 
....................   OLED_command(stop); 
....................   OLED_command(0X00); 
....................   OLED_command(0XFF); 
....................   OLED_command(OLED_ACTIVATE_SCROLL); 
.................... } 
....................  
.................... void OLED_StartScrollDiagRight(uint8_t start, uint8_t stop) 
.................... { 
....................   OLED_command(OLED_SET_VERTICAL_SCROLL_AREA); 
....................   OLED_command(0X00); 
....................   OLED_command(OLED_LCDHEIGHT); 
....................   OLED_command(OLED_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL); 
....................   OLED_command(0X00); 
....................   OLED_command(start); 
....................   OLED_command(0X00); 
....................   OLED_command(stop); 
....................   OLED_command(0X01); 
....................   OLED_command(OLED_ACTIVATE_SCROLL); 
.................... } 
....................  
.................... void OLED_StartScrollDiagLeft(uint8_t start, uint8_t stop) 
.................... { 
....................   OLED_command(OLED_SET_VERTICAL_SCROLL_AREA); 
....................   OLED_command(0X00); 
....................   OLED_command(OLED_LCDHEIGHT); 
....................   OLED_command(OLED_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL); 
....................   OLED_command(0X00); 
....................   OLED_command(start); 
....................   OLED_command(0X00); 
....................   OLED_command(stop); 
....................   OLED_command(0X01); 
....................   OLED_command(OLED_ACTIVATE_SCROLL); 
.................... } 
....................  
.................... void OLED_StopScroll(void) 
.................... { 
....................   OLED_command(OLED_DEACTIVATE_SCROLL); 
.................... } 
....................  
.................... void OLED_Dim(boolean dim) 
.................... { 
....................   uint8_t contrast; 
....................   if (dim) 
....................     contrast = 0; // Dimmed display 
....................   else { 
....................     if (_vccstate == OLED_EXTERNALVCC) 
....................       contrast = 0x9F; 
....................     else 
....................       contrast = 0xCF; 
....................   } 
....................   // the range of contrast to too small to be really useful 
....................   // it is useful to dim the display 
....................   OLED_command(OLED_SETCONTRAST); 
....................   OLED_command(contrast); 
.................... } 
....................  
.................... void OLED_Display(void) 
.................... { 
*
110E:  MOVLB  6
1110:  CLRF   x0B
1112:  CLRF   x0A
....................    uint16_t n2=0, p; 
....................    rom uint8_t Page[8]={0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7}; 
....................    oled_command(OLED_COLUMNADDR); 
1114:  MOVLW  21
1116:  MOVWF  x1B
1118:  MOVLB  0
111A:  RCALL  0F44
....................    oled_command(0);   // Column start address (0 = reset) 
111C:  MOVLB  6
111E:  CLRF   x1B
1120:  MOVLB  0
1122:  RCALL  0F44
....................    oled_command(OLED_LCDWIDTH-1); // Column end address (127 = reset) 
1124:  MOVLW  7F
1126:  MOVLB  6
1128:  MOVWF  x1B
112A:  MOVLB  0
112C:  RCALL  0F44
....................  
....................    oled_command(OLED_PAGEADDR); 
112E:  MOVLW  22
1130:  MOVLB  6
1132:  MOVWF  x1B
1134:  MOVLB  0
1136:  RCALL  0F44
....................    oled_command(0); // Page start address (0 = reset) 
1138:  MOVLB  6
113A:  CLRF   x1B
113C:  MOVLB  0
113E:  RCALL  0F44
....................    oled_command(7); 
1140:  MOVLW  07
1142:  MOVLB  6
1144:  MOVWF  x1B
1146:  MOVLB  0
1148:  RCALL  0F44
....................     for (p=1; p<=OLED_LCDHEIGHT/8; ++p) 
114A:  MOVLB  6
114C:  CLRF   x0D
114E:  MOVLW  01
1150:  MOVWF  x0C
1152:  MOVF   x0D,F
1154:  BTFSS  FD8.2
1156:  BRA    1242
1158:  MOVF   x0C,W
115A:  SUBLW  08
115C:  BNC   1242
....................    {  
....................       oled_command(0x00);//Set Lower Column Address (1)TEM QUE SER 0, SENÃO FICA COM A PRIMERIA COLUNA BUGADA  
115E:  CLRF   x1B
1160:  MOVLB  0
1162:  RCALL  0F44
....................       oled_command(0x10);//Set Higher Column Address (2)  
1164:  MOVLW  10
1166:  MOVLB  6
1168:  MOVWF  x1B
116A:  MOVLB  0
116C:  RCALL  0F44
....................       oled_command(Page[p-1]);//Set Page Address(12)   
116E:  MOVLW  01
1170:  MOVLB  6
1172:  SUBWF  x0C,W
1174:  MOVWF  x0F
1176:  MOVLW  00
1178:  SUBWFB x0D,W
117A:  MOVWF  x10
117C:  MOVLW  F8
117E:  ADDWF  x0F,F
1180:  MOVLW  7F
1182:  ADDWFC x10,F
1184:  CLRF   FF8
1186:  MOVFF  610,FF7
118A:  MOVFF  60F,FF6
118E:  MOVLW  06
1190:  MOVWF  FEA
1192:  MOVLW  11
1194:  MOVWF  FE9
1196:  CLRF   x1C
1198:  MOVLW  01
119A:  MOVWF  x1B
119C:  MOVLB  0
119E:  BRA    10EE
11A0:  MOVFF  611,61B
11A4:  RCALL  0F44
....................       i2c_Start (OLED_stream); // inicia la comunicación 
11A6:  BSF    F93.0
11A8:  NOP   
11AA:  BSF    F93.1
11AC:  NOP   
11AE:  BCF    F8A.0
11B0:  BCF    F93.0
11B2:  NOP   
11B4:  BCF    F8A.1
11B6:  BCF    F93.1
11B8:  CLRF   16
11BA:  BTFSC  FF2.7
11BC:  BSF    16.7
11BE:  BCF    FF2.7
....................       i2c_Write (OLED_stream,OLED_I2C_ADDRESS); //direccion I2C              
11C0:  MOVLW  78
11C2:  MOVLB  6
11C4:  MOVWF  x47
11C6:  MOVLB  0
11C8:  CALL   02F2
11CC:  BTFSC  16.7
11CE:  BSF    FF2.7
11D0:  CLRF   16
11D2:  BTFSC  FF2.7
11D4:  BSF    16.7
11D6:  BCF    FF2.7
....................       i2c_Write (OLED_stream,0x40); //Control de dirección 
11D8:  MOVLW  40
11DA:  MOVLB  6
11DC:  MOVWF  x47
11DE:  MOVLB  0
11E0:  CALL   02F2
11E4:  BTFSC  16.7
11E6:  BSF    FF2.7
....................       uint8_t i; 
....................       for (i=1; i<=OLED_LCDWIDTH; ++i) 
11E8:  MOVLW  01
11EA:  MOVLB  6
11EC:  MOVWF  x0E
11EE:  MOVF   x0E,W
11F0:  SUBLW  80
11F2:  BNC   1226
....................       {       
....................          i2c_Write (OLED_stream,OLED_buffer[n2]);       
11F4:  MOVLW  1D
11F6:  ADDWF  x0A,W
11F8:  MOVWF  FE9
11FA:  MOVLW  00
11FC:  ADDWFC x0B,W
11FE:  MOVWF  FEA
1200:  MOVFF  FEF,60F
1204:  CLRF   16
1206:  BTFSC  FF2.7
1208:  BSF    16.7
120A:  BCF    FF2.7
120C:  MOVFF  60F,647
1210:  MOVLB  0
1212:  CALL   02F2
1216:  BTFSC  16.7
1218:  BSF    FF2.7
....................          n2++; 
121A:  MOVLB  6
121C:  INCF   x0A,F
121E:  BTFSC  FD8.2
1220:  INCF   x0B,F
....................       } 
1222:  INCF   x0E,F
1224:  BRA    11EE
....................        i2c_Stop (OLED_stream); //termina la comunicación 
1226:  BCF    F93.0
1228:  NOP   
122A:  BSF    F93.1
122C:  BTFSS  F81.1
122E:  BRA    122C
1230:  NOP   
1232:  BRA    1234
1234:  NOP   
1236:  BSF    F93.0
1238:  NOP   
....................    } 
123A:  INCF   x0C,F
123C:  BTFSC  FD8.2
123E:  INCF   x0D,F
1240:  BRA    1152
.................... } 
1242:  MOVLB  0
1244:  RETLW  00
....................  
.................... void OLED_ClearDisplay(void) 
.................... { 
....................       uint16_t i; 
....................       for ( i = 0; i < (OLED_LCDWIDTH*OLED_LCDHEIGHT / 8); i++) 
*
10C8:  MOVLB  6
10CA:  CLRF   x0B
10CC:  CLRF   x0A
10CE:  MOVF   x0B,W
10D0:  SUBLW  03
10D2:  BNC   10EA
....................       OLED_buffer[i] = 0; 
10D4:  MOVLW  1D
10D6:  ADDWF  x0A,W
10D8:  MOVWF  FE9
10DA:  MOVLW  00
10DC:  ADDWFC x0B,W
10DE:  MOVWF  FEA
10E0:  CLRF   FEF
10E2:  INCF   x0A,F
10E4:  BTFSC  FD8.2
10E6:  INCF   x0B,F
10E8:  BRA    10CE
.................... } 
10EA:  MOVLB  0
10EC:  RETLW  00
....................  
.................... void OLED_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, boolean color = TRUE) 
.................... { 
....................   boolean steep; 
....................   int8_t ystep; 
....................   uint8_t dx, dy; 
....................   int16_t err; 
....................   steep = abs(y1 - y0) > abs(x1 - x0); 
*
1398:  MOVLB  6
139A:  BCF    x2D.0
139C:  MOVF   x26,W
139E:  SUBWF  x2A,W
13A0:  MOVWF  x3B
13A2:  MOVF   x27,W
13A4:  SUBWFB x2B,W
13A6:  MOVWF  x3C
13A8:  MOVWF  03
13AA:  MOVF   x3B,W
13AC:  BTFSS  x3C.7
13AE:  BRA    13C0
13B0:  MOVLW  00
13B2:  BSF    FD8.0
13B4:  SUBFWB x3B,W
13B6:  MOVWF  00
13B8:  MOVLW  00
13BA:  SUBFWB x3C,W
13BC:  MOVWF  03
13BE:  MOVF   00,W
13C0:  MOVWF  x3B
13C2:  MOVFF  03,63C
13C6:  MOVF   x24,W
13C8:  SUBWF  x28,W
13CA:  MOVWF  x3D
13CC:  MOVF   x25,W
13CE:  SUBWFB x29,W
13D0:  MOVWF  x3E
13D2:  MOVWF  03
13D4:  MOVF   x3D,W
13D6:  BTFSS  x3E.7
13D8:  BRA    13EA
13DA:  MOVLW  00
13DC:  BSF    FD8.0
13DE:  SUBFWB x3D,W
13E0:  MOVWF  00
13E2:  MOVLW  00
13E4:  SUBFWB x3E,W
13E6:  MOVWF  03
13E8:  MOVF   00,W
13EA:  MOVWF  01
13EC:  BTFSS  03.7
13EE:  BRA    13F6
13F0:  BTFSS  x3C.7
13F2:  BRA    1408
13F4:  BRA    13FA
13F6:  BTFSC  x3C.7
13F8:  BRA    140A
13FA:  MOVF   03,W
13FC:  SUBWF  x3C,W
13FE:  BNC   140A
1400:  BNZ   1408
1402:  MOVF   x3B,W
1404:  SUBWF  01,W
1406:  BC    140A
1408:  BSF    x2D.0
....................   if (steep) { 
140A:  BTFSS  x2D.0
140C:  BRA    143E
....................     OLED_swap(x0, y0); 
140E:  MOVFF  625,634
1412:  MOVFF  624,633
1416:  MOVFF  627,625
141A:  MOVFF  626,624
141E:  MOVFF  634,627
1422:  MOVFF  633,626
....................     OLED_swap(x1, y1); 
1426:  MOVFF  629,636
142A:  MOVFF  628,635
142E:  MOVFF  62B,629
1432:  MOVFF  62A,628
1436:  MOVFF  636,62B
143A:  MOVFF  635,62A
....................   } 
....................   if (x0 > x1) { 
143E:  BTFSS  x29.7
1440:  BRA    1448
1442:  BTFSS  x25.7
1444:  BRA    145A
1446:  BRA    144C
1448:  BTFSC  x25.7
144A:  BRA    148A
144C:  MOVF   x29,W
144E:  SUBWF  x25,W
1450:  BNC   148A
1452:  BNZ   145A
1454:  MOVF   x24,W
1456:  SUBWF  x28,W
1458:  BC    148A
....................     OLED_swap(x0, x1); 
145A:  MOVFF  625,638
145E:  MOVFF  624,637
1462:  MOVFF  629,625
1466:  MOVFF  628,624
146A:  MOVFF  638,629
146E:  MOVFF  637,628
....................     OLED_swap(y0, y1); 
1472:  MOVFF  627,63A
1476:  MOVFF  626,639
147A:  MOVFF  62B,627
147E:  MOVFF  62A,626
1482:  MOVFF  63A,62B
1486:  MOVFF  639,62A
....................   } 
....................   dx = x1 - x0; 
148A:  MOVF   x24,W
148C:  SUBWF  x28,W
148E:  MOVWF  00
1490:  MOVF   x25,W
1492:  SUBWFB x29,W
1494:  MOVFF  00,62F
....................   dy = abs(y1 - y0); 
1498:  MOVF   x26,W
149A:  SUBWF  x2A,W
149C:  MOVWF  x3B
149E:  MOVF   x27,W
14A0:  SUBWFB x2B,W
14A2:  MOVWF  x3C
14A4:  MOVWF  03
14A6:  MOVF   x3B,W
14A8:  BTFSS  x3C.7
14AA:  BRA    14BC
14AC:  MOVLW  00
14AE:  BSF    FD8.0
14B0:  SUBFWB x3B,W
14B2:  MOVWF  00
14B4:  MOVLW  00
14B6:  SUBFWB x3C,W
14B8:  MOVWF  03
14BA:  MOVF   00,W
14BC:  MOVWF  x30
....................  
....................   err = dx / 2; 
14BE:  BCF    FD8.0
14C0:  RRCF   x2F,W
14C2:  CLRF   03
14C4:  MOVWF  x31
14C6:  MOVFF  03,632
....................   if (y0 < y1) 
14CA:  BTFSS  x27.7
14CC:  BRA    14D4
14CE:  BTFSS  x2B.7
14D0:  BRA    14E6
14D2:  BRA    14D8
14D4:  BTFSC  x2B.7
14D6:  BRA    14EC
14D8:  MOVF   x27,W
14DA:  SUBWF  x2B,W
14DC:  BNC   14EC
14DE:  BNZ   14E6
14E0:  MOVF   x2A,W
14E2:  SUBWF  x26,W
14E4:  BC    14EC
....................     ystep = 1; 
14E6:  MOVLW  01
14E8:  MOVWF  x2E
....................   else 
14EA:  BRA    14F0
....................     ystep = -1; 
14EC:  MOVLW  FF
14EE:  MOVWF  x2E
....................  
....................   for (; x0 <= x1; x0++) { 
14F0:  BTFSS  x25.7
14F2:  BRA    14FA
14F4:  BTFSS  x29.7
14F6:  BRA    150C
14F8:  BRA    14FE
14FA:  BTFSC  x29.7
14FC:  BRA    158E
14FE:  MOVF   x25,W
1500:  SUBWF  x29,W
1502:  BNC   158E
1504:  BNZ   150C
1506:  MOVF   x24,W
1508:  SUBWF  x28,W
150A:  BNC   158E
....................     if (steep) { 
150C:  BTFSS  x2D.0
150E:  BRA    153A
....................       if(color) OLED_DrawPixel(y0, x0); 
1510:  MOVF   x2C,F
1512:  BZ    1528
1514:  MOVFF  626,63B
1518:  MOVFF  624,63C
151C:  MOVLW  01
151E:  MOVWF  x3D
1520:  MOVLB  0
1522:  RCALL  12A8
....................       else      OLED_DrawPixel(y0, x0, FALSE); 
1524:  BRA    1536
1526:  MOVLB  6
1528:  MOVFF  626,63B
152C:  MOVFF  624,63C
1530:  CLRF   x3D
1532:  MOVLB  0
1534:  RCALL  12A8
....................     } 
....................     else { 
1536:  BRA    1560
1538:  MOVLB  6
....................       if(color) OLED_DrawPixel(x0, y0); 
153A:  MOVF   x2C,F
153C:  BZ    1552
153E:  MOVFF  624,63B
1542:  MOVFF  626,63C
1546:  MOVLW  01
1548:  MOVWF  x3D
154A:  MOVLB  0
154C:  RCALL  12A8
....................       else      OLED_DrawPixel(x0, y0, FALSE); 
154E:  BRA    1560
1550:  MOVLB  6
1552:  MOVFF  624,63B
1556:  MOVFF  626,63C
155A:  CLRF   x3D
155C:  MOVLB  0
155E:  RCALL  12A8
....................     } 
....................     err -= dy; 
1560:  MOVLB  6
1562:  MOVF   x30,W
1564:  SUBWF  x31,F
1566:  MOVLW  00
1568:  SUBWFB x32,F
....................     if (err < 0) { 
156A:  BTFSC  x32.7
156C:  BRA    1570
156E:  BRA    1586
....................       y0  += ystep; 
1570:  CLRF   03
1572:  MOVF   x2E,W
1574:  BTFSC  FE8.7
1576:  DECF   03,F
1578:  ADDWF  x26,F
157A:  MOVF   03,W
157C:  ADDWFC x27,F
....................       err += dx; 
157E:  MOVF   x2F,W
1580:  ADDWF  x31,F
1582:  MOVLW  00
1584:  ADDWFC x32,F
....................     } 
....................   } 
1586:  INCF   x24,F
1588:  BTFSC  FD8.2
158A:  INCF   x25,F
158C:  BRA    14F0
.................... } 
158E:  MOVLB  0
1590:  RETLW  00
....................  
.................... void OLED_DrawFastHLine(uint8_t x, uint8_t y, uint8_t w, boolean color = TRUE) 
.................... { 
....................    OLED_DrawLine(x, y, x + w - 1, y, color); 
*
1DEA:  MOVLB  6
1DEC:  MOVF   x11,W
1DEE:  ADDWF  x0F,W
1DF0:  ADDLW  FF
1DF2:  MOVWF  x13
1DF4:  CLRF   x25
1DF6:  MOVFF  60F,624
1DFA:  CLRF   x27
1DFC:  MOVFF  610,626
1E00:  CLRF   x29
1E02:  MOVWF  x28
1E04:  CLRF   x2B
1E06:  MOVFF  610,62A
1E0A:  MOVFF  612,62C
1E0E:  MOVLB  0
1E10:  CALL   1398
.................... } 
1E14:  RETLW  00
....................  
.................... void OLED_DrawFastVLine(uint8_t x, uint8_t y, uint8_t h, boolean color = TRUE) 
.................... { 
....................   OLED_DrawLine(x, y, x, y + h - 1, color); 
*
1592:  MOVLB  6
1594:  MOVF   x21,W
1596:  ADDWF  x20,W
1598:  ADDLW  FF
159A:  MOVWF  x23
159C:  CLRF   x25
159E:  MOVFF  61F,624
15A2:  CLRF   x27
15A4:  MOVFF  620,626
15A8:  CLRF   x29
15AA:  MOVFF  61F,628
15AE:  CLRF   x2B
15B0:  MOVWF  x2A
15B2:  MOVFF  622,62C
15B6:  MOVLB  0
15B8:  RCALL  1398
.................... } 
15BA:  RETLW  00
....................  
.................... void OLED_FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, boolean color = TRUE) 
.................... { 
....................   int16_t i; 
....................   for (i = x; i < x + w; i++) 
15BC:  CLRF   03
15BE:  MOVLB  6
15C0:  MOVFF  618,61D
15C4:  MOVFF  03,61E
15C8:  MOVF   x1A,W
15CA:  ADDWF  x18,W
15CC:  BTFSC  x1E.7
15CE:  BRA    15D8
15D0:  MOVF   x1E,F
15D2:  BNZ   15F6
15D4:  SUBWF  x1D,W
15D6:  BC    15F6
....................     OLED_DrawFastVLine(i, y, h, color); 
15D8:  MOVFF  61D,61F
15DC:  MOVFF  619,620
15E0:  MOVFF  61B,621
15E4:  MOVFF  61C,622
15E8:  MOVLB  0
15EA:  RCALL  1592
15EC:  MOVLB  6
15EE:  INCF   x1D,F
15F0:  BTFSC  FD8.2
15F2:  INCF   x1E,F
15F4:  BRA    15C8
.................... } 
15F6:  MOVLB  0
15F8:  RETLW  00
....................  
.................... void OLED_FillScreen(boolean color = TRUE) { 
....................   OLED_FillRect(0, 0, OLED_LCDWIDTH, OLED_LCDHEIGHT, color); 
.................... } 
....................  
.................... void OLED_DrawCircle(int16_t x0, int16_t y0, int16_t r) 
.................... { 
....................   int16_t f = 1 - r; 
....................   int16_t ddF_x = 1; 
....................   int16_t ddF_y = -2 * r; 
....................   int16_t x = 0; 
....................   int16_t y = r; 
....................  
....................   OLED_DrawPixel(x0  , y0 + r); 
....................   OLED_DrawPixel(x0  , y0 - r); 
....................   OLED_DrawPixel(x0 + r, y0); 
....................   OLED_DrawPixel(x0 - r, y0); 
....................  
....................   while (x < y) { 
....................     if (f >= 0) { 
....................       y--; 
....................       ddF_y += 2; 
....................       f += ddF_y; 
....................     } 
....................     x++; 
....................     ddF_x += 2; 
....................     f += ddF_x; 
....................  
....................     OLED_DrawPixel(x0 + x, y0 + y); 
....................     OLED_DrawPixel(x0 - x, y0 + y); 
....................     OLED_DrawPixel(x0 + x, y0 - y); 
....................     OLED_DrawPixel(x0 - x, y0 - y); 
....................     OLED_DrawPixel(x0 + y, y0 + x); 
....................     OLED_DrawPixel(x0 - y, y0 + x); 
....................     OLED_DrawPixel(x0 + y, y0 - x); 
....................     OLED_DrawPixel(x0 - y, y0 - x); 
....................   } 
....................  
.................... } 
....................  
.................... void OLED_DrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername) 
.................... { 
....................   int16_t f     = 1 - r; 
....................   int16_t ddF_x = 1; 
....................   int16_t ddF_y = -2 * r; 
....................   int16_t x     = 0; 
....................   int16_t y     = r; 
....................  
....................   while (x < y) { 
....................     if (f >= 0) { 
....................       y--; 
....................       ddF_y += 2; 
....................       f     += ddF_y; 
....................     } 
....................     x++; 
....................     ddF_x += 2; 
....................     f     += ddF_x; 
....................     if (cornername & 0x4) { 
....................       OLED_DrawPixel(x0 + x, y0 + y); 
....................       OLED_DrawPixel(x0 + y, y0 + x); 
....................     } 
....................     if (cornername & 0x2) { 
....................       OLED_DrawPixel(x0 + x, y0 - y); 
....................       OLED_DrawPixel(x0 + y, y0 - x); 
....................     } 
....................     if (cornername & 0x8) { 
....................       OLED_DrawPixel(x0 - y, y0 + x); 
....................       OLED_DrawPixel(x0 - x, y0 + y); 
....................     } 
....................     if (cornername & 0x1) { 
....................       OLED_DrawPixel(x0 - y, y0 - x); 
....................       OLED_DrawPixel(x0 - x, y0 - y); 
....................     } 
....................   } 
....................  
.................... } 
....................  
.................... void OLED_FillCircle(int16_t x0, int16_t y0, int16_t r, boolean color = TRUE) 
.................... { 
....................   OLED_DrawFastVLine(x0, y0 - r, 2 * r + 1, color); 
....................   OLED_FillCircleHelper(x0, y0, r, 3, 0, color); 
.................... } 
....................  
.................... // Used to do circles and roundrects 
.................... void OLED_FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, boolean color = TRUE) { 
....................   int16_t f     = 1 - r; 
....................   int16_t ddF_x = 1; 
....................   int16_t ddF_y = -2 * r; 
....................   int16_t x     = 0; 
....................   int16_t y     = r; 
....................  
....................   while (x < y) { 
....................     if (f >= 0) { 
....................       y--; 
....................       ddF_y += 2; 
....................       f     += ddF_y; 
....................     } 
....................     x++; 
....................     ddF_x += 2; 
....................     f     += ddF_x; 
....................  
....................     if (cornername & 0x01) { 
....................       OLED_DrawFastVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color); 
....................       OLED_DrawFastVLine(x0 + y, y0 - x, 2 * x + 1 + delta, color); 
....................     } 
....................     if (cornername & 0x02) { 
....................       OLED_DrawFastVLine(x0 - x, y0 - y, 2 * y + 1 + delta, color); 
....................       OLED_DrawFastVLine(x0 - y, y0 - x, 2 * x + 1 + delta, color); 
....................     } 
....................   } 
.................... } 
....................  
.................... // Draw a rectangle 
.................... void OLED_DrawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h) 
.................... { 
....................   OLED_DrawFastHLine(x, y, w); 
*
1E16:  MOVFF  60A,60F
1E1A:  MOVFF  60B,610
1E1E:  MOVFF  60C,611
1E22:  MOVLW  01
1E24:  MOVLB  6
1E26:  MOVWF  x12
1E28:  MOVLB  0
1E2A:  RCALL  1DEA
....................   OLED_DrawFastHLine(x, y + h - 1, w); 
1E2C:  MOVLB  6
1E2E:  MOVF   x0D,W
1E30:  ADDWF  x0B,W
1E32:  ADDLW  FF
1E34:  MOVWF  x0E
1E36:  MOVFF  60A,60F
1E3A:  MOVWF  x10
1E3C:  MOVFF  60C,611
1E40:  MOVLW  01
1E42:  MOVWF  x12
1E44:  MOVLB  0
1E46:  RCALL  1DEA
....................   OLED_DrawFastVLine(x, y, h); 
1E48:  MOVFF  60A,61F
1E4C:  MOVFF  60B,620
1E50:  MOVFF  60D,621
1E54:  MOVLW  01
1E56:  MOVLB  6
1E58:  MOVWF  x22
1E5A:  MOVLB  0
1E5C:  CALL   1592
....................   OLED_DrawFastVLine(x + w - 1, y, h); 
1E60:  MOVLB  6
1E62:  MOVF   x0C,W
1E64:  ADDWF  x0A,W
1E66:  ADDLW  FF
1E68:  MOVWF  x0E
1E6A:  MOVWF  x1F
1E6C:  MOVFF  60B,620
1E70:  MOVFF  60D,621
1E74:  MOVLW  01
1E76:  MOVWF  x22
1E78:  MOVLB  0
1E7A:  CALL   1592
.................... } 
1E7E:  RETLW  00
....................  
.................... // Draw a rounded rectangle 
.................... void OLED_DrawRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r) 
.................... { 
....................   // smarter version 
....................   OLED_DrawFastHLine(x + r, y, w - 2 * r); // Top 
....................   OLED_DrawFastHLine(x + r, y + h - 1, w - 2 * r); // Bottom 
....................   OLED_DrawFastVLine(x, y + r, h - 2 * r); // Left 
....................   OLED_DrawFastVLine(x + w - 1, y + r, h - 2 * r); // Right 
....................   // draw four corners 
....................   OLED_DrawCircleHelper(x + r, y + r, r, 1); 
....................   OLED_DrawCircleHelper(x + w - r - 1, y + r, r, 2); 
....................   OLED_DrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4); 
....................   OLED_DrawCircleHelper(x + r, y + h - r - 1, r, 8); 
.................... } 
....................  
.................... // Fill a rounded rectangle 
.................... void OLED_FillRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r, boolean color = TRUE) 
.................... { 
....................   // smarter version 
....................   OLED_FillRect(x + r, y, w - 2 * r, h, color); 
....................   // draw four corners 
....................   OLED_FillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color); 
....................   OLED_FillCircleHelper(x + r        , y + r, r, 2, h - 2 * r - 1, color); 
.................... } 
....................  
.................... // Draw a triangle 
.................... void OLED_DrawTriangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) 
.................... { 
....................   OLED_DrawLine(x0, y0, x1, y1); 
....................   OLED_DrawLine(x1, y1, x2, y2); 
....................   OLED_DrawLine(x2, y2, x0, y0); 
.................... } 
....................  
.................... // Fill a triangle 
.................... void OLED_FillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, boolean color = TRUE) 
.................... { 
....................   int16_t a, b, y, last; 
....................   // Sort coordinates by Y order (y2 >= y1 >= y0) 
....................   if (y0 > y1) { 
....................     OLED_swap(y0, y1); OLED_swap(x0, x1); 
....................   } 
....................   if (y1 > y2) { 
....................     OLED_swap(y2, y1); OLED_swap(x2, x1); 
....................   } 
....................   if (y0 > y1) { 
....................     OLED_swap(y0, y1); OLED_swap(x0, x1); 
....................   } 
....................  
....................   if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing 
....................     a = b = x0; 
....................     if(x1 < a)      a = x1; 
....................     else if(x1 > b) b = x1; 
....................     if(x2 < a)      a = x2; 
....................     else if(x2 > b) b = x2; 
....................     OLED_DrawFastHLine(a, y0, b - a + 1, color); 
....................     return; 
....................   } 
....................  
....................   int16_t 
....................   dx01 = x1 - x0, 
....................   dy01 = y1 - y0, 
....................   dx02 = x2 - x0, 
....................   dy02 = y2 - y0, 
....................   dx12 = x2 - x1, 
....................   dy12 = y2 - y1; 
....................   int32_t  sa   = 0, sb   = 0; 
....................  
....................   // For upper part of triangle, find scanline crossings for segments 
....................   // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1 
....................   // is included here (and second loop will be skipped, avoiding a /0 
....................   // error there), otherwise scanline y1 is skipped here and handled 
....................   // in the second loop...which also avoids a /0 error here if y0=y1 
....................   // (flat-topped triangle). 
....................   if(y1 == y2) last = y1;   // Include y1 scanline 
....................   else         last = y1 - 1; // Skip it 
....................  
....................   for(y = y0; y <= last; y++) { 
....................     a   = x0 + sa / dy01; 
....................     b   = x0 + sb / dy02; 
....................     sa += dx01; 
....................     sb += dx02; 
....................     /* longhand: 
....................     a = x0 + (x1 - x0) * (y - y0) / (y1 - y0); 
....................     b = x0 + (x2 - x0) * (y - y0) / (y2 - y0); 
....................     */ 
....................     if(a > b) OLED_swap(a, b); 
....................     OLED_DrawFastHLine(a, y, b - a + 1, color); 
....................   } 
....................  
....................   // For lower part of triangle, find scanline crossings for segments 
....................   // 0-2 and 1-2.  This loop is skipped if y1=y2. 
....................   sa = dx12 * (y - y1); 
....................   sb = dx02 * (y - y0); 
....................   for(; y <= y2; y++) { 
....................     a   = x1 + sa / dy12; 
....................     b   = x0 + sb / dy02; 
....................     sa += dx12; 
....................     sb += dx02; 
....................     /* longhand: 
....................     a = x1 + (x2 - x1) * (y - y1) / (y2 - y1); 
....................     b = x0 + (x2 - x0) * (y - y0) / (y2 - y0); 
....................     */ 
....................     if(a > b) OLED_swap(a, b); 
....................     OLED_DrawFastHLine(a, y, b - a + 1, color); 
....................   } 
.................... } 
....................  
.................... // invert the display 
.................... void OLED_InvertDisplay(boolean i) 
.................... { 
....................   if (i) 
*
2034:  MOVLB  6
2036:  MOVF   x0A,F
2038:  BZ    2048
....................     OLED_command(OLED_INVERTDISPLAY_); 
203A:  MOVLW  A7
203C:  MOVWF  x1B
203E:  MOVLB  0
2040:  CALL   0F44
....................   else 
2044:  BRA    2052
2046:  MOVLB  6
....................     OLED_command(OLED_NORMALDISPLAY); 
2048:  MOVLW  A6
204A:  MOVWF  x1B
204C:  MOVLB  0
204E:  CALL   0F44
.................... } 
2052:  RETLW  00
....................  
.................... void OLED_SetTextWrap(boolean w) 
.................... { 
....................   wrap = w; 
.................... } 
....................  
.................... void OLED_DrawChar(uint8_t x, uint8_t y, uint8_t c, uint8_t size = 1) 
.................... { 
....................   OLED_GotoXY(x, y); 
....................   OLED_TextSize(size); 
....................   OLED_Print(c); 
.................... } 
....................  
.................... void OLED_DrawText(uint8_t x, uint8_t y, char *_text, uint8_t size = 1) 
.................... { 
....................   OLED_GotoXY(x, y); 
*
17A8:  MOVFF  60A,60F
17AC:  MOVFF  60B,610
17B0:  BRA    1276
....................   OLED_TextSize(size); 
17B2:  MOVFF  60E,60F
17B6:  BRA    1294
....................   while(*_text != '\0') 
....................     OLED_Print(*_text++); 
17B8:  MOVFF  60D,03
17BC:  MOVLB  6
17BE:  MOVFF  60C,FE9
17C2:  MOVFF  60D,FEA
17C6:  MOVF   FEF,F
17C8:  BZ    17EE
17CA:  MOVFF  60D,03
17CE:  MOVF   x0C,W
17D0:  INCF   x0C,F
17D2:  BTFSC  FD8.2
17D4:  INCF   x0D,F
17D6:  MOVWF  FE9
17D8:  MOVFF  03,FEA
17DC:  MOVFF  FEF,60F
17E0:  MOVFF  60F,610
17E4:  MOVLB  0
17E6:  BRA    15FA
17E8:  MOVLB  0
17EA:  BRA    17B8
17EC:  MOVLB  6
.................... } 
17EE:  MOVLB  0
17F0:  RETLW  00
....................  
.................... // move cursor to position (x, y) 
.................... void OLED_GotoXY(uint8_t x, uint8_t y) 
.................... { 
....................   if((x >= OLED_LCDWIDTH) || (y >= OLED_LCDHEIGHT)) 
*
1276:  MOVLB  6
1278:  MOVF   x0F,W
127A:  SUBLW  7F
127C:  BNC   1284
127E:  MOVF   x10,W
1280:  SUBLW  3F
1282:  BC    1286
....................     return; 
1284:  BRA    128E
....................   x_pos = x; 
1286:  MOVFF  60F,19
....................   y_pos = y; 
128A:  MOVFF  610,1A
.................... } 
128E:  MOVLB  0
1290:  GOTO   17B2 (RETURN)
....................  
.................... // set text size 
.................... void OLED_TextSize(uint8_t t_size) 
.................... { 
....................   if(t_size < 1) 
1294:  MOVLB  6
1296:  MOVF   x0F,F
1298:  BNZ   129E
....................     t_size = 1; 
129A:  MOVLW  01
129C:  MOVWF  x0F
....................   text_size = t_size; 
129E:  MOVFF  60F,1B
.................... } 
12A2:  MOVLB  0
12A4:  GOTO   17B8 (RETURN)
....................  
.................... /* print single char 
....................     \a  Set cursor position to upper left (0, 0) 
....................     \b  Move back one position 
....................     \n  Go to start of current line 
....................     \r  Go to line below 
.................... */ 
.................... void OLED_Print(uint8_t c) 
.................... { 
....................   boolean _color; 
....................   uint8_t i, j, line; 
....................    
....................   if (c == ' ' && x_pos == 0 && wrap) 
*
15FA:  MOVLB  6
15FC:  MOVF   x10,W
15FE:  SUBLW  20
1600:  BNZ   160C
1602:  MOVF   19,F
1604:  BNZ   160C
1606:  BTFSS  1C.0
1608:  BRA    160C
....................     return; 
160A:  BRA    17A2
....................   if(c == '\a') { 
160C:  MOVF   x10,W
160E:  SUBLW  07
1610:  BNZ   161A
....................     x_pos = y_pos = 0; 
1612:  CLRF   1A
1614:  MOVFF  1A,19
....................     return; 
1618:  BRA    17A2
....................   } 
....................   if( (c == '\b') && (x_pos >= text_size * 6) ) { 
161A:  MOVF   x10,W
161C:  SUBLW  08
161E:  BNZ   1634
1620:  MOVF   1B,W
1622:  MULLW  06
1624:  MOVF   FF3,W
1626:  SUBWF  19,W
1628:  BNC   1634
....................     x_pos -= text_size * 6; 
162A:  MOVF   1B,W
162C:  MULLW  06
162E:  MOVF   FF3,W
1630:  SUBWF  19,F
....................     return; 
1632:  BRA    17A2
....................   } 
....................   if(c == '\r') { 
1634:  MOVF   x10,W
1636:  SUBLW  0D
1638:  BNZ   163E
....................     x_pos = 0; 
163A:  CLRF   19
....................     return; 
163C:  BRA    17A2
....................   } 
....................   if(c == '\n') { 
163E:  MOVF   x10,W
1640:  SUBLW  0A
1642:  BNZ   165C
....................     y_pos += text_size * 8; 
1644:  MOVF   1B,W
1646:  MULLW  08
1648:  MOVF   FF3,W
164A:  ADDWF  1A,F
....................     if((y_pos + text_size * 7) > OLED_LCDHEIGHT) 
164C:  MOVF   1B,W
164E:  MULLW  07
1650:  MOVF   FF3,W
1652:  ADDWF  1A,W
1654:  SUBLW  40
1656:  BC    165A
....................       y_pos = 0; 
1658:  CLRF   1A
....................     return; 
165A:  BRA    17A2
....................   } 
....................  
....................   if((c < ' ') || (c > '~')) 
165C:  MOVF   x10,W
165E:  SUBLW  1F
1660:  BC    1668
1662:  MOVF   x10,W
1664:  SUBLW  7E
1666:  BC    166C
....................     c = '?'; 
1668:  MOVLW  3F
166A:  MOVWF  x10
....................    
....................   for(i = 0; i < 5; i++ ) { 
166C:  CLRF   x12
166E:  MOVF   x12,W
1670:  SUBLW  04
1672:  BNC   1736
....................     if(c < 'S') 
1674:  MOVF   x10,W
1676:  SUBLW  52
1678:  BNC   169C
....................       line = font[(c - ' ') * 5 + i]; 
167A:  MOVLW  20
167C:  SUBWF  x10,W
167E:  MULLW  05
1680:  MOVF   FF3,W
1682:  ADDWF  x12,W
1684:  CLRF   03
1686:  MOVFF  FF2,615
168A:  BCF    FF2.7
168C:  MOVLB  0
168E:  CALL   0096
1692:  MOVLB  6
1694:  BTFSC  x15.7
1696:  BSF    FF2.7
1698:  MOVWF  x14
....................     else 
169A:  BRA    16BC
....................       line = font2[(c - 'S') * 5 + i]; 
169C:  MOVLW  53
169E:  SUBWF  x10,W
16A0:  MULLW  05
16A2:  MOVF   FF3,W
16A4:  ADDWF  x12,W
16A6:  CLRF   03
16A8:  MOVFF  FF2,615
16AC:  BCF    FF2.7
16AE:  MOVLB  0
16B0:  CALL   01B0
16B4:  MOVLB  6
16B6:  BTFSC  x15.7
16B8:  BSF    FF2.7
16BA:  MOVWF  x14
....................      
....................     for(j = 0; j < 7; j++, line >>= 1) { 
16BC:  CLRF   x13
16BE:  MOVF   x13,W
16C0:  SUBLW  06
16C2:  BNC   1732
....................       if(line & 0x01) 
16C4:  BTFSS  x14.0
16C6:  BRA    16CC
....................         _color = TRUE; 
16C8:  BSF    x11.0
....................       else 
16CA:  BRA    16CE
....................         _color = FALSE; 
16CC:  BCF    x11.0
....................       if(text_size == 1) OLED_DrawPixel(x_pos + i, y_pos + j, _color); 
16CE:  DECFSZ 1B,W
16D0:  BRA    16F6
16D2:  MOVF   x12,W
16D4:  ADDWF  19,W
16D6:  MOVWF  x15
16D8:  MOVF   x13,W
16DA:  ADDWF  1A,W
16DC:  MOVWF  x16
16DE:  MOVLW  00
16E0:  BTFSC  x11.0
16E2:  MOVLW  01
16E4:  MOVFF  615,63B
16E8:  MOVFF  616,63C
16EC:  MOVWF  x3D
16EE:  MOVLB  0
16F0:  RCALL  12A8
....................       else               OLED_FillRect(x_pos + (i * text_size), y_pos + (j * text_size), text_size, text_size, _color); 
16F2:  BRA    1726
16F4:  MOVLB  6
16F6:  MOVF   x12,W
16F8:  MULWF  1B
16FA:  MOVF   FF3,W
16FC:  ADDWF  19,W
16FE:  MOVWF  x15
1700:  MOVF   x13,W
1702:  MULWF  1B
1704:  MOVF   FF3,W
1706:  ADDWF  1A,W
1708:  MOVWF  x16
170A:  MOVLW  00
170C:  BTFSC  x11.0
170E:  MOVLW  01
1710:  MOVFF  615,618
1714:  MOVFF  616,619
1718:  MOVFF  1B,61A
171C:  MOVFF  1B,61B
1720:  MOVWF  x1C
1722:  MOVLB  0
1724:  RCALL  15BC
....................     } 
1726:  MOVLB  6
1728:  MOVF   x13,W
172A:  INCF   x13,F
172C:  BCF    FD8.0
172E:  RRCF   x14,F
1730:  BRA    16BE
....................   } 
1732:  INCF   x12,F
1734:  BRA    166E
....................  
....................   OLED_FillRect(x_pos + (5 * text_size), y_pos, text_size, 7 * text_size, FALSE); 
1736:  MOVF   1B,W
1738:  MULLW  05
173A:  MOVF   FF3,W
173C:  ADDWF  19,W
173E:  MOVWF  x15
1740:  MOVF   1B,W
1742:  MULLW  07
1744:  MOVFF  FF3,616
1748:  MOVFF  615,618
174C:  MOVFF  1A,619
1750:  MOVFF  1B,61A
1754:  MOVFF  616,61B
1758:  CLRF   x1C
175A:  MOVLB  0
175C:  RCALL  15BC
....................    
....................   x_pos += text_size * 6; 
175E:  MOVF   1B,W
1760:  MULLW  06
1762:  MOVF   FF3,W
1764:  ADDWF  19,F
....................  
....................   if( x_pos > (OLED_LCDWIDTH + text_size * 6) ) 
1766:  MOVF   1B,W
1768:  MULLW  06
176A:  MOVF   FF3,W
176C:  ADDLW  80
176E:  SUBWF  19,W
1770:  BZ    1778
1772:  BNC   1778
....................     x_pos = OLED_LCDWIDTH; 
1774:  MOVLW  80
1776:  MOVWF  19
....................  
....................   if (wrap && (x_pos + (text_size * 5)) > OLED_LCDWIDTH) 
1778:  BTFSS  1C.0
177A:  BRA    17A0
177C:  MOVF   1B,W
177E:  MULLW  05
1780:  MOVF   FF3,W
1782:  ADDWF  19,W
1784:  SUBLW  80
1786:  BC    17A0
....................   { 
....................     x_pos = 0; 
1788:  CLRF   19
....................     y_pos += text_size * 8; 
178A:  MOVF   1B,W
178C:  MULLW  08
178E:  MOVF   FF3,W
1790:  ADDWF  1A,F
....................     if((y_pos + text_size * 7) > OLED_LCDHEIGHT) 
1792:  MOVF   1B,W
1794:  MULLW  07
1796:  MOVF   FF3,W
1798:  ADDWF  1A,W
179A:  SUBLW  40
179C:  BC    17A0
....................       y_pos = 0; 
179E:  CLRF   1A
17A0:  MOVLB  6
....................   } 
.................... } 
17A2:  MOVLB  0
17A4:  GOTO   17B8 (RETURN)
....................  
.................... // print custom char (dimension: 7x5 pixel) 
.................... void OLED_PutCustomC(rom uint8_t *c) 
.................... { 
....................   boolean _color; 
....................   uint8_t i, j, line; 
....................    
....................   for(i = 0; i < 5; i++ ) { 
....................     line = c[i]; 
....................  
....................     for(j = 0; j < 7; j++, line >>= 1) { 
....................       if(line & 0x01) 
....................         _color = TRUE; 
....................       else 
....................         _color = FALSE; 
....................       if(text_size == 1) OLED_DrawPixel(x_pos + i, y_pos + j, _color); 
....................       else               OLED_FillRect(x_pos + (i * text_size), y_pos + (j * text_size), text_size, text_size, _color); 
....................     } 
....................   } 
....................  
....................   OLED_FillRect(x_pos + (5 * text_size), y_pos, text_size, 7 * text_size, FALSE); 
....................  
....................   x_pos += (text_size * 6); 
....................  
....................   if( x_pos > (OLED_LCDWIDTH + text_size * 6) ) 
....................     x_pos = OLED_LCDWIDTH; 
....................  
....................   if (wrap && (x_pos + (text_size * 5)) > OLED_LCDWIDTH) 
....................   { 
....................     x_pos = 0; 
....................     y_pos += text_size * 8; 
....................     if((y_pos + text_size * 7) > OLED_LCDHEIGHT) 
....................       y_pos = 0; 
....................   } 
.................... } 
....................  
.................... void OLED_ROMBMP(uint8_t x, uint8_t y, rom uint8_t *bitmap, uint8_t w, uint8_t h) 
.................... { 
....................   uint16_t i; 
....................   for( i = 0; i < h/8; i++ ) 
....................   { 
....................     uint16_t j; 
....................     for( j = 0; j < (uint16_t)w * 8; j++ ) 
....................     {  
....................       uint8_t var; 
....................       var = bitmap[j/8 + i*w]; 
....................       if(bit_test(var, j % 8) == 1 ) 
....................         OLED_DrawPixel(x + j/8, y + i*8 + (j % 8)); 
....................       else 
....................         OLED_DrawPixel(x + j/8, y + i*8 + (j % 8), 0);   
....................     } 
....................   } 
.................... } 
.................... void printBitmap(uint8_t *bitmap, uint8_t width, uint8_t height) { 
....................     // Inicialize o display SH1106 (defina resolução, orientação, modo de comunicação, etc.) 
....................     OLED_Begin(); 
....................     OLED_ClearDisplay(); 
....................     // Itera sobre cada linha do bitmap 
....................     uint8_t y; 
....................     for (y = 0; y < height; y++) { 
....................         // Itera sobre cada coluna do bitmap 
....................         uint8_t x; 
....................         for (x = 0; x < width; x++) { 
....................             // Calcule o índice do byte no bitmap 
....................             uint16_t byteIndex = (y / 8) * width + x; 
....................  
....................             // Calcule o deslocamento dentro do byte 
....................             uint8_t bitOffset = y % 8; 
....................  
....................             // Verifique se o bit correspondente está definido 
....................             if (bitmap[byteIndex] & (1 << bitOffset)) { 
....................                 // Desenhe o pixel no display SH1106 
....................                 OLED_DrawPixel(x, y); 
....................             } 
....................         } 
....................     } 
....................  
....................     // Atualize o display (se necessário) 
....................     OLED_Display(); 
.................... } 
....................  
.................... //#include <OLED_I2C.c> 
.................... //#include <18F4550.h> 
.................... //#include <memory.c> 
....................  
.................... #define SH1106_128_64 //DEFINE O MODELO DO DISPLAY 
.................... //#define SSD1306_128_64 
....................  
.................... #define LED_ON                   0 
.................... #define LED_OFF                  1 
.................... #define HR_START                 0x30 
.................... #define MIN_START                0x34 
....................  
.................... #define LED     PIN_C0   // OUT = 0 
.................... #define bot2    PIN_D1   //OUT 
.................... #define bot1    PIN_D3   //OUT     
.................... #define bot3    PIN_D2   //OUT 
.................... #define bot4    PIN_D0   //OUT 
....................  
.................... /*------------VARIAVEIS----------*/ 
.................... unsigned int8 Logo[] = { 
....................    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
....................    0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
....................    0xff, 0x27, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x67, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
....................    0xfe, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  
....................    0xfc, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xf9, 0xcc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8,  
....................    0xf9, 0xcc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xf3, 0xde, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfb,  
....................    0xf3, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe4, 0xfc, 0x3f, 0x3b, 0x21, 0x8c, 0x73, 0x27,  
....................    0xe4, 0xdc, 0xbf, 0x3b, 0x21, 0x0c, 0x33, 0x27, 0xcc, 0x99, 0x9f, 0x3b, 0x33, 0x25, 0x33, 0x07,  
....................    0xd9, 0x9b, 0xcf, 0x1b, 0x33, 0x65, 0x23, 0x07, 0x99, 0x93, 0xcf, 0x1b, 0x33, 0x64, 0x61, 0x07,  
....................    0xbb, 0x36, 0xe6, 0x1b, 0x33, 0x64, 0x21, 0x07, 0x39, 0x64, 0x6e, 0x5b, 0x33, 0x65, 0x21, 0x07,  
....................    0x9c, 0x4c, 0xce, 0x1b, 0x73, 0x25, 0x21, 0x07, 0x9c, 0xcd, 0x9e, 0x08, 0x73, 0x0c, 0x21, 0x27,  
....................    0xcc, 0xc9, 0x9e, 0xcc, 0x73, 0x8c, 0x4c, 0x27, 0xe9, 0xdb, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff,  
....................    0xe0, 0xf2, 0x3f, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xf0, 0xe6, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,  
....................    0xf2, 0x66, 0x7f, 0xff, 0xff, 0xff, 0x85, 0x0f, 0xfe, 0x4f, 0xff, 0xff, 0xff, 0xff, 0x94, 0x4f,  
....................    0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x8a, 0x0f, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf,  
....................    0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff 
.................... }; 
.................... /*---STRINGS---*/ 
....................    char horas[]   = "  :  "; 
....................    char data[]    = "  /  /20"; 
....................    char hori[]    = "H:00000:00 "; 
....................    char tmr[]     = "T:00000:00 ";  
....................    char seg1[]    = "SEG", 
....................         ter[]     = "TER", 
....................         qua[]     = "QUA",  
....................         qui[]     = "QUI",  
....................         sex[]     = "SEX",  
....................         sab[]     = "SAB", 
....................         dom[]     = "DOM";     
....................     
.................... int1 init = 0, readm = 0, flag1, flag2, flag3, flag4, flag28, flag30, flagi=0, flags=0, flagr=0; 
.................... signed int8 i, position_count, seg, min, hr, s_dia, dia, mes, ano; 
.................... int16 debouncing, register_cont, register_cont1, aux, aux1, p2trava, p2menu =0; 
....................  
.................... struct flag{ 
....................     int8 flagaux; 
....................     int8 flagtrava; 
....................     int8 flagmenu; 
.................... }; 
.................... struct flag menu1, menu2, menu3, menu4; 
....................  
....................  
.................... struct aux{ 
....................    int8 hor; 
....................    unsigned int16 hmin; 
....................    unsigned int32 hhr; 
....................    unsigned int16 tmin; 
....................    unsigned int16 thr; 
.................... }; 
.................... struct aux horimetro, mem; 
....................     
.................... void inicializar_flags(void){ 
....................    menu1.flagmenu =  0x00; 
*
0BE6:  MOVLB  5
0BE8:  CLRF   x7C
....................    menu1.flagtrava = 0x00; 
0BEA:  CLRF   x7B
....................    menu2.flagmenu =  0x00; 
0BEC:  CLRF   x7F
....................    menu2.flagtrava = 0x00; 
0BEE:  CLRF   x7E
....................    menu3.flagmenu =  0x00; 
0BF0:  CLRF   x82
....................    menu3.flagtrava = 0x00; 
0BF2:  CLRF   x81
....................    menu4.flagmenu =  0x00; 
0BF4:  CLRF   x85
....................    menu4.flagtrava = 0x00; 
0BF6:  CLRF   x84
....................    menu4.flagaux =   0x00; 
0BF8:  CLRF   x83
....................    horimetro.hmin =  0x00; 
0BFA:  CLRF   x88
0BFC:  CLRF   x87
....................    horimetro.hhr  =  0x00; 
0BFE:  CLRF   x8C
0C00:  CLRF   x8B
0C02:  CLRF   x8A
0C04:  CLRF   x89
....................    horimetro.tmin =  0x00; 
0C06:  CLRF   x8E
0C08:  CLRF   x8D
....................    horimetro.thr  =  0x00; 
0C0A:  CLRF   x90
0C0C:  CLRF   x8F
....................    position_count = 0; 
0C0E:  CLRF   x64
....................    p2trava = 0; 
0C10:  CLRF   x77
0C12:  CLRF   x76
....................    p2menu = 0; 
0C14:  CLRF   x79
0C16:  CLRF   x78
....................    init = 0x00; 
0C18:  BCF    1C.1
....................    flag1 = 0x00; 
0C1A:  BCF    1C.3
....................    flag2 = 0x00; 
0C1C:  BCF    1C.4
....................    flag3 = 0x00; 
0C1E:  BCF    1C.5
....................    flag4 = 0x00; 
0C20:  BCF    1C.6
....................    flag28 = 0x00; 
0C22:  BCF    1C.7
....................    flag30 = 0x00; 
0C24:  BCF    x62.0
.................... } 
0C26:  MOVLB  0
0C28:  GOTO   39FE (RETURN)
....................  
.................... #use delay(clock = 20000000)//20MHz 
*
0344:  MOVLW  06
0346:  MOVWF  FEA
0348:  MOVLW  47
034A:  MOVWF  FE9
034C:  MOVF   FEF,W
034E:  BZ    036A
0350:  MOVLW  06
0352:  MOVWF  01
0354:  CLRF   00
0356:  DECFSZ 00,F
0358:  BRA    0356
035A:  DECFSZ 01,F
035C:  BRA    0354
035E:  MOVLW  7B
0360:  MOVWF  00
0362:  DECFSZ 00,F
0364:  BRA    0362
0366:  DECFSZ FEF,F
0368:  BRA    0350
036A:  RETLW  00
....................  
.................... //#use delay(clock = 8000000)//8MHz 
....................  
.................... /*-----PROTOTIPOS DE FUNC-----*/ 
.................... void display_dia(); 
.................... void DS1307_display(); 
.................... void escreve_ds(signed int8 hr, signed int8 min, signed int8 s_dia, signed int8 dia, signed int8 mes, signed int8 ano); 
.................... void le_DS1307(void); 
.................... void trata_teclas(void); 
.................... void atualiza_menu(void); 
.................... void conv_valor(char buff[],int16 aux); 
.................... void atualiza_disp(void); 
.................... void escrita(void); 
.................... void lemem(void); 
.................... void initdisp(void); 
.................... void inithori(void); 
....................          /*VOID TRATA INTERRUPÇÃO TIMER0*/ 
.................... #INT_TIMER0 
.................... void timer_0(void){ 
....................    register_cont++; 
*
0B96:  MOVLB  5
0B98:  INCF   x6E,F
0B9A:  BTFSC  FD8.2
0B9C:  INCF   x6F,F
....................    if(init == 1)aux++; 
0B9E:  BTFSS  1C.1
0BA0:  BRA    0BA8
0BA2:  INCF   x72,F
0BA4:  BTFSC  FD8.2
0BA6:  INCF   x73,F
....................    if(aux == 1500){ 
0BA8:  MOVF   x72,W
0BAA:  SUBLW  DC
0BAC:  BNZ   0BB4
0BAE:  MOVF   x73,W
0BB0:  SUBLW  05
0BB2:  BNZ   0BB4
....................       //output_bit(LED, LED_ON); 
....................    } 
....................    if(aux == 3500){ 
0BB4:  MOVF   x72,W
0BB6:  SUBLW  AC
0BB8:  BNZ   0BCA
0BBA:  MOVF   x73,W
0BBC:  SUBLW  0D
0BBE:  BNZ   0BCA
....................     //output_bit(LED, LED_OFF); 
....................       aux1++; 
0BC0:  INCF   x74,F
0BC2:  BTFSC  FD8.2
0BC4:  INCF   x75,F
....................       aux = 0; 
0BC6:  CLRF   x73
0BC8:  CLRF   x72
....................    } 
....................    if(register_cont == 30){ 
0BCA:  MOVF   x6E,W
0BCC:  SUBLW  1E
0BCE:  BNZ   0BDE
0BD0:  MOVF   x6F,F
0BD2:  BNZ   0BDE
....................       trata_teclas(); 
0BD4:  MOVLB  0
0BD6:  BRA    04AE
....................       register_cont = 0; 
0BD8:  MOVLB  5
0BDA:  CLRF   x6F
0BDC:  CLRF   x6E
....................    } 
....................  
.................... } 
....................  
0BDE:  BCF    FF2.2
0BE0:  MOVLB  0
0BE2:  GOTO   0054
.................... void main() 
.................... { 
*
2D2A:  CLRF   FF8
2D2C:  BCF    FD0.7
2D2E:  BSF    07.7
2D30:  CLRF   FEA
2D32:  CLRF   FE9
2D34:  BSF    FB8.3
2D36:  MOVLW  08
2D38:  MOVWF  FAF
2D3A:  MOVLW  02
2D3C:  MOVWF  FB0
2D3E:  MOVLW  A6
2D40:  MOVWF  FAC
2D42:  MOVLW  90
2D44:  MOVWF  FAB
2D46:  BSF    1C.0
2D48:  MOVLW  02
2D4A:  MOVLB  4
2D4C:  MOVWF  x1D
2D4E:  MOVLW  78
2D50:  MOVWF  x1E
2D52:  BCF    1C.1
2D54:  BCF    1C.2
2D56:  MOVLB  5
2D58:  BCF    x62.1
2D5A:  BCF    x62.2
2D5C:  BCF    x62.3
2D5E:  CLRF   x79
2D60:  CLRF   x78
2D62:  MOVF   FC1,W
2D64:  ANDLW  C0
2D66:  IORLW  0F
2D68:  MOVWF  FC1
2D6A:  MOVLW  07
2D6C:  MOVWF  FB4
2D6E:  CLRF   1D
2D70:  CLRF   1E
2D72:  CLRF   1F
2D74:  CLRF   20
2D76:  CLRF   21
2D78:  CLRF   22
2D7A:  CLRF   23
2D7C:  CLRF   24
2D7E:  CLRF   25
2D80:  CLRF   26
2D82:  CLRF   27
2D84:  CLRF   28
2D86:  CLRF   29
2D88:  CLRF   2A
2D8A:  CLRF   2B
2D8C:  CLRF   2C
2D8E:  CLRF   2D
2D90:  CLRF   2E
2D92:  CLRF   2F
2D94:  CLRF   30
2D96:  CLRF   31
2D98:  CLRF   32
2D9A:  CLRF   33
2D9C:  CLRF   34
2D9E:  CLRF   35
2DA0:  CLRF   36
2DA2:  CLRF   37
2DA4:  CLRF   38
2DA6:  CLRF   39
2DA8:  CLRF   3A
2DAA:  CLRF   3B
2DAC:  CLRF   3C
2DAE:  CLRF   3D
2DB0:  CLRF   3E
2DB2:  CLRF   3F
2DB4:  CLRF   40
2DB6:  CLRF   41
2DB8:  CLRF   42
2DBA:  CLRF   43
2DBC:  CLRF   44
2DBE:  CLRF   45
2DC0:  CLRF   46
2DC2:  CLRF   47
2DC4:  CLRF   48
2DC6:  CLRF   49
2DC8:  CLRF   4A
2DCA:  CLRF   4B
2DCC:  CLRF   4C
2DCE:  CLRF   4D
2DD0:  CLRF   4E
2DD2:  CLRF   4F
2DD4:  CLRF   50
2DD6:  CLRF   51
2DD8:  CLRF   52
2DDA:  CLRF   53
2DDC:  CLRF   54
2DDE:  CLRF   55
2DE0:  CLRF   56
2DE2:  CLRF   57
2DE4:  CLRF   58
2DE6:  CLRF   59
2DE8:  CLRF   5A
2DEA:  CLRF   5B
2DEC:  MOVLW  80
2DEE:  MOVWF  5C
2DF0:  MOVWF  5D
2DF2:  MOVWF  5E
2DF4:  CLRF   5F
2DF6:  MOVLB  0
2DF8:  CLRF   x60
2DFA:  CLRF   x61
2DFC:  CLRF   x62
2DFE:  CLRF   x63
2E00:  CLRF   x64
2E02:  CLRF   x65
2E04:  CLRF   x66
2E06:  CLRF   x67
2E08:  CLRF   x68
2E0A:  CLRF   x69
2E0C:  CLRF   x6A
2E0E:  CLRF   x6B
2E10:  CLRF   x6C
2E12:  CLRF   x6D
2E14:  MOVWF  x6E
2E16:  MOVWF  x6F
2E18:  MOVLW  C0
2E1A:  MOVWF  x70
2E1C:  MOVWF  x71
2E1E:  CLRF   x72
2E20:  CLRF   x73
2E22:  CLRF   x74
2E24:  CLRF   x75
2E26:  CLRF   x76
2E28:  CLRF   x77
2E2A:  CLRF   x78
2E2C:  CLRF   x79
2E2E:  CLRF   x7A
2E30:  CLRF   x7B
2E32:  CLRF   x7C
2E34:  CLRF   x7D
2E36:  CLRF   x7E
2E38:  CLRF   x7F
2E3A:  CLRF   x80
2E3C:  CLRF   x81
2E3E:  CLRF   x82
2E40:  CLRF   x83
2E42:  CLRF   x84
2E44:  CLRF   x85
2E46:  CLRF   x86
2E48:  CLRF   x87
2E4A:  CLRF   x88
2E4C:  CLRF   x89
2E4E:  CLRF   x8A
2E50:  CLRF   x8B
2E52:  CLRF   x8C
2E54:  CLRF   x8D
2E56:  CLRF   x8E
2E58:  CLRF   x8F
2E5A:  CLRF   x90
2E5C:  CLRF   x91
2E5E:  CLRF   x92
2E60:  CLRF   x93
2E62:  CLRF   x94
2E64:  CLRF   x95
2E66:  CLRF   x96
2E68:  CLRF   x97
2E6A:  CLRF   x98
2E6C:  CLRF   x99
2E6E:  CLRF   x9A
2E70:  CLRF   x9B
2E72:  CLRF   x9C
2E74:  CLRF   x9D
2E76:  CLRF   x9E
2E78:  CLRF   x9F
2E7A:  CLRF   xA0
2E7C:  CLRF   xA1
2E7E:  CLRF   xA2
2E80:  CLRF   xA3
2E82:  CLRF   xA4
2E84:  CLRF   xA5
2E86:  CLRF   xA6
2E88:  CLRF   xA7
2E8A:  CLRF   xA8
2E8C:  CLRF   xA9
2E8E:  CLRF   xAA
2E90:  CLRF   xAB
2E92:  CLRF   xAC
2E94:  CLRF   xAD
2E96:  CLRF   xAE
2E98:  CLRF   xAF
2E9A:  CLRF   xB0
2E9C:  MOVLW  80
2E9E:  MOVWF  xB1
2EA0:  MOVLW  C0
2EA2:  MOVWF  xB2
2EA4:  MOVLW  E0
2EA6:  MOVWF  xB3
2EA8:  MOVLW  F0
2EAA:  MOVWF  xB4
2EAC:  MOVLW  F8
2EAE:  MOVWF  xB5
2EB0:  MOVLW  FC
2EB2:  MOVWF  xB6
2EB4:  MOVLW  F8
2EB6:  MOVWF  xB7
2EB8:  MOVLW  E0
2EBA:  MOVWF  xB8
2EBC:  CLRF   xB9
2EBE:  CLRF   xBA
2EC0:  CLRF   xBB
2EC2:  CLRF   xBC
2EC4:  CLRF   xBD
2EC6:  CLRF   xBE
2EC8:  CLRF   xBF
2ECA:  CLRF   xC0
2ECC:  CLRF   xC1
2ECE:  CLRF   xC2
2ED0:  CLRF   xC3
2ED2:  CLRF   xC4
2ED4:  CLRF   xC5
2ED6:  CLRF   xC6
2ED8:  CLRF   xC7
2EDA:  CLRF   xC8
2EDC:  CLRF   xC9
2EDE:  MOVLW  80
2EE0:  MOVWF  xCA
2EE2:  MOVWF  xCB
2EE4:  MOVWF  xCC
2EE6:  MOVWF  xCD
2EE8:  MOVWF  xCE
2EEA:  CLRF   xCF
2EEC:  MOVWF  xD0
2EEE:  MOVWF  xD1
2EF0:  CLRF   xD2
2EF2:  CLRF   xD3
2EF4:  CLRF   xD4
2EF6:  CLRF   xD5
2EF8:  MOVWF  xD6
2EFA:  MOVWF  xD7
2EFC:  MOVWF  xD8
2EFE:  MOVWF  xD9
2F00:  MOVWF  xDA
2F02:  CLRF   xDB
2F04:  MOVLW  FF
2F06:  MOVWF  xDC
2F08:  CLRF   xDD
2F0A:  CLRF   xDE
2F0C:  CLRF   xDF
2F0E:  CLRF   xE0
2F10:  CLRF   xE1
2F12:  CLRF   xE2
2F14:  CLRF   xE3
2F16:  CLRF   xE4
2F18:  CLRF   xE5
2F1A:  CLRF   xE6
2F1C:  CLRF   xE7
2F1E:  CLRF   xE8
2F20:  CLRF   xE9
2F22:  CLRF   xEA
2F24:  CLRF   xEB
2F26:  CLRF   xEC
2F28:  CLRF   xED
2F2A:  CLRF   xEE
2F2C:  CLRF   xEF
2F2E:  CLRF   xF0
2F30:  CLRF   xF1
2F32:  CLRF   xF2
2F34:  CLRF   xF3
2F36:  CLRF   xF4
2F38:  CLRF   xF5
2F3A:  CLRF   xF6
2F3C:  CLRF   xF7
2F3E:  CLRF   xF8
2F40:  CLRF   xF9
2F42:  CLRF   xFA
2F44:  CLRF   xFB
2F46:  CLRF   xFC
2F48:  CLRF   xFD
2F4A:  CLRF   xFE
2F4C:  CLRF   xFF
2F4E:  MOVLB  1
2F50:  CLRF   x00
2F52:  CLRF   x01
2F54:  CLRF   x02
2F56:  CLRF   x03
2F58:  CLRF   x04
2F5A:  CLRF   x05
2F5C:  CLRF   x06
2F5E:  CLRF   x07
2F60:  CLRF   x08
2F62:  CLRF   x09
2F64:  CLRF   x0A
2F66:  CLRF   x0B
2F68:  CLRF   x0C
2F6A:  CLRF   x0D
2F6C:  CLRF   x0E
2F6E:  CLRF   x0F
2F70:  CLRF   x10
2F72:  CLRF   x11
2F74:  CLRF   x12
2F76:  CLRF   x13
2F78:  CLRF   x14
2F7A:  CLRF   x15
2F7C:  CLRF   x16
2F7E:  CLRF   x17
2F80:  CLRF   x18
2F82:  CLRF   x19
2F84:  CLRF   x1A
2F86:  CLRF   x1B
2F88:  CLRF   x1C
2F8A:  CLRF   x1D
2F8C:  CLRF   x1E
2F8E:  CLRF   x1F
2F90:  CLRF   x20
2F92:  CLRF   x21
2F94:  CLRF   x22
2F96:  CLRF   x23
2F98:  CLRF   x24
2F9A:  CLRF   x25
2F9C:  CLRF   x26
2F9E:  CLRF   x27
2FA0:  CLRF   x28
2FA2:  CLRF   x29
2FA4:  CLRF   x2A
2FA6:  CLRF   x2B
2FA8:  CLRF   x2C
2FAA:  CLRF   x2D
2FAC:  CLRF   x2E
2FAE:  CLRF   x2F
2FB0:  CLRF   x30
2FB2:  CLRF   x31
2FB4:  CLRF   x32
2FB6:  CLRF   x33
2FB8:  CLRF   x34
2FBA:  CLRF   x35
2FBC:  CLRF   x36
2FBE:  CLRF   x37
2FC0:  CLRF   x38
2FC2:  CLRF   x39
2FC4:  CLRF   x3A
2FC6:  CLRF   x3B
2FC8:  CLRF   x3C
2FCA:  CLRF   x3D
2FCC:  CLRF   x3E
2FCE:  CLRF   x3F
2FD0:  CLRF   x40
2FD2:  CLRF   x41
2FD4:  CLRF   x42
2FD6:  CLRF   x43
2FD8:  CLRF   x44
2FDA:  CLRF   x45
2FDC:  CLRF   x46
2FDE:  CLRF   x47
2FE0:  CLRF   x48
2FE2:  CLRF   x49
2FE4:  CLRF   x4A
2FE6:  CLRF   x4B
2FE8:  CLRF   x4C
2FEA:  CLRF   x4D
2FEC:  CLRF   x4E
2FEE:  CLRF   x4F
2FF0:  CLRF   x50
2FF2:  CLRF   x51
2FF4:  CLRF   x52
2FF6:  CLRF   x53
2FF8:  CLRF   x54
2FFA:  CLRF   x55
2FFC:  CLRF   x56
2FFE:  CLRF   x57
3000:  CLRF   x58
3002:  CLRF   x59
3004:  CLRF   x5A
3006:  CLRF   x5B
3008:  CLRF   x5C
300A:  CLRF   x5D
300C:  CLRF   x5E
300E:  CLRF   x5F
3010:  CLRF   x60
3012:  CLRF   x61
3014:  CLRF   x62
3016:  CLRF   x63
3018:  CLRF   x64
301A:  CLRF   x65
301C:  CLRF   x66
301E:  CLRF   x67
3020:  CLRF   x68
3022:  CLRF   x69
3024:  CLRF   x6A
3026:  CLRF   x6B
3028:  CLRF   x6C
302A:  CLRF   x6D
302C:  CLRF   x6E
302E:  CLRF   x6F
3030:  CLRF   x70
3032:  CLRF   x71
3034:  CLRF   x72
3036:  CLRF   x73
3038:  CLRF   x74
303A:  CLRF   x75
303C:  CLRF   x76
303E:  CLRF   x77
3040:  CLRF   x78
3042:  CLRF   x79
3044:  CLRF   x7A
3046:  CLRF   x7B
3048:  CLRF   x7C
304A:  CLRF   x7D
304C:  CLRF   x7E
304E:  CLRF   x7F
3050:  CLRF   x80
3052:  CLRF   x81
3054:  CLRF   x82
3056:  CLRF   x83
3058:  CLRF   x84
305A:  CLRF   x85
305C:  CLRF   x86
305E:  CLRF   x87
3060:  CLRF   x88
3062:  CLRF   x89
3064:  CLRF   x8A
3066:  CLRF   x8B
3068:  CLRF   x8C
306A:  CLRF   x8D
306C:  CLRF   x8E
306E:  CLRF   x8F
3070:  CLRF   x90
3072:  CLRF   x91
3074:  CLRF   x92
3076:  CLRF   x93
3078:  CLRF   x94
307A:  CLRF   x95
307C:  CLRF   x96
307E:  CLRF   x97
3080:  CLRF   x98
3082:  CLRF   x99
3084:  CLRF   x9A
3086:  CLRF   x9B
3088:  CLRF   x9C
308A:  CLRF   x9D
308C:  CLRF   x9E
308E:  CLRF   x9F
3090:  CLRF   xA0
3092:  CLRF   xA1
3094:  CLRF   xA2
3096:  CLRF   xA3
3098:  CLRF   xA4
309A:  CLRF   xA5
309C:  CLRF   xA6
309E:  CLRF   xA7
30A0:  CLRF   xA8
30A2:  CLRF   xA9
30A4:  CLRF   xAA
30A6:  CLRF   xAB
30A8:  CLRF   xAC
30AA:  CLRF   xAD
30AC:  CLRF   xAE
30AE:  CLRF   xAF
30B0:  CLRF   xB0
30B2:  CLRF   xB1
30B4:  CLRF   xB2
30B6:  CLRF   xB3
30B8:  CLRF   xB4
30BA:  CLRF   xB5
30BC:  CLRF   xB6
30BE:  CLRF   xB7
30C0:  CLRF   xB8
30C2:  CLRF   xB9
30C4:  CLRF   xBA
30C6:  CLRF   xBB
30C8:  CLRF   xBC
30CA:  CLRF   xBD
30CC:  CLRF   xBE
30CE:  CLRF   xBF
30D0:  CLRF   xC0
30D2:  CLRF   xC1
30D4:  CLRF   xC2
30D6:  CLRF   xC3
30D8:  CLRF   xC4
30DA:  CLRF   xC5
30DC:  CLRF   xC6
30DE:  CLRF   xC7
30E0:  CLRF   xC8
30E2:  CLRF   xC9
30E4:  CLRF   xCA
30E6:  CLRF   xCB
30E8:  CLRF   xCC
30EA:  CLRF   xCD
30EC:  CLRF   xCE
30EE:  CLRF   xCF
30F0:  CLRF   xD0
30F2:  CLRF   xD1
30F4:  CLRF   xD2
30F6:  CLRF   xD3
30F8:  CLRF   xD4
30FA:  CLRF   xD5
30FC:  CLRF   xD6
30FE:  CLRF   xD7
3100:  CLRF   xD8
3102:  CLRF   xD9
3104:  CLRF   xDA
3106:  CLRF   xDB
3108:  CLRF   xDC
310A:  CLRF   xDD
310C:  CLRF   xDE
310E:  CLRF   xDF
3110:  CLRF   xE0
3112:  CLRF   xE1
3114:  CLRF   xE2
3116:  CLRF   xE3
3118:  CLRF   xE4
311A:  CLRF   xE5
311C:  CLRF   xE6
311E:  CLRF   xE7
3120:  CLRF   xE8
3122:  CLRF   xE9
3124:  CLRF   xEA
3126:  CLRF   xEB
3128:  CLRF   xEC
312A:  CLRF   xED
312C:  CLRF   xEE
312E:  CLRF   xEF
3130:  CLRF   xF0
3132:  CLRF   xF1
3134:  CLRF   xF2
3136:  CLRF   xF3
3138:  CLRF   xF4
313A:  CLRF   xF5
313C:  CLRF   xF6
313E:  CLRF   xF7
3140:  CLRF   xF8
3142:  CLRF   xF9
3144:  CLRF   xFA
3146:  CLRF   xFB
3148:  CLRF   xFC
314A:  CLRF   xFD
314C:  CLRF   xFE
314E:  CLRF   xFF
3150:  MOVLB  2
3152:  CLRF   x00
3154:  CLRF   x01
3156:  CLRF   x02
3158:  CLRF   x03
315A:  CLRF   x04
315C:  CLRF   x05
315E:  CLRF   x06
3160:  CLRF   x07
3162:  CLRF   x08
3164:  CLRF   x09
3166:  CLRF   x0A
3168:  CLRF   x0B
316A:  CLRF   x0C
316C:  CLRF   x0D
316E:  CLRF   x0E
3170:  CLRF   x0F
3172:  CLRF   x10
3174:  CLRF   x11
3176:  CLRF   x12
3178:  CLRF   x13
317A:  CLRF   x14
317C:  CLRF   x15
317E:  CLRF   x16
3180:  CLRF   x17
3182:  CLRF   x18
3184:  CLRF   x19
3186:  CLRF   x1A
3188:  CLRF   x1B
318A:  CLRF   x1C
318C:  CLRF   x1D
318E:  CLRF   x1E
3190:  CLRF   x1F
3192:  CLRF   x20
3194:  CLRF   x21
3196:  CLRF   x22
3198:  CLRF   x23
319A:  CLRF   x24
319C:  CLRF   x25
319E:  CLRF   x26
31A0:  CLRF   x27
31A2:  CLRF   x28
31A4:  CLRF   x29
31A6:  CLRF   x2A
31A8:  CLRF   x2B
31AA:  CLRF   x2C
31AC:  CLRF   x2D
31AE:  CLRF   x2E
31B0:  CLRF   x2F
31B2:  CLRF   x30
31B4:  CLRF   x31
31B6:  CLRF   x32
31B8:  CLRF   x33
31BA:  CLRF   x34
31BC:  CLRF   x35
31BE:  CLRF   x36
31C0:  CLRF   x37
31C2:  CLRF   x38
31C4:  CLRF   x39
31C6:  CLRF   x3A
31C8:  CLRF   x3B
31CA:  CLRF   x3C
31CC:  CLRF   x3D
31CE:  CLRF   x3E
31D0:  CLRF   x3F
31D2:  CLRF   x40
31D4:  CLRF   x41
31D6:  CLRF   x42
31D8:  CLRF   x43
31DA:  CLRF   x44
31DC:  CLRF   x45
31DE:  CLRF   x46
31E0:  CLRF   x47
31E2:  CLRF   x48
31E4:  CLRF   x49
31E6:  CLRF   x4A
31E8:  CLRF   x4B
31EA:  CLRF   x4C
31EC:  CLRF   x4D
31EE:  CLRF   x4E
31F0:  CLRF   x4F
31F2:  CLRF   x50
31F4:  CLRF   x51
31F6:  CLRF   x52
31F8:  CLRF   x53
31FA:  CLRF   x54
31FC:  CLRF   x55
31FE:  CLRF   x56
3200:  CLRF   x57
3202:  CLRF   x58
3204:  CLRF   x59
3206:  CLRF   x5A
3208:  CLRF   x5B
320A:  CLRF   x5C
320C:  CLRF   x5D
320E:  CLRF   x5E
3210:  CLRF   x5F
3212:  CLRF   x60
3214:  CLRF   x61
3216:  CLRF   x62
3218:  CLRF   x63
321A:  CLRF   x64
321C:  CLRF   x65
321E:  CLRF   x66
3220:  CLRF   x67
3222:  CLRF   x68
3224:  CLRF   x69
3226:  CLRF   x6A
3228:  CLRF   x6B
322A:  CLRF   x6C
322C:  CLRF   x6D
322E:  CLRF   x6E
3230:  CLRF   x6F
3232:  CLRF   x70
3234:  CLRF   x71
3236:  CLRF   x72
3238:  CLRF   x73
323A:  CLRF   x74
323C:  CLRF   x75
323E:  CLRF   x76
3240:  CLRF   x77
3242:  CLRF   x78
3244:  CLRF   x79
3246:  CLRF   x7A
3248:  CLRF   x7B
324A:  CLRF   x7C
324C:  CLRF   x7D
324E:  CLRF   x7E
3250:  CLRF   x7F
3252:  CLRF   x80
3254:  CLRF   x81
3256:  CLRF   x82
3258:  CLRF   x83
325A:  CLRF   x84
325C:  CLRF   x85
325E:  CLRF   x86
3260:  CLRF   x87
3262:  CLRF   x88
3264:  CLRF   x89
3266:  CLRF   x8A
3268:  CLRF   x8B
326A:  CLRF   x8C
326C:  CLRF   x8D
326E:  CLRF   x8E
3270:  CLRF   x8F
3272:  CLRF   x90
3274:  CLRF   x91
3276:  CLRF   x92
3278:  CLRF   x93
327A:  CLRF   x94
327C:  CLRF   x95
327E:  CLRF   x96
3280:  CLRF   x97
3282:  CLRF   x98
3284:  CLRF   x99
3286:  CLRF   x9A
3288:  CLRF   x9B
328A:  CLRF   x9C
328C:  CLRF   x9D
328E:  CLRF   x9E
3290:  CLRF   x9F
3292:  CLRF   xA0
3294:  CLRF   xA1
3296:  CLRF   xA2
3298:  CLRF   xA3
329A:  CLRF   xA4
329C:  CLRF   xA5
329E:  CLRF   xA6
32A0:  CLRF   xA7
32A2:  CLRF   xA8
32A4:  CLRF   xA9
32A6:  CLRF   xAA
32A8:  CLRF   xAB
32AA:  CLRF   xAC
32AC:  CLRF   xAD
32AE:  CLRF   xAE
32B0:  CLRF   xAF
32B2:  CLRF   xB0
32B4:  CLRF   xB1
32B6:  CLRF   xB2
32B8:  CLRF   xB3
32BA:  CLRF   xB4
32BC:  CLRF   xB5
32BE:  CLRF   xB6
32C0:  CLRF   xB7
32C2:  CLRF   xB8
32C4:  CLRF   xB9
32C6:  CLRF   xBA
32C8:  CLRF   xBB
32CA:  CLRF   xBC
32CC:  CLRF   xBD
32CE:  CLRF   xBE
32D0:  CLRF   xBF
32D2:  CLRF   xC0
32D4:  CLRF   xC1
32D6:  CLRF   xC2
32D8:  CLRF   xC3
32DA:  CLRF   xC4
32DC:  CLRF   xC5
32DE:  CLRF   xC6
32E0:  CLRF   xC7
32E2:  CLRF   xC8
32E4:  CLRF   xC9
32E6:  CLRF   xCA
32E8:  CLRF   xCB
32EA:  CLRF   xCC
32EC:  CLRF   xCD
32EE:  CLRF   xCE
32F0:  CLRF   xCF
32F2:  CLRF   xD0
32F4:  CLRF   xD1
32F6:  CLRF   xD2
32F8:  CLRF   xD3
32FA:  CLRF   xD4
32FC:  CLRF   xD5
32FE:  CLRF   xD6
3300:  CLRF   xD7
3302:  CLRF   xD8
3304:  CLRF   xD9
3306:  CLRF   xDA
3308:  CLRF   xDB
330A:  CLRF   xDC
330C:  CLRF   xDD
330E:  CLRF   xDE
3310:  CLRF   xDF
3312:  CLRF   xE0
3314:  CLRF   xE1
3316:  CLRF   xE2
3318:  CLRF   xE3
331A:  CLRF   xE4
331C:  CLRF   xE5
331E:  CLRF   xE6
3320:  CLRF   xE7
3322:  CLRF   xE8
3324:  CLRF   xE9
3326:  CLRF   xEA
3328:  CLRF   xEB
332A:  CLRF   xEC
332C:  CLRF   xED
332E:  CLRF   xEE
3330:  CLRF   xEF
3332:  CLRF   xF0
3334:  CLRF   xF1
3336:  CLRF   xF2
3338:  CLRF   xF3
333A:  CLRF   xF4
333C:  CLRF   xF5
333E:  CLRF   xF6
3340:  CLRF   xF7
3342:  CLRF   xF8
3344:  CLRF   xF9
3346:  CLRF   xFA
3348:  CLRF   xFB
334A:  CLRF   xFC
334C:  CLRF   xFD
334E:  CLRF   xFE
3350:  CLRF   xFF
3352:  MOVLB  3
3354:  CLRF   x00
3356:  CLRF   x01
3358:  CLRF   x02
335A:  CLRF   x03
335C:  CLRF   x04
335E:  CLRF   x05
3360:  CLRF   x06
3362:  CLRF   x07
3364:  CLRF   x08
3366:  CLRF   x09
3368:  CLRF   x0A
336A:  CLRF   x0B
336C:  CLRF   x0C
336E:  CLRF   x0D
3370:  CLRF   x0E
3372:  CLRF   x0F
3374:  CLRF   x10
3376:  CLRF   x11
3378:  CLRF   x12
337A:  CLRF   x13
337C:  CLRF   x14
337E:  CLRF   x15
3380:  CLRF   x16
3382:  CLRF   x17
3384:  CLRF   x18
3386:  CLRF   x19
3388:  CLRF   x1A
338A:  CLRF   x1B
338C:  CLRF   x1C
338E:  CLRF   x1D
3390:  CLRF   x1E
3392:  CLRF   x1F
3394:  CLRF   x20
3396:  CLRF   x21
3398:  CLRF   x22
339A:  CLRF   x23
339C:  CLRF   x24
339E:  CLRF   x25
33A0:  CLRF   x26
33A2:  CLRF   x27
33A4:  CLRF   x28
33A6:  CLRF   x29
33A8:  CLRF   x2A
33AA:  CLRF   x2B
33AC:  CLRF   x2C
33AE:  CLRF   x2D
33B0:  CLRF   x2E
33B2:  CLRF   x2F
33B4:  CLRF   x30
33B6:  CLRF   x31
33B8:  CLRF   x32
33BA:  CLRF   x33
33BC:  CLRF   x34
33BE:  CLRF   x35
33C0:  CLRF   x36
33C2:  CLRF   x37
33C4:  CLRF   x38
33C6:  CLRF   x39
33C8:  CLRF   x3A
33CA:  CLRF   x3B
33CC:  CLRF   x3C
33CE:  CLRF   x3D
33D0:  CLRF   x3E
33D2:  CLRF   x3F
33D4:  CLRF   x40
33D6:  CLRF   x41
33D8:  CLRF   x42
33DA:  CLRF   x43
33DC:  CLRF   x44
33DE:  CLRF   x45
33E0:  CLRF   x46
33E2:  CLRF   x47
33E4:  CLRF   x48
33E6:  CLRF   x49
33E8:  CLRF   x4A
33EA:  CLRF   x4B
33EC:  CLRF   x4C
33EE:  CLRF   x4D
33F0:  CLRF   x4E
33F2:  CLRF   x4F
33F4:  CLRF   x50
33F6:  CLRF   x51
33F8:  CLRF   x52
33FA:  CLRF   x53
33FC:  CLRF   x54
33FE:  CLRF   x55
3400:  CLRF   x56
3402:  CLRF   x57
3404:  CLRF   x58
3406:  CLRF   x59
3408:  CLRF   x5A
340A:  CLRF   x5B
340C:  CLRF   x5C
340E:  CLRF   x5D
3410:  CLRF   x5E
3412:  CLRF   x5F
3414:  CLRF   x60
3416:  CLRF   x61
3418:  CLRF   x62
341A:  CLRF   x63
341C:  CLRF   x64
341E:  CLRF   x65
3420:  CLRF   x66
3422:  CLRF   x67
3424:  CLRF   x68
3426:  CLRF   x69
3428:  CLRF   x6A
342A:  CLRF   x6B
342C:  CLRF   x6C
342E:  CLRF   x6D
3430:  CLRF   x6E
3432:  CLRF   x6F
3434:  CLRF   x70
3436:  CLRF   x71
3438:  CLRF   x72
343A:  CLRF   x73
343C:  CLRF   x74
343E:  CLRF   x75
3440:  CLRF   x76
3442:  CLRF   x77
3444:  CLRF   x78
3446:  CLRF   x79
3448:  CLRF   x7A
344A:  CLRF   x7B
344C:  CLRF   x7C
344E:  CLRF   x7D
3450:  CLRF   x7E
3452:  CLRF   x7F
3454:  CLRF   x80
3456:  CLRF   x81
3458:  CLRF   x82
345A:  CLRF   x83
345C:  CLRF   x84
345E:  CLRF   x85
3460:  CLRF   x86
3462:  CLRF   x87
3464:  CLRF   x88
3466:  CLRF   x89
3468:  CLRF   x8A
346A:  CLRF   x8B
346C:  CLRF   x8C
346E:  CLRF   x8D
3470:  CLRF   x8E
3472:  CLRF   x8F
3474:  CLRF   x90
3476:  CLRF   x91
3478:  CLRF   x92
347A:  CLRF   x93
347C:  CLRF   x94
347E:  CLRF   x95
3480:  CLRF   x96
3482:  CLRF   x97
3484:  CLRF   x98
3486:  CLRF   x99
3488:  CLRF   x9A
348A:  CLRF   x9B
348C:  CLRF   x9C
348E:  CLRF   x9D
3490:  CLRF   x9E
3492:  CLRF   x9F
3494:  CLRF   xA0
3496:  CLRF   xA1
3498:  CLRF   xA2
349A:  CLRF   xA3
349C:  CLRF   xA4
349E:  CLRF   xA5
34A0:  CLRF   xA6
34A2:  CLRF   xA7
34A4:  CLRF   xA8
34A6:  CLRF   xA9
34A8:  CLRF   xAA
34AA:  CLRF   xAB
34AC:  CLRF   xAC
34AE:  CLRF   xAD
34B0:  CLRF   xAE
34B2:  CLRF   xAF
34B4:  CLRF   xB0
34B6:  CLRF   xB1
34B8:  CLRF   xB2
34BA:  CLRF   xB3
34BC:  CLRF   xB4
34BE:  CLRF   xB5
34C0:  CLRF   xB6
34C2:  CLRF   xB7
34C4:  CLRF   xB8
34C6:  CLRF   xB9
34C8:  CLRF   xBA
34CA:  CLRF   xBB
34CC:  CLRF   xBC
34CE:  CLRF   xBD
34D0:  CLRF   xBE
34D2:  CLRF   xBF
34D4:  CLRF   xC0
34D6:  CLRF   xC1
34D8:  CLRF   xC2
34DA:  CLRF   xC3
34DC:  CLRF   xC4
34DE:  CLRF   xC5
34E0:  CLRF   xC6
34E2:  CLRF   xC7
34E4:  CLRF   xC8
34E6:  CLRF   xC9
34E8:  CLRF   xCA
34EA:  CLRF   xCB
34EC:  CLRF   xCC
34EE:  CLRF   xCD
34F0:  CLRF   xCE
34F2:  CLRF   xCF
34F4:  CLRF   xD0
34F6:  CLRF   xD1
34F8:  CLRF   xD2
34FA:  CLRF   xD3
34FC:  CLRF   xD4
34FE:  CLRF   xD5
3500:  CLRF   xD6
3502:  CLRF   xD7
3504:  CLRF   xD8
3506:  CLRF   xD9
3508:  CLRF   xDA
350A:  CLRF   xDB
350C:  CLRF   xDC
350E:  CLRF   xDD
3510:  CLRF   xDE
3512:  CLRF   xDF
3514:  CLRF   xE0
3516:  CLRF   xE1
3518:  CLRF   xE2
351A:  CLRF   xE3
351C:  CLRF   xE4
351E:  CLRF   xE5
3520:  CLRF   xE6
3522:  CLRF   xE7
3524:  CLRF   xE8
3526:  CLRF   xE9
3528:  CLRF   xEA
352A:  CLRF   xEB
352C:  CLRF   xEC
352E:  CLRF   xED
3530:  CLRF   xEE
3532:  CLRF   xEF
3534:  CLRF   xF0
3536:  CLRF   xF1
3538:  CLRF   xF2
353A:  CLRF   xF3
353C:  CLRF   xF4
353E:  CLRF   xF5
3540:  CLRF   xF6
3542:  CLRF   xF7
3544:  CLRF   xF8
3546:  CLRF   xF9
3548:  CLRF   xFA
354A:  CLRF   xFB
354C:  CLRF   xFC
354E:  CLRF   xFD
3550:  CLRF   xFE
3552:  CLRF   xFF
3554:  MOVLB  4
3556:  CLRF   x00
3558:  CLRF   x01
355A:  CLRF   x02
355C:  CLRF   x03
355E:  CLRF   x04
3560:  CLRF   x05
3562:  CLRF   x06
3564:  CLRF   x07
3566:  CLRF   x08
3568:  CLRF   x09
356A:  CLRF   x0A
356C:  CLRF   x0B
356E:  CLRF   x0C
3570:  CLRF   x0D
3572:  CLRF   x0E
3574:  CLRF   x0F
3576:  CLRF   x10
3578:  CLRF   x11
357A:  CLRF   x12
357C:  CLRF   x13
357E:  CLRF   x14
3580:  CLRF   x15
3582:  CLRF   x16
3584:  CLRF   x17
3586:  CLRF   x18
3588:  CLRF   x19
358A:  CLRF   x1A
358C:  CLRF   x1B
358E:  CLRF   x1C
3590:  MOVWF  x1F
3592:  MOVWF  x20
3594:  MOVWF  x21
3596:  MOVWF  x22
3598:  MOVWF  x23
359A:  MOVWF  x24
359C:  MOVWF  x25
359E:  MOVWF  x26
35A0:  MOVWF  x27
35A2:  MOVLW  DF
35A4:  MOVWF  x28
35A6:  MOVLW  FF
35A8:  MOVWF  x29
35AA:  MOVWF  x2A
35AC:  MOVWF  x2B
35AE:  MOVWF  x2C
35B0:  MOVWF  x2D
35B2:  MOVWF  x2E
35B4:  MOVWF  x2F
35B6:  MOVLW  8F
35B8:  MOVWF  x30
35BA:  MOVLW  FF
35BC:  MOVWF  x31
35BE:  MOVWF  x32
35C0:  MOVWF  x33
35C2:  MOVWF  x34
35C4:  MOVWF  x35
35C6:  MOVWF  x36
35C8:  MOVWF  x37
35CA:  MOVLW  8F
35CC:  MOVWF  x38
35CE:  MOVLW  FF
35D0:  MOVWF  x39
35D2:  MOVWF  x3A
35D4:  MOVWF  x3B
35D6:  MOVWF  x3C
35D8:  MOVWF  x3D
35DA:  MOVWF  x3E
35DC:  MOVWF  x3F
35DE:  MOVLW  27
35E0:  MOVWF  x40
35E2:  MOVLW  FF
35E4:  MOVWF  x41
35E6:  MOVWF  x42
35E8:  MOVWF  x43
35EA:  MOVWF  x44
35EC:  MOVWF  x45
35EE:  MOVWF  x46
35F0:  MOVLW  FE
35F2:  MOVWF  x47
35F4:  MOVLW  67
35F6:  MOVWF  x48
35F8:  MOVLW  FF
35FA:  MOVWF  x49
35FC:  MOVWF  x4A
35FE:  MOVWF  x4B
3600:  MOVWF  x4C
3602:  MOVWF  x4D
3604:  MOVWF  x4E
3606:  MOVLW  FE
3608:  MOVWF  x4F
360A:  MOVLW  73
360C:  MOVWF  x50
360E:  MOVLW  FF
3610:  MOVWF  x51
3612:  MOVWF  x52
3614:  MOVWF  x53
3616:  MOVWF  x54
3618:  MOVWF  x55
361A:  MOVWF  x56
361C:  MOVLW  FC
361E:  MOVWF  x57
3620:  MOVLW  E3
3622:  MOVWF  x58
3624:  MOVLW  FF
3626:  MOVWF  x59
3628:  MOVWF  x5A
362A:  MOVWF  x5B
362C:  MOVWF  x5C
362E:  MOVWF  x5D
3630:  MOVWF  x5E
3632:  MOVLW  FC
3634:  MOVWF  x5F
3636:  MOVLW  E1
3638:  MOVWF  x60
363A:  MOVLW  FF
363C:  MOVWF  x61
363E:  MOVWF  x62
3640:  MOVWF  x63
3642:  MOVWF  x64
3644:  MOVWF  x65
3646:  MOVLW  FD
3648:  MOVWF  x66
364A:  MOVLW  F9
364C:  MOVWF  x67
364E:  MOVLW  CC
3650:  MOVWF  x68
3652:  MOVLW  FF
3654:  MOVWF  x69
3656:  MOVWF  x6A
3658:  MOVWF  x6B
365A:  MOVWF  x6C
365C:  MOVWF  x6D
365E:  MOVLW  F8
3660:  MOVWF  x6E
3662:  MOVLW  F9
3664:  MOVWF  x6F
3666:  MOVLW  CC
3668:  MOVWF  x70
366A:  MOVLW  FF
366C:  MOVWF  x71
366E:  MOVWF  x72
3670:  MOVWF  x73
3672:  MOVWF  x74
3674:  MOVWF  x75
3676:  MOVLW  F8
3678:  MOVWF  x76
367A:  MOVLW  F3
367C:  MOVWF  x77
367E:  MOVLW  DE
3680:  MOVWF  x78
3682:  MOVLW  7F
3684:  MOVWF  x79
3686:  MOVLW  FF
3688:  MOVWF  x7A
368A:  MOVWF  x7B
368C:  MOVWF  x7C
368E:  MOVWF  x7D
3690:  MOVLW  FB
3692:  MOVWF  x7E
3694:  MOVLW  F3
3696:  MOVWF  x7F
3698:  MOVLW  FE
369A:  MOVWF  x80
369C:  MOVLW  7F
369E:  MOVWF  x81
36A0:  MOVLW  FF
36A2:  MOVWF  x82
36A4:  MOVWF  x83
36A6:  MOVWF  x84
36A8:  MOVWF  x85
36AA:  MOVWF  x86
36AC:  MOVLW  E4
36AE:  MOVWF  x87
36B0:  MOVLW  FC
36B2:  MOVWF  x88
36B4:  MOVLW  3F
36B6:  MOVWF  x89
36B8:  MOVLW  3B
36BA:  MOVWF  x8A
36BC:  MOVLW  21
36BE:  MOVWF  x8B
36C0:  MOVLW  8C
36C2:  MOVWF  x8C
36C4:  MOVLW  73
36C6:  MOVWF  x8D
36C8:  MOVLW  27
36CA:  MOVWF  x8E
36CC:  MOVLW  E4
36CE:  MOVWF  x8F
36D0:  MOVLW  DC
36D2:  MOVWF  x90
36D4:  MOVLW  BF
36D6:  MOVWF  x91
36D8:  MOVLW  3B
36DA:  MOVWF  x92
36DC:  MOVLW  21
36DE:  MOVWF  x93
36E0:  MOVLW  0C
36E2:  MOVWF  x94
36E4:  MOVLW  33
36E6:  MOVWF  x95
36E8:  MOVLW  27
36EA:  MOVWF  x96
36EC:  MOVLW  CC
36EE:  MOVWF  x97
36F0:  MOVLW  99
36F2:  MOVWF  x98
36F4:  MOVLW  9F
36F6:  MOVWF  x99
36F8:  MOVLW  3B
36FA:  MOVWF  x9A
36FC:  MOVLW  33
36FE:  MOVWF  x9B
3700:  MOVLW  25
3702:  MOVWF  x9C
3704:  MOVLW  33
3706:  MOVWF  x9D
3708:  MOVLW  07
370A:  MOVWF  x9E
370C:  MOVLW  D9
370E:  MOVWF  x9F
3710:  MOVLW  9B
3712:  MOVWF  xA0
3714:  MOVLW  CF
3716:  MOVWF  xA1
3718:  MOVLW  1B
371A:  MOVWF  xA2
371C:  MOVLW  33
371E:  MOVWF  xA3
3720:  MOVLW  65
3722:  MOVWF  xA4
3724:  MOVLW  23
3726:  MOVWF  xA5
3728:  MOVLW  07
372A:  MOVWF  xA6
372C:  MOVLW  99
372E:  MOVWF  xA7
3730:  MOVLW  93
3732:  MOVWF  xA8
3734:  MOVLW  CF
3736:  MOVWF  xA9
3738:  MOVLW  1B
373A:  MOVWF  xAA
373C:  MOVLW  33
373E:  MOVWF  xAB
3740:  MOVLW  64
3742:  MOVWF  xAC
3744:  MOVLW  61
3746:  MOVWF  xAD
3748:  MOVLW  07
374A:  MOVWF  xAE
374C:  MOVLW  BB
374E:  MOVWF  xAF
3750:  MOVLW  36
3752:  MOVWF  xB0
3754:  MOVLW  E6
3756:  MOVWF  xB1
3758:  MOVLW  1B
375A:  MOVWF  xB2
375C:  MOVLW  33
375E:  MOVWF  xB3
3760:  MOVLW  64
3762:  MOVWF  xB4
3764:  MOVLW  21
3766:  MOVWF  xB5
3768:  MOVLW  07
376A:  MOVWF  xB6
376C:  MOVLW  39
376E:  MOVWF  xB7
3770:  MOVLW  64
3772:  MOVWF  xB8
3774:  MOVLW  6E
3776:  MOVWF  xB9
3778:  MOVLW  5B
377A:  MOVWF  xBA
377C:  MOVLW  33
377E:  MOVWF  xBB
3780:  MOVLW  65
3782:  MOVWF  xBC
3784:  MOVLW  21
3786:  MOVWF  xBD
3788:  MOVLW  07
378A:  MOVWF  xBE
378C:  MOVLW  9C
378E:  MOVWF  xBF
3790:  MOVLW  4C
3792:  MOVWF  xC0
3794:  MOVLW  CE
3796:  MOVWF  xC1
3798:  MOVLW  1B
379A:  MOVWF  xC2
379C:  MOVLW  73
379E:  MOVWF  xC3
37A0:  MOVLW  25
37A2:  MOVWF  xC4
37A4:  MOVLW  21
37A6:  MOVWF  xC5
37A8:  MOVLW  07
37AA:  MOVWF  xC6
37AC:  MOVLW  9C
37AE:  MOVWF  xC7
37B0:  MOVLW  CD
37B2:  MOVWF  xC8
37B4:  MOVLW  9E
37B6:  MOVWF  xC9
37B8:  MOVLW  08
37BA:  MOVWF  xCA
37BC:  MOVLW  73
37BE:  MOVWF  xCB
37C0:  MOVLW  0C
37C2:  MOVWF  xCC
37C4:  MOVLW  21
37C6:  MOVWF  xCD
37C8:  MOVLW  27
37CA:  MOVWF  xCE
37CC:  MOVLW  CC
37CE:  MOVWF  xCF
37D0:  MOVLW  C9
37D2:  MOVWF  xD0
37D4:  MOVLW  9E
37D6:  MOVWF  xD1
37D8:  MOVLW  CC
37DA:  MOVWF  xD2
37DC:  MOVLW  73
37DE:  MOVWF  xD3
37E0:  MOVLW  8C
37E2:  MOVWF  xD4
37E4:  MOVLW  4C
37E6:  MOVWF  xD5
37E8:  MOVLW  27
37EA:  MOVWF  xD6
37EC:  MOVLW  E9
37EE:  MOVWF  xD7
37F0:  MOVLW  DB
37F2:  MOVWF  xD8
37F4:  MOVLW  3F
37F6:  MOVWF  xD9
37F8:  MOVLW  FF
37FA:  MOVWF  xDA
37FC:  MOVWF  xDB
37FE:  MOVWF  xDC
3800:  MOVWF  xDD
3802:  MOVWF  xDE
3804:  MOVLW  E0
3806:  MOVWF  xDF
3808:  MOVLW  F2
380A:  MOVWF  xE0
380C:  MOVLW  3F
380E:  MOVWF  xE1
3810:  MOVLW  FF
3812:  MOVWF  xE2
3814:  MOVWF  xE3
3816:  MOVWF  xE4
3818:  MOVLW  FE
381A:  MOVWF  xE5
381C:  MOVLW  FF
381E:  MOVWF  xE6
3820:  MOVLW  F0
3822:  MOVWF  xE7
3824:  MOVLW  E6
3826:  MOVWF  xE8
3828:  MOVLW  7F
382A:  MOVWF  xE9
382C:  MOVLW  FF
382E:  MOVWF  xEA
3830:  MOVWF  xEB
3832:  MOVWF  xEC
3834:  MOVWF  xED
3836:  MOVWF  xEE
3838:  MOVLW  F2
383A:  MOVWF  xEF
383C:  MOVLW  66
383E:  MOVWF  xF0
3840:  MOVLW  7F
3842:  MOVWF  xF1
3844:  MOVLW  FF
3846:  MOVWF  xF2
3848:  MOVWF  xF3
384A:  MOVWF  xF4
384C:  MOVLW  85
384E:  MOVWF  xF5
3850:  MOVLW  0F
3852:  MOVWF  xF6
3854:  MOVLW  FE
3856:  MOVWF  xF7
3858:  MOVLW  4F
385A:  MOVWF  xF8
385C:  MOVLW  FF
385E:  MOVWF  xF9
3860:  MOVWF  xFA
3862:  MOVWF  xFB
3864:  MOVWF  xFC
3866:  MOVLW  94
3868:  MOVWF  xFD
386A:  MOVLW  4F
386C:  MOVWF  xFE
386E:  MOVLW  FF
3870:  MOVWF  xFF
3872:  MOVLW  0F
3874:  MOVLB  5
3876:  MOVWF  x00
3878:  MOVLW  FF
387A:  MOVWF  x01
387C:  MOVWF  x02
387E:  MOVWF  x03
3880:  MOVWF  x04
3882:  MOVLW  8A
3884:  MOVWF  x05
3886:  MOVLW  0F
3888:  MOVWF  x06
388A:  MOVLW  FF
388C:  MOVWF  x07
388E:  MOVLW  9F
3890:  MOVWF  x08
3892:  MOVLW  FF
3894:  MOVWF  x09
3896:  MOVWF  x0A
3898:  MOVWF  x0B
389A:  MOVWF  x0C
389C:  MOVWF  x0D
389E:  MOVLW  BF
38A0:  MOVWF  x0E
38A2:  MOVLW  FF
38A4:  MOVWF  x0F
38A6:  MOVLW  9F
38A8:  MOVWF  x10
38AA:  MOVLW  FF
38AC:  MOVWF  x11
38AE:  MOVWF  x12
38B0:  MOVWF  x13
38B2:  MOVWF  x14
38B4:  MOVWF  x15
38B6:  MOVLW  BF
38B8:  MOVWF  x16
38BA:  MOVLW  FF
38BC:  MOVWF  x17
38BE:  MOVWF  x18
38C0:  MOVWF  x19
38C2:  MOVWF  x1A
38C4:  MOVWF  x1B
38C6:  MOVWF  x1C
38C8:  MOVWF  x1D
38CA:  MOVWF  x1E
38CC:  MOVLW  20
38CE:  MOVWF  x1F
38D0:  MOVWF  x20
38D2:  MOVLW  3A
38D4:  MOVWF  x21
38D6:  MOVLW  20
38D8:  MOVWF  x22
38DA:  MOVWF  x23
38DC:  CLRF   x24
38DE:  MOVWF  x25
38E0:  MOVWF  x26
38E2:  MOVLW  2F
38E4:  MOVWF  x27
38E6:  MOVLW  20
38E8:  MOVWF  x28
38EA:  MOVWF  x29
38EC:  MOVLW  2F
38EE:  MOVWF  x2A
38F0:  MOVLW  32
38F2:  MOVWF  x2B
38F4:  MOVLW  30
38F6:  MOVWF  x2C
38F8:  CLRF   x2D
38FA:  MOVLW  48
38FC:  MOVWF  x2E
38FE:  MOVLW  3A
3900:  MOVWF  x2F
3902:  MOVLW  30
3904:  MOVWF  x30
3906:  MOVWF  x31
3908:  MOVWF  x32
390A:  MOVWF  x33
390C:  MOVWF  x34
390E:  MOVLW  3A
3910:  MOVWF  x35
3912:  MOVLW  30
3914:  MOVWF  x36
3916:  MOVWF  x37
3918:  MOVLW  20
391A:  MOVWF  x38
391C:  CLRF   x39
391E:  MOVLW  54
3920:  MOVWF  x3A
3922:  MOVLW  3A
3924:  MOVWF  x3B
3926:  MOVLW  30
3928:  MOVWF  x3C
392A:  MOVWF  x3D
392C:  MOVWF  x3E
392E:  MOVWF  x3F
3930:  MOVWF  x40
3932:  MOVLW  3A
3934:  MOVWF  x41
3936:  MOVLW  30
3938:  MOVWF  x42
393A:  MOVWF  x43
393C:  MOVLW  20
393E:  MOVWF  x44
3940:  CLRF   x45
3942:  MOVLW  53
3944:  MOVWF  x46
3946:  MOVLW  45
3948:  MOVWF  x47
394A:  MOVLW  47
394C:  MOVWF  x48
394E:  CLRF   x49
3950:  MOVLW  54
3952:  MOVWF  x4A
3954:  MOVLW  45
3956:  MOVWF  x4B
3958:  MOVLW  52
395A:  MOVWF  x4C
395C:  CLRF   x4D
395E:  MOVLW  51
3960:  MOVWF  x4E
3962:  MOVLW  55
3964:  MOVWF  x4F
3966:  MOVLW  41
3968:  MOVWF  x50
396A:  CLRF   x51
396C:  MOVLW  51
396E:  MOVWF  x52
3970:  MOVLW  55
3972:  MOVWF  x53
3974:  MOVLW  49
3976:  MOVWF  x54
3978:  CLRF   x55
397A:  MOVLW  53
397C:  MOVWF  x56
397E:  MOVLW  45
3980:  MOVWF  x57
3982:  MOVLW  58
3984:  MOVWF  x58
3986:  CLRF   x59
3988:  MOVLW  53
398A:  MOVWF  x5A
398C:  MOVLW  41
398E:  MOVWF  x5B
3990:  MOVLW  42
3992:  MOVWF  x5C
3994:  CLRF   x5D
3996:  MOVLW  44
3998:  MOVWF  x5E
399A:  MOVLW  4F
399C:  MOVWF  x5F
399E:  MOVLW  4D
39A0:  MOVWF  x60
39A2:  CLRF   x61
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD); 
39A4:  MOVF   FC1,W
39A6:  ANDLW  C0
39A8:  IORLW  0F
39AA:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_2); 
39AC:  BCF    FC0.0
39AE:  BCF    FC0.1
39B0:  BCF    FC0.2
39B2:  BCF    FC0.7
39B4:  BSF    FC2.0
....................    setup_psp(PSP_DISABLED); 
39B6:  BCF    F96.4
....................    setup_wdt(WDT_OFF); 
39B8:  BCF    FD1.0
....................    //Para 20MHZ 
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_2|RTCC_8_bit); 
39BA:  MOVLW  C0
39BC:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
39BE:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
39C0:  MOVLW  00
39C2:  MOVWF  FCA
39C4:  MOVLW  00
39C6:  MOVWF  FCB
....................    //Para 8MHZ 
....................    /*setup_timer_0(RTCC_INTERNAL|RTCC_DIV_8|RTCC_8_bit); 
....................    setup_timer_1(T1_DISABLED); 
....................    setup_timer_2(T2_DISABLED,0,1);*/ 
....................    setup_comparator(NC_NC_NC_NC); 
39C8:  MOVLW  07
39CA:  MOVWF  FB4
39CC:  MOVF   F92,W
39CE:  MOVWF  F92
39D0:  MOVLW  10
39D2:  MOVWF  00
39D4:  DECFSZ 00,F
39D6:  BRA    39D4
39D8:  NOP   
39DA:  MOVF   FB4,W
39DC:  BCF    FA1.6
....................    setup_vref(FALSE); 
39DE:  CLRF   FB5
....................    clear_interrupt(INT_TIMER0);     //LIMPA AS INTERRUPÇOES 
39E0:  BCF    FF2.2
....................    clear_interrupt(INT_TIMER1); 
39E2:  BCF    F9E.0
....................    enable_interrupts(INT_TIMER0);   //HABILITA A INTERRUPÇÃO DO TIMER0 
39E4:  BSF    FF2.5
....................    enable_interrupts(INT_TIMER1);   //HABILITA A INTERRUPÇÃO DO TIMER1 
39E6:  BSF    F9D.0
....................    enable_interrupts(GLOBAL);       //HABILITA AS INTERRUPÇOES GLOBAIS 
39E8:  MOVLW  C0
39EA:  IORWF  FF2,F
....................    setup_oscillator(OSC_16MHZ); 
39EC:  MOVLW  60
39EE:  MOVWF  FD3
39F0:  MOVLW  40
39F2:  MOVWF  F9B
39F4:  MOVF   FD3,W
....................  
....................    port_b_pullups(TRUE);                      // HABILITA PULLUP'S INTERNOS DO PORTB 
39F6:  BCF    FF1.7
....................     
....................    /*---INICIALIZA FUNÇOES---*/ 
....................    inicializar_flags(); 
39F8:  MOVLB  0
39FA:  GOTO   0BE6
....................    lemem(); 
39FE:  GOTO   0D60
....................    initdisp(); 
3A02:  GOTO   1246
....................    inithori(); 
3A06:  GOTO   17F2
....................     
....................    while(True){ 
....................     
....................       atualiza_menu(); 
3A0A:  GOTO   2054
....................       if(horimetro.hor != min &&  menu2.flagmenu!=2){ 
3A0E:  MOVLB  5
3A10:  MOVF   x66,W
3A12:  SUBWF  x86,W
3A14:  BTFSC  FD8.2
3A16:  BRA    3B16
3A18:  MOVF   x7F,W
3A1A:  SUBLW  02
3A1C:  BTFSC  FD8.2
3A1E:  BRA    3B16
....................          horimetro.hor = min; 
3A20:  MOVFF  566,586
....................          horimetro.hmin++; 
3A24:  INCF   x87,F
3A26:  BTFSC  FD8.2
3A28:  INCF   x88,F
....................           
....................          if(flagi == 1 && flags ==0 && flagr ==0){ 
3A2A:  BTFSS  x62.1
3A2C:  BRA    3A3C
3A2E:  BTFSC  x62.2
3A30:  BRA    3A3C
3A32:  BTFSC  x62.3
3A34:  BRA    3A3C
....................             horimetro.tmin++;    
3A36:  INCF   x8D,F
3A38:  BTFSC  FD8.2
3A3A:  INCF   x8E,F
....................          } 
....................          if(horimetro.hmin>59){ 
3A3C:  MOVF   x88,F
3A3E:  BNZ   3A46
3A40:  MOVF   x87,W
3A42:  SUBLW  3B
3A44:  BC    3A5A
....................             horimetro.hhr++; 
3A46:  MOVLW  01
3A48:  ADDWF  x89,F
3A4A:  BTFSC  FD8.0
3A4C:  INCF   x8A,F
3A4E:  BTFSC  FD8.2
3A50:  INCF   x8B,F
3A52:  BTFSC  FD8.2
3A54:  INCF   x8C,F
....................             horimetro.hmin = 0; 
3A56:  CLRF   x88
3A58:  CLRF   x87
....................          } 
....................          if(horimetro.tmin>59){ 
3A5A:  MOVF   x8E,F
3A5C:  BNZ   3A64
3A5E:  MOVF   x8D,W
3A60:  SUBLW  3B
3A62:  BC    3A6E
....................             horimetro.thr++; 
3A64:  INCF   x8F,F
3A66:  BTFSC  FD8.2
3A68:  INCF   x90,F
....................             horimetro.tmin = 0; 
3A6A:  CLRF   x8E
3A6C:  CLRF   x8D
....................          } 
....................          hori[9] = horimetro.hmin % 10 + 0x30; 
3A6E:  MOVFF  588,59D
3A72:  MOVFF  587,59C
3A76:  CLRF   x9F
3A78:  MOVLW  0A
3A7A:  MOVWF  x9E
3A7C:  MOVLB  0
3A7E:  CALL   0D1A
3A82:  MOVLB  5
3A84:  MOVLW  30
3A86:  ADDWF  00,W
3A88:  MOVWF  x37
....................          hori[8] = horimetro.hmin / 10 + 0x30; 
3A8A:  MOVFF  588,59D
3A8E:  MOVFF  587,59C
3A92:  CLRF   x9F
3A94:  MOVLW  0A
3A96:  MOVWF  x9E
3A98:  MOVLB  0
3A9A:  CALL   0D1A
3A9E:  MOVLW  30
3AA0:  MOVLB  5
3AA2:  ADDWF  01,W
3AA4:  MOVWF  x36
....................          conv_valor(hori, horimetro.hhr); 
3AA6:  MOVFF  58A,59D
3AAA:  MOVFF  589,59C
3AAE:  MOVLW  05
3AB0:  MOVWF  x9F
3AB2:  MOVLW  2E
3AB4:  MOVWF  x9E
3AB6:  MOVFF  58A,5A1
3ABA:  MOVFF  589,5A0
3ABE:  MOVLB  0
3AC0:  CALL   0C2C
....................          tmr[9] = horimetro.tmin % 10 + 0x30; 
3AC4:  MOVFF  58E,59D
3AC8:  MOVFF  58D,59C
3ACC:  MOVLB  5
3ACE:  CLRF   x9F
3AD0:  MOVLW  0A
3AD2:  MOVWF  x9E
3AD4:  MOVLB  0
3AD6:  CALL   0D1A
3ADA:  MOVLB  5
3ADC:  MOVLW  30
3ADE:  ADDWF  00,W
3AE0:  MOVWF  x43
....................          tmr[8] = horimetro.tmin / 10 + 0x30;   
3AE2:  MOVFF  58E,59D
3AE6:  MOVFF  58D,59C
3AEA:  CLRF   x9F
3AEC:  MOVLW  0A
3AEE:  MOVWF  x9E
3AF0:  MOVLB  0
3AF2:  CALL   0D1A
3AF6:  MOVLW  30
3AF8:  MOVLB  5
3AFA:  ADDWF  01,W
3AFC:  MOVWF  x42
....................          conv_valor(tmr, horimetro.thr); 
3AFE:  MOVLW  05
3B00:  MOVWF  x9F
3B02:  MOVLW  3A
3B04:  MOVWF  x9E
3B06:  MOVFF  590,5A1
3B0A:  MOVFF  58F,5A0
3B0E:  MOVLB  0
3B10:  CALL   0C2C
3B14:  MOVLB  5
....................       } 
....................  
....................       if(flagr == 1 && flagi == 0 && flags ==0){ 
3B16:  BTFSS  x62.3
3B18:  BRA    3B7A
3B1A:  BTFSC  x62.1
3B1C:  BRA    3B7A
3B1E:  BTFSC  x62.2
3B20:  BRA    3B7A
....................          horimetro.tmin = 0; 
3B22:  CLRF   x8E
3B24:  CLRF   x8D
....................          horimetro.thr = 0; 
3B26:  CLRF   x90
3B28:  CLRF   x8F
....................          tmr[9] = horimetro.tmin % 10 + 0x30; 
3B2A:  MOVFF  58E,59D
3B2E:  MOVFF  58D,59C
3B32:  CLRF   x9F
3B34:  MOVLW  0A
3B36:  MOVWF  x9E
3B38:  MOVLB  0
3B3A:  CALL   0D1A
3B3E:  MOVLB  5
3B40:  MOVLW  30
3B42:  ADDWF  00,W
3B44:  MOVWF  x43
....................          tmr[8] = horimetro.tmin / 10 + 0x30; 
3B46:  MOVFF  58E,59D
3B4A:  MOVFF  58D,59C
3B4E:  CLRF   x9F
3B50:  MOVLW  0A
3B52:  MOVWF  x9E
3B54:  MOVLB  0
3B56:  CALL   0D1A
3B5A:  MOVLW  30
3B5C:  MOVLB  5
3B5E:  ADDWF  01,W
3B60:  MOVWF  x42
....................          conv_valor(tmr, horimetro.thr); 
3B62:  MOVLW  05
3B64:  MOVWF  x9F
3B66:  MOVLW  3A
3B68:  MOVWF  x9E
3B6A:  MOVFF  590,5A1
3B6E:  MOVFF  58F,5A0
3B72:  MOVLB  0
3B74:  CALL   0C2C
3B78:  MOVLB  5
....................       } 
....................        
....................       mem.hhr = horimetro.hhr; 
3B7A:  MOVFF  58C,597
3B7E:  MOVFF  58B,596
3B82:  MOVFF  58A,595
3B86:  MOVFF  589,594
....................       mem.hmin = horimetro.hmin; 
3B8A:  MOVFF  588,593
3B8E:  MOVFF  587,592
....................        
....................       if(aux1 >= 10){ 
3B92:  MOVF   x75,F
3B94:  BNZ   3B9C
3B96:  MOVF   x74,W
3B98:  SUBLW  09
3B9A:  BC    3BC8
....................          escrita(); 
3B9C:  MOVLB  0
3B9E:  GOTO   2C04
....................          output_bit(LED, LED_ON); 
3BA2:  BCF    F8B.0
3BA4:  BCF    F94.0
3BA6:  CLRF   16
3BA8:  BTFSC  FF2.7
3BAA:  BSF    16.7
3BAC:  BCF    FF2.7
....................          delay_ms(200); 
3BAE:  MOVLW  C8
3BB0:  MOVLB  6
3BB2:  MOVWF  x47
3BB4:  MOVLB  0
3BB6:  CALL   0344
3BBA:  BTFSC  16.7
3BBC:  BSF    FF2.7
....................          output_bit(LED, LED_OFF); 
3BBE:  BSF    F8B.0
3BC0:  BCF    F94.0
....................          aux1=0; 
3BC2:  MOVLB  5
3BC4:  CLRF   x75
3BC6:  CLRF   x74
....................       } 
....................    }    
3BC8:  MOVLB  0
3BCA:  BRA    3A0A
.................... } 
....................  
.................... void trata_teclas(void){ 
....................   /*---TECLA CONF---*/ 
3BCC:  SLEEP 
....................    if(!input(bot1)){ 
*
04AE:  BSF    F95.3
04B0:  BTFSC  F83.3
04B2:  BRA    04DC
....................       debouncing = 10;                   //BOTAO PRESSIONADO: FLAG DE DEBOUCING CARREGADA COM O VALOR 25 
04B4:  MOVLB  5
04B6:  CLRF   x6D
04B8:  MOVLW  0A
04BA:  MOVWF  x6C
....................       while(debouncing > 0)debouncing--; //ENQUANTO CONTADOR NAO É ZERADO FICA PRESO NO LAÇO DECREMENTANDO(TEMPO DE ESTABILIZAR BOTÃO) 
04BC:  MOVF   x6C,F
04BE:  BNZ   04C4
04C0:  MOVF   x6D,F
04C2:  BZ    04CE
04C4:  MOVF   x6C,W
04C6:  BTFSC  FD8.2
04C8:  DECF   x6D,F
04CA:  DECF   x6C,F
04CC:  BRA    04BC
....................       while(!input(bot1))flag1 = 0;      //SE O BOTAO CONTINUAR PRESSIONADO FICA PRESO NO LOOP SEM FAZER NADA ATÉ QUE SEJA SOLTO O BOTÃO 
04CE:  BSF    F95.3
04D0:  BTFSC  F83.3
04D2:  BRA    04D8
04D4:  BCF    1C.3
04D6:  BRA    04CE
....................       flag1 = 1;                         //FLAG QUE SINALIZA QUE UM BITÃO FOI PRESSIONADO 
04D8:  BSF    1C.3
04DA:  MOVLB  0
....................   } 
....................   /*---SAI DA TELA DE DESCANSO PRO MENU 1---*/ 
....................    if(flag1 && menu1.flagmenu == 0){    //SE A FLAG DE SINALIZAÇÃO ESTIVER SETADA E O MENU1 ESTIVER NA OPOSIÇÃO 0(POSIÇÃO DE DESCANSO) 
04DC:  BTFSS  1C.3
04DE:  BRA    04F6
04E0:  MOVLB  5
04E2:  MOVF   x7C,F
04E4:  BTFSC  FD8.2
04E6:  BRA    04EC
04E8:  MOVLB  0
04EA:  BRA    04F6
....................       menu1.flagmenu = 1;              //O MENU 1 IRA PARA PRIMERA POSIÇÃO ONDE MOSTRARA A LISTA DE OPÇOES 
04EC:  MOVLW  01
04EE:  MOVWF  x7C
....................       menu1.flagtrava =1;              //SETA A FLAG DE INTERTRAVAMENTO DO MENU1 
04F0:  MOVWF  x7B
....................       flag1 = 0;                       //RESETA A FLAG DE SINALIZAÇÃO DE PRESSIONAMENTO DO BOTÃO 
04F2:  BCF    1C.3
04F4:  MOVLB  0
....................   } 
....................   /*---ENTRA NA PRIMERA OPÇÃO DO MENU 1---*/ 
....................    if (flag1 == 1 && menu1.flagmenu==1 && menu2.flagmenu ==0 ){ //CONDIÇOES DE INTERTRAVAMENTO PARA ENTRAR NA PRIMERA OPÇÃO DO MENU1 
04F6:  BTFSS  1C.3
04F8:  BRA    051A
04FA:  MOVLB  5
04FC:  DECFSZ x7C,W
04FE:  BRA    0502
0500:  BRA    0506
0502:  MOVLB  0
0504:  BRA    051A
0506:  MOVF   x7F,F
0508:  BTFSC  FD8.2
050A:  BRA    0510
050C:  MOVLB  0
050E:  BRA    051A
....................       menu2.flagmenu = 1; 
0510:  MOVLW  01
0512:  MOVWF  x7F
....................       menu2.flagtrava =1; 
0514:  MOVWF  x7E
....................       flag1 = 0; 
0516:  BCF    1C.3
0518:  MOVLB  0
....................   } 
....................   /*---ENTRA NA SEGUNDA OPÇÃO DO MENU 1---*/ 
....................    if (flag1 == 1 && menu1.flagmenu==2 && menu3.flagmenu ==0){  //CONDIÇOES DE INTERTRAVAMENTO PARA ENTRAR NA SEGUNDA OPÇÃO DO MENU1 
051A:  BTFSS  1C.3
051C:  BRA    0540
051E:  MOVLB  5
0520:  MOVF   x7C,W
0522:  SUBLW  02
0524:  BTFSC  FD8.2
0526:  BRA    052C
0528:  MOVLB  0
052A:  BRA    0540
052C:  MOVF   x82,F
052E:  BTFSC  FD8.2
0530:  BRA    0536
0532:  MOVLB  0
0534:  BRA    0540
....................       menu3.flagmenu = 1; 
0536:  MOVLW  01
0538:  MOVWF  x82
....................       menu3.flagtrava = 1; 
053A:  MOVWF  x81
....................       flag1 = 0; 
053C:  BCF    1C.3
053E:  MOVLB  0
....................   } 
....................   /*---ENTRA NA TERCEIRA OPÇÃO DO MENU 1---*/   //CONDIÇOES DE INTERTRAVAMENTO PARA ENTRAR NA TERCEIRA OPÇÃO DO MENU1 
....................    if (flag1 == 1 && menu1.flagmenu==3 && menu4.flagmenu ==0){ 
0540:  BTFSS  1C.3
0542:  BRA    0566
0544:  MOVLB  5
0546:  MOVF   x7C,W
0548:  SUBLW  03
054A:  BTFSC  FD8.2
054C:  BRA    0552
054E:  MOVLB  0
0550:  BRA    0566
0552:  MOVF   x85,F
0554:  BTFSC  FD8.2
0556:  BRA    055C
0558:  MOVLB  0
055A:  BRA    0566
....................       menu4.flagmenu = 1; 
055C:  MOVLW  01
055E:  MOVWF  x85
....................       menu4.flagtrava = 1; 
0560:  MOVWF  x84
....................       flag1 = 0; 
0562:  BCF    1C.3
0564:  MOVLB  0
....................   } 
....................   /*---ENTRA NA QUARTA OPÇÃO DO MENU 1---*/  
....................    if (flag1 == 1 && menu1.flagmenu==4 && p2menu ==0){ 
0566:  BTFSS  1C.3
0568:  BRA    059A
056A:  MOVLB  5
056C:  MOVF   x7C,W
056E:  SUBLW  04
0570:  BTFSC  FD8.2
0572:  BRA    0578
0574:  MOVLB  0
0576:  BRA    059A
0578:  MOVF   x78,F
057A:  BTFSC  FD8.2
057C:  BRA    0582
057E:  MOVLB  0
0580:  BRA    059A
0582:  MOVF   x79,F
0584:  BTFSC  FD8.2
0586:  BRA    058C
0588:  MOVLB  0
058A:  BRA    059A
....................       p2menu = 1; 
058C:  CLRF   x79
058E:  MOVLW  01
0590:  MOVWF  x78
....................       p2trava = 1; 
0592:  CLRF   x77
0594:  MOVWF  x76
....................       flag1=0; 
0596:  BCF    1C.3
0598:  MOVLB  0
....................    } 
....................   /*---CONF MENU2---*/ 
....................   if (flag1 == 1 && menu2.flagtrava ==1 ){ //CONDIÇOES PARA TECLA CONFIRMA DENTRO DO SUBMENU2 
059A:  BTFSS  1C.3
059C:  BRA    05D8
059E:  MOVLB  5
05A0:  DECFSZ x7E,W
05A2:  BRA    05A6
05A4:  BRA    05AA
05A6:  MOVLB  0
05A8:  BRA    05D8
....................       menu2.flagmenu++; 
05AA:  INCF   x7F,F
....................       if(menu2.flagmenu >2){              //O MENU IRA INCREMENTAR ATÉ 3 AO PRESSIONAR A TECLA CONFIRMA   
05AC:  MOVF   x7F,W
05AE:  SUBLW  02
05B0:  BC    05D4
....................          menu2.flagtrava =0;              //APÓS IRA ZERAR AS FLAGS DE INTERTRAVAMENTO E VOLTAR AO MENU ANTERIOR   
05B2:  CLRF   x7E
....................          menu2.flagmenu = 0;  
05B4:  CLRF   x7F
....................          escreve_ds(hr, min, s_dia, dia, mes, ano); 
05B6:  MOVFF  567,641
05BA:  MOVFF  566,642
05BE:  MOVFF  568,643
05C2:  MOVFF  569,644
05C6:  MOVFF  56A,645
05CA:  MOVFF  56B,646
05CE:  MOVLB  0
05D0:  RCALL  036C
05D2:  MOVLB  5
....................       } 
....................       flag1 = 0; 
05D4:  BCF    1C.3
05D6:  MOVLB  0
....................   } 
....................   /*---CONF MENU3---*/ 
....................   if(flag1 ==1 && menu3.flagtrava ==1){   //CONDIÇOES PARA TECLA CONFIRMA DENTRO DO SUBMENU2 
05D8:  BTFSS  1C.3
05DA:  BRA    0616
05DC:  MOVLB  5
05DE:  DECFSZ x81,W
05E0:  BRA    05E4
05E2:  BRA    05E8
05E4:  MOVLB  0
05E6:  BRA    0616
....................       menu3.flagmenu++;                      
05E8:  INCF   x82,F
....................       if(menu3.flagmenu>4){               //O MENU IRA INCREMENTAR ATÉ 3 AO PRESSIONAR A TECLA CONFIRMA 
05EA:  MOVF   x82,W
05EC:  SUBLW  04
05EE:  BC    0612
....................          menu3.flagtrava = 0;             //APÓS IRA ZERAR AS FLAGS DE INTERTRAVAMENTO E VOLTAR AO MENU ANTERIOR 
05F0:  CLRF   x81
....................          menu3.flagmenu = 0; 
05F2:  CLRF   x82
....................          escreve_ds(hr, min, s_dia, dia, mes, ano); 
05F4:  MOVFF  567,641
05F8:  MOVFF  566,642
05FC:  MOVFF  568,643
0600:  MOVFF  569,644
0604:  MOVFF  56A,645
0608:  MOVFF  56B,646
060C:  MOVLB  0
060E:  RCALL  036C
0610:  MOVLB  5
....................       } 
....................       flag1 = 0; 
0612:  BCF    1C.3
0614:  MOVLB  0
....................   } 
....................   /*---CONF MENU4---*/ 
....................   if(flag1 ==1 && menu4.flagtrava ==1 && menu4.flagmenu > 0){   //CONDIÇOES PARA TECLA CONFIRMA DENTRO DO SUBMENU2 
0616:  BTFSS  1C.3
0618:  BRA    065E
061A:  MOVLB  5
061C:  DECFSZ x84,W
061E:  BRA    0622
0620:  BRA    0626
0622:  MOVLB  0
0624:  BRA    065E
0626:  MOVF   x85,F
0628:  BTFSS  FD8.2
062A:  BRA    0630
062C:  MOVLB  0
062E:  BRA    065E
....................       if(menu4.flagmenu == 1){ 
0630:  DECFSZ x85,W
0632:  BRA    063A
....................          flagi = 1; 
0634:  BSF    x62.1
....................          flags = 0; 
0636:  BCF    x62.2
....................          flagr = 0; 
0638:  BCF    x62.3
....................       } 
....................       if(menu4.flagmenu == 2){ 
063A:  MOVF   x85,W
063C:  SUBLW  02
063E:  BNZ   0646
....................          flagi = 0; 
0640:  BCF    x62.1
....................          flags = 1; 
0642:  BSF    x62.2
....................          flagr = 0; 
0644:  BCF    x62.3
....................       } 
....................       if(menu4.flagmenu == 3){ 
0646:  MOVF   x85,W
0648:  SUBLW  03
064A:  BNZ   0652
....................          flagi = 0; 
064C:  BCF    x62.1
....................          flags = 0; 
064E:  BCF    x62.2
....................          flagr = 1; 
0650:  BSF    x62.3
....................       } 
....................       if(menu4.flagmenu>0){               //O MENU IRA INCREMENTAR ATÉ 3 AO PRESSIONAR A TECLA CONFIRMA 
0652:  MOVF   x85,F
0654:  BZ    065A
....................          menu4.flagtrava = 0;             //APÓS IRA ZERAR AS FLAGS DE INTERTRAVAMENTO E VOLTAR AO MENU ANTERIOR 
0656:  CLRF   x84
....................          menu4.flagmenu = 0; 
0658:  CLRF   x85
....................       } 
....................       flag1 = 0; 
065A:  BCF    1C.3
065C:  MOVLB  0
....................   } 
....................   /*---CONF MENU 5--*/ 
....................     if(flag1 ==1 && p2trava ==1){   //CONDIÇOES PARA TECLA CONFIRMA DENTRO DO SUBMENU2 
065E:  BTFSS  1C.3
0660:  BRA    0694
0662:  MOVLB  5
0664:  DECFSZ x76,W
0666:  BRA    066A
0668:  BRA    066E
066A:  MOVLB  0
066C:  BRA    0694
066E:  MOVF   x77,F
0670:  BTFSC  FD8.2
0672:  BRA    0678
0674:  MOVLB  0
0676:  BRA    0694
....................       p2menu++;                      
0678:  INCF   x78,F
067A:  BTFSC  FD8.2
067C:  INCF   x79,F
....................       if(p2menu>1){               //O MENU IRA INCREMENTAR ATÉ 3 AO PRESSIONAR A TECLA CONFIRMA 
067E:  MOVF   x79,F
0680:  BNZ   0688
0682:  MOVF   x78,W
0684:  SUBLW  01
0686:  BC    0690
....................          p2trava = 0;             //APÓS IRA ZERAR AS FLAGS DE INTERTRAVAMENTO E VOLTAR AO MENU ANTERIOR 
0688:  CLRF   x77
068A:  CLRF   x76
....................          p2menu = 0; 
068C:  CLRF   x79
068E:  CLRF   x78
....................       } 
....................       flag1 = 0; 
0690:  BCF    1C.3
0692:  MOVLB  0
....................   } 
....................   /*---TECLA VOLTA---*/ 
....................   if(!input(bot4)){                       //BOTAO PRESSIONADO: FLAG DE DEBOUCING CARREGADA COM O VALOR 25 
0694:  BSF    F95.0
0696:  BTFSC  F83.0
0698:  BRA    06C0
....................       debouncing = 10;                    //ENQUANTO CONTADOR NAO É ZERADO FICA PRESO NO LAÇO DECREMENTANDO(TEMPO DE ESTABILIZAR BOTÃO) 
069A:  MOVLB  5
069C:  CLRF   x6D
069E:  MOVLW  0A
06A0:  MOVWF  x6C
....................       while(debouncing > 0)debouncing--;  //SE O BOTAO CONTINUAR PRESSIONADO FICA PRESO NO LOOP SEM FAZER NADA ATÉ QUE SEJA SOLTO O BOTÃO 
06A2:  MOVF   x6C,F
06A4:  BNZ   06AA
06A6:  MOVF   x6D,F
06A8:  BZ    06B4
06AA:  MOVF   x6C,W
06AC:  BTFSC  FD8.2
06AE:  DECF   x6D,F
06B0:  DECF   x6C,F
06B2:  BRA    06A2
....................       while(!input(bot4))                 //FLAG QUE SINALIZA QUE UM BITÃO FOI PRESSIONADO 
....................       flag2 = 1; 
06B4:  BSF    F95.0
06B6:  BTFSC  F83.0
06B8:  BRA    06BE
06BA:  BSF    1C.4
06BC:  BRA    06B4
06BE:  MOVLB  0
....................   } 
....................   /*---VOLTA MENU 1---*/ 
....................   if(flag2==1 && menu1.flagmenu>0 && menu2.flagmenu==0 && menu3.flagmenu==0 && menu4.flagmenu==0 && p2menu==0){ //CONDIÇOES PARA TECLA VOLTA PARA IR PARA TELA DE DESCANSO 
06C0:  BTFSS  1C.4
06C2:  BRA    070A
06C4:  MOVLB  5
06C6:  MOVF   x7C,F
06C8:  BTFSS  FD8.2
06CA:  BRA    06D0
06CC:  MOVLB  0
06CE:  BRA    070A
06D0:  MOVF   x7F,F
06D2:  BTFSC  FD8.2
06D4:  BRA    06DA
06D6:  MOVLB  0
06D8:  BRA    070A
06DA:  MOVF   x82,F
06DC:  BTFSC  FD8.2
06DE:  BRA    06E4
06E0:  MOVLB  0
06E2:  BRA    070A
06E4:  MOVF   x85,F
06E6:  BTFSC  FD8.2
06E8:  BRA    06EE
06EA:  MOVLB  0
06EC:  BRA    070A
06EE:  MOVF   x78,F
06F0:  BTFSC  FD8.2
06F2:  BRA    06F8
06F4:  MOVLB  0
06F6:  BRA    070A
06F8:  MOVF   x79,F
06FA:  BTFSC  FD8.2
06FC:  BRA    0702
06FE:  MOVLB  0
0700:  BRA    070A
....................       menu1.flagmenu=0; 
0702:  CLRF   x7C
....................       menu1.flagtrava=0; 
0704:  CLRF   x7B
....................       flag2=0; 
0706:  BCF    1C.4
0708:  MOVLB  0
....................   } 
....................   /*---VOLTA MENU 2---*/ 
....................   if(flag2==1 && menu1.flagmenu>0 && menu2.flagmenu>0){  //CONDIÇOES PARA TECLA VOLTA PARA IR PARA INCREMENTAR A FLAG ATÉ VOLTAR AO MENU1 
070A:  BTFSS  1C.4
070C:  BRA    0730
070E:  MOVLB  5
0710:  MOVF   x7C,F
0712:  BTFSS  FD8.2
0714:  BRA    071A
0716:  MOVLB  0
0718:  BRA    0730
071A:  MOVF   x7F,F
071C:  BTFSS  FD8.2
071E:  BRA    0724
0720:  MOVLB  0
0722:  BRA    0730
....................       menu2.flagmenu--; 
0724:  DECF   x7F,F
....................       if(menu2.flagmenu == 0)menu2.flagtrava = 0; 
0726:  MOVF   x7F,F
0728:  BTFSC  FD8.2
072A:  CLRF   x7E
....................       flag2 = 0; 
072C:  BCF    1C.4
072E:  MOVLB  0
....................   } 
....................   /*---VOLTA MENU 3---*/ 
....................   if(flag2==1 && menu1.flagmenu>0 && menu3.flagmenu>0){  //CONDIÇOES PARA TECLA VOLTA PARA IR PARA INCREMENTAR A FLAG ATÉ VOLTAR AO MENU1 
0730:  BTFSS  1C.4
0732:  BRA    0756
0734:  MOVLB  5
0736:  MOVF   x7C,F
0738:  BTFSS  FD8.2
073A:  BRA    0740
073C:  MOVLB  0
073E:  BRA    0756
0740:  MOVF   x82,F
0742:  BTFSS  FD8.2
0744:  BRA    074A
0746:  MOVLB  0
0748:  BRA    0756
....................       menu3.flagmenu--; 
074A:  DECF   x82,F
....................       if(menu3.flagmenu==0)menu3.flagtrava = 0; 
074C:  MOVF   x82,F
074E:  BTFSC  FD8.2
0750:  CLRF   x81
....................       flag2 = 0; 
0752:  BCF    1C.4
0754:  MOVLB  0
....................   } 
....................   /*---VOLTA MENU 4---*/ 
....................   if(flag2==1 && menu4.flagmenu>0 && menu4.flagtrava > 0){  //CONDIÇOES PARA TECLA VOLTA PARA IR PARA INCREMENTAR A FLAG ATÉ VOLTAR AO MENU1 
0756:  BTFSS  1C.4
0758:  BRA    077C
075A:  MOVLB  5
075C:  MOVF   x85,F
075E:  BTFSS  FD8.2
0760:  BRA    0766
0762:  MOVLB  0
0764:  BRA    077C
0766:  MOVF   x84,F
0768:  BTFSS  FD8.2
076A:  BRA    0770
076C:  MOVLB  0
076E:  BRA    077C
....................       menu4.flagmenu--; 
0770:  DECF   x85,F
....................       if(menu4.flagmenu==0)menu4.flagtrava = 0; 
0772:  MOVF   x85,F
0774:  BTFSC  FD8.2
0776:  CLRF   x84
....................       flag2 = 0; 
0778:  BCF    1C.4
077A:  MOVLB  0
....................   } 
....................     /*---VOLTA MENU 4---*/ 
....................   if(flag2==1 && p2menu>0 && p2trava > 0){  //CONDIÇOES PARA TECLA VOLTA PARA IR PARA INCREMENTAR A FLAG ATÉ VOLTAR AO MENU1 
077C:  BTFSS  1C.4
077E:  BRA    07B6
0780:  MOVLB  5
0782:  MOVF   x78,F
0784:  BNZ   0790
0786:  MOVF   x79,F
0788:  BTFSS  FD8.2
078A:  BRA    0790
078C:  MOVLB  0
078E:  BRA    07B6
0790:  MOVF   x76,F
0792:  BNZ   079E
0794:  MOVF   x77,F
0796:  BTFSS  FD8.2
0798:  BRA    079E
079A:  MOVLB  0
079C:  BRA    07B6
....................       p2menu--; 
079E:  MOVF   x78,W
07A0:  BTFSC  FD8.2
07A2:  DECF   x79,F
07A4:  DECF   x78,F
....................       if(p2menu==0)p2trava = 0; 
07A6:  MOVF   x78,F
07A8:  BNZ   07B2
07AA:  MOVF   x79,F
07AC:  BNZ   07B2
07AE:  CLRF   x77
07B0:  CLRF   x76
....................       flag2 = 0; 
07B2:  BCF    1C.4
07B4:  MOVLB  0
....................   } 
....................   /*---TECLA CIMA--*/ 
....................   if(!input(bot2)){ 
07B6:  BSF    F95.1
07B8:  BTFSC  F83.1
07BA:  BRA    07E2
....................       debouncing = 10;                    //BOTAO PRESSIONADO: FLAG DE DEBOUCING CARREGADA COM O VALOR 25 
07BC:  MOVLB  5
07BE:  CLRF   x6D
07C0:  MOVLW  0A
07C2:  MOVWF  x6C
....................       while(debouncing > 0)debouncing--;  //ENQUANTO CONTADOR NAO É ZERADO FICA PRESO NO LAÇO DECREMENTANDO(TEMPO DE ESTABILIZAR BOTÃO) 
07C4:  MOVF   x6C,F
07C6:  BNZ   07CC
07C8:  MOVF   x6D,F
07CA:  BZ    07D6
07CC:  MOVF   x6C,W
07CE:  BTFSC  FD8.2
07D0:  DECF   x6D,F
07D2:  DECF   x6C,F
07D4:  BRA    07C4
....................       while(!input(bot2))                 //SE O BOTAO CONTINUAR PRESSIONADO FICA PRESO NO LOOP SEM FAZER NADA ATÉ QUE SEJA SOLTO O BOTÃO 
....................       flag4 = 1;                          //FLAG QUE SINALIZA QUE UM BITÃO FOI PRESSIONADO 
07D6:  BSF    F95.1
07D8:  BTFSC  F83.1
07DA:  BRA    07E0
07DC:  BSF    1C.6
07DE:  BRA    07D6
07E0:  MOVLB  0
....................   } 
....................   /*---NAVEGAÇÃO NO MENU 1---*/ 
....................   if(flag4== 1 && menu1.flagmenu > 0 && menu1.flagtrava ==1 && menu2.flagtrava ==0 && menu3.flagtrava ==0 && menu4.flagtrava ==0 && p2trava ==0){ 
07E2:  BTFSS  1C.6
07E4:  BRA    083C
07E6:  MOVLB  5
07E8:  MOVF   x7C,F
07EA:  BTFSS  FD8.2
07EC:  BRA    07F2
07EE:  MOVLB  0
07F0:  BRA    083C
07F2:  DECFSZ x7B,W
07F4:  BRA    07F8
07F6:  BRA    07FC
07F8:  MOVLB  0
07FA:  BRA    083C
07FC:  MOVF   x7E,F
07FE:  BTFSC  FD8.2
0800:  BRA    0806
0802:  MOVLB  0
0804:  BRA    083C
0806:  MOVF   x81,F
0808:  BTFSC  FD8.2
080A:  BRA    0810
080C:  MOVLB  0
080E:  BRA    083C
0810:  MOVF   x84,F
0812:  BTFSC  FD8.2
0814:  BRA    081A
0816:  MOVLB  0
0818:  BRA    083C
081A:  MOVF   x76,F
081C:  BTFSC  FD8.2
081E:  BRA    0824
0820:  MOVLB  0
0822:  BRA    083C
0824:  MOVF   x77,F
0826:  BTFSC  FD8.2
0828:  BRA    082E
082A:  MOVLB  0
082C:  BRA    083C
....................       menu1.flagmenu--; 
082E:  DECF   x7C,F
....................       if(menu1.flagmenu == 0)menu1.flagmenu = 4;         //PARA NAVEGAR NO MENU(P/CIMA P/BAIXO)GARANTIR QUE NAO TENHA NENHUMA FLAG DE SUBMENU SETADA 
0830:  MOVF   x7C,F
0832:  BNZ   0838
0834:  MOVLW  04
0836:  MOVWF  x7C
....................       flag4 = 0; 
0838:  BCF    1C.6
083A:  MOVLB  0
....................   } 
....................   /*---INCREMENTO DA VARIAVEL MES DO MENU DATA---*/ 
....................   if(flag4==1 && menu3.flagmenu == 1){                   //BLOCO COM A LOGICA DOS MESES COM MAIS E MENOS DIAS 
083C:  BTFSS  1C.6
083E:  BRA    088E
0840:  MOVLB  5
0842:  DECFSZ x82,W
0844:  BRA    0848
0846:  BRA    084C
0848:  MOVLB  0
084A:  BRA    088E
....................       mes++;                                             //DECREMENTA DIRETAMENTE A VARIAVEL 
084C:  INCF   x6A,F
....................       if(mes == 4 || mes == 6 || mes == 9 || mes == 12){  
084E:  MOVF   x6A,W
0850:  SUBLW  04
0852:  BZ    0866
0854:  MOVF   x6A,W
0856:  SUBLW  06
0858:  BZ    0866
085A:  MOVF   x6A,W
085C:  SUBLW  09
085E:  BZ    0866
0860:  MOVF   x6A,W
0862:  SUBLW  0C
0864:  BNZ   086C
....................          flag30 = 1; 
0866:  BSF    x62.0
....................          flag28 = 0; 
0868:  BCF    1C.7
....................       } 
....................       else if(mes == 2){ 
086A:  BRA    087C
086C:  MOVF   x6A,W
086E:  SUBLW  02
0870:  BNZ   0878
....................          flag28=1; 
0872:  BSF    1C.7
....................          flag30=0; 
0874:  BCF    x62.0
....................       } 
....................       else{ 
0876:  BRA    087C
....................          flag28=0; 
0878:  BCF    1C.7
....................          flag30=0; 
087A:  BCF    x62.0
....................       } 
....................       if(mes>12)mes=1; 
087C:  BTFSC  x6A.7
087E:  BRA    088A
0880:  MOVF   x6A,W
0882:  SUBLW  0C
0884:  BC    088A
0886:  MOVLW  01
0888:  MOVWF  x6A
....................       flag4=0; 
088A:  BCF    1C.6
088C:  MOVLB  0
....................   } 
....................   /*---INCREMENTO DA VARIAVEL DIA DO MENU DATA---*/ 
....................   if(flag4==1 && menu3.flagmenu == 2){                   //BLOCO COM A LOGICA DAS RESTRIÇOES DE DIAS PARA MESES COM 30, 31 E 28 DIAS 
088E:  BTFSS  1C.6
0890:  BRA    08DC
0892:  MOVLB  5
0894:  MOVF   x82,W
0896:  SUBLW  02
0898:  BTFSC  FD8.2
089A:  BRA    08A0
089C:  MOVLB  0
089E:  BRA    08DC
....................       dia++;                                             //DECREMENTA DIRETAMENTE A VARIAVEL 
08A0:  INCF   x69,F
....................       if(flag30==1){ 
08A2:  BTFSS  x62.0
08A4:  BRA    08B6
....................          if(dia>30)dia=1; 
08A6:  BTFSC  x69.7
08A8:  BRA    08B4
08AA:  MOVF   x69,W
08AC:  SUBLW  1E
08AE:  BC    08B4
08B0:  MOVLW  01
08B2:  MOVWF  x69
....................       } 
....................       else if(flag28==1){ 
08B4:  BRA    08D8
08B6:  BTFSS  1C.7
08B8:  BRA    08CA
....................          if(dia>28)dia=1; 
08BA:  BTFSC  x69.7
08BC:  BRA    08C8
08BE:  MOVF   x69,W
08C0:  SUBLW  1C
08C2:  BC    08C8
08C4:  MOVLW  01
08C6:  MOVWF  x69
....................       } 
....................       else if(dia>31)dia=1; 
08C8:  BRA    08D8
08CA:  BTFSC  x69.7
08CC:  BRA    08D8
08CE:  MOVF   x69,W
08D0:  SUBLW  1F
08D2:  BC    08D8
08D4:  MOVLW  01
08D6:  MOVWF  x69
....................       flag4=0; 
08D8:  BCF    1C.6
08DA:  MOVLB  0
....................   } 
....................   /*---INCREMENTO DA VARIAVEL ANO DO MENU DATA---*/ 
....................   if(flag4==1 && menu3.flagmenu==3){                     //BLOCO COM A LOGICA DO INCREMENTO DO ANO 
08DC:  BTFSS  1C.6
08DE:  BRA    0902
08E0:  MOVLB  5
08E2:  MOVF   x82,W
08E4:  SUBLW  03
08E6:  BTFSC  FD8.2
08E8:  BRA    08EE
08EA:  MOVLB  0
08EC:  BRA    0902
....................       ano++;                                             //DECREMENTA DIRETAMENTE A VARIAVEL 
08EE:  INCF   x6B,F
....................       if(ano>60)ano = 10; 
08F0:  BTFSC  x6B.7
08F2:  BRA    08FE
08F4:  MOVF   x6B,W
08F6:  SUBLW  3C
08F8:  BC    08FE
08FA:  MOVLW  0A
08FC:  MOVWF  x6B
....................       flag4=0; 
08FE:  BCF    1C.6
0900:  MOVLB  0
....................   } 
....................   /*---INCREMENTO DIA DA SEMANA---*/ 
....................   if(flag4==1 && menu3.flagmenu==4){ 
0902:  BTFSS  1C.6
0904:  BRA    0928
0906:  MOVLB  5
0908:  MOVF   x82,W
090A:  SUBLW  04
090C:  BTFSC  FD8.2
090E:  BRA    0914
0910:  MOVLB  0
0912:  BRA    0928
....................       s_dia++; 
0914:  INCF   x68,F
....................       if(s_dia>7)s_dia = 1; 
0916:  BTFSC  x68.7
0918:  BRA    0924
091A:  MOVF   x68,W
091C:  SUBLW  07
091E:  BC    0924
0920:  MOVLW  01
0922:  MOVWF  x68
....................       flag4 = 0; 
0924:  BCF    1C.6
0926:  MOVLB  0
....................   } 
....................   /*---INCREMENTO DA VARIAVEL HORA DO MENU HORA---*/ 
....................   if(flag4==1 && menu2.flagmenu==1){                     //BLOCO COM A LOGICA DO INCREMENTO DAS HORAS 00 ATÉ 23                                            //DECREMENTA DIRETAMENTE A VARIAVEL 
0928:  BTFSS  1C.6
092A:  BRA    094C
092C:  MOVLB  5
092E:  DECFSZ x7F,W
0930:  BRA    0934
0932:  BRA    0938
0934:  MOVLB  0
0936:  BRA    094C
....................       if(hr<23){hr++;} 
0938:  BTFSC  x67.7
093A:  BRA    0942
093C:  MOVF   x67,W
093E:  SUBLW  16
0940:  BNC   0946
0942:  INCF   x67,F
....................       else{hr=0;} 
0944:  BRA    0948
0946:  CLRF   x67
....................       flag4=0; 
0948:  BCF    1C.6
094A:  MOVLB  0
....................   } 
....................   /*---INCREMENTO DA VARIAVEL MINUTOS DO MENU HORA---*/  
....................   if(flag4==1 && menu2.flagmenu==2){ 
094C:  BTFSS  1C.6
094E:  BRA    0970
0950:  MOVLB  5
0952:  MOVF   x7F,W
0954:  SUBLW  02
0956:  BTFSC  FD8.2
0958:  BRA    095E
095A:  MOVLB  0
095C:  BRA    0970
....................      min++; 
095E:  INCF   x66,F
....................      if(min>59)min=0; 
0960:  BTFSC  x66.7
0962:  BRA    096C
0964:  MOVF   x66,W
0966:  SUBLW  3B
0968:  BTFSS  FD8.0
096A:  CLRF   x66
....................      flag4=0; 
096C:  BCF    1C.6
096E:  MOVLB  0
....................    }  
....................   /*---INCREMENTO DO SUBMENU3 TIMER ---*/ 
....................   if(flag4== 1 && menu4.flagtrava ==1 && menu4.flagmenu >= 0){ 
0970:  BTFSS  1C.6
0972:  BRA    098E
0974:  MOVLB  5
0976:  DECFSZ x84,W
0978:  BRA    097C
097A:  BRA    0980
097C:  MOVLB  0
097E:  BRA    098E
....................      menu4.flagmenu--; 
0980:  DECF   x85,F
....................      if(menu4.flagmenu == 0)menu4.flagmenu = 3;         //PARA NAVEGAR NO MENU(P/CIMA P/BAIXO)GARANTIR QUE NAO TENHA NENHUMA FLAG DE SUBMENU SETADA 
0982:  MOVF   x85,F
0984:  BNZ   098A
0986:  MOVLW  03
0988:  MOVWF  x85
....................      flag4 = 0; 
098A:  BCF    1C.6
098C:  MOVLB  0
....................   } 
....................   /*---TECLA BAIXO---*/ 
....................   if(!input(bot3)){  
098E:  BSF    F95.2
0990:  BTFSC  F83.2
0992:  BRA    09BA
....................       debouncing = 10;                    //BOTAO PRESSIONADO: FLAG DE DEBOUCING CARREGADA COM O VALOR 25 
0994:  MOVLB  5
0996:  CLRF   x6D
0998:  MOVLW  0A
099A:  MOVWF  x6C
....................       while(debouncing > 0)debouncing--;  //ENQUANTO CONTADOR NAO É ZERADO FICA PRESO NO LAÇO DECREMENTANDO(TEMPO DE ESTABILIZAR BOTÃO) 
099C:  MOVF   x6C,F
099E:  BNZ   09A4
09A0:  MOVF   x6D,F
09A2:  BZ    09AE
09A4:  MOVF   x6C,W
09A6:  BTFSC  FD8.2
09A8:  DECF   x6D,F
09AA:  DECF   x6C,F
09AC:  BRA    099C
....................       while(!input(bot3))                 //SE O BOTAO CONTINUAR PRESSIONADO FICA PRESO NO LOOP SEM FAZER NADA ATÉ QUE SEJA SOLTO O BOTÃO 
....................       flag3 = 1;                          //FLAG QUE SINALIZA QUE UM BITÃO FOI PRESSIONADO 
09AE:  BSF    F95.2
09B0:  BTFSC  F83.2
09B2:  BRA    09B8
09B4:  BSF    1C.5
09B6:  BRA    09AE
09B8:  MOVLB  0
....................   } 
....................   /*---NAVEGAÇÃO MENU 1---*/ 
....................   if(flag3 == 1 && menu1.flagmenu > 0 && menu1.flagtrava ==1 && menu2.flagtrava == 0 && menu3.flagtrava ==0 && menu4.flagtrava ==0 && p2trava==0){  
09BA:  BTFSS  1C.5
09BC:  BRA    0A16
09BE:  MOVLB  5
09C0:  MOVF   x7C,F
09C2:  BTFSS  FD8.2
09C4:  BRA    09CA
09C6:  MOVLB  0
09C8:  BRA    0A16
09CA:  DECFSZ x7B,W
09CC:  BRA    09D0
09CE:  BRA    09D4
09D0:  MOVLB  0
09D2:  BRA    0A16
09D4:  MOVF   x7E,F
09D6:  BTFSC  FD8.2
09D8:  BRA    09DE
09DA:  MOVLB  0
09DC:  BRA    0A16
09DE:  MOVF   x81,F
09E0:  BTFSC  FD8.2
09E2:  BRA    09E8
09E4:  MOVLB  0
09E6:  BRA    0A16
09E8:  MOVF   x84,F
09EA:  BTFSC  FD8.2
09EC:  BRA    09F2
09EE:  MOVLB  0
09F0:  BRA    0A16
09F2:  MOVF   x76,F
09F4:  BTFSC  FD8.2
09F6:  BRA    09FC
09F8:  MOVLB  0
09FA:  BRA    0A16
09FC:  MOVF   x77,F
09FE:  BTFSC  FD8.2
0A00:  BRA    0A06
0A02:  MOVLB  0
0A04:  BRA    0A16
....................       menu1.flagmenu++;                   //PARA NAVEGAR NO MENU(P/CIMA P/BAIXO)GARANTIR QUE NAO TENHA NENHUMA FLAG DE SUBMENU SETADA 
0A06:  INCF   x7C,F
....................       if(menu1.flagmenu > 4)menu1.flagmenu = 1; 
0A08:  MOVF   x7C,W
0A0A:  SUBLW  04
0A0C:  BC    0A12
0A0E:  MOVLW  01
0A10:  MOVWF  x7C
....................       flag3 = 0; 
0A12:  BCF    1C.5
0A14:  MOVLB  0
....................   } 
....................   /*DECREMENTA A VARIAVEL MES DO MENU DATA*/ 
....................   if(flag3==1 && menu3.flagmenu == 1){                   //BLOCO COM A LOGICA DOS MESES COM MAIS E MENOS DIAS 
0A16:  BTFSS  1C.5
0A18:  BRA    0A82
0A1A:  MOVLB  5
0A1C:  DECFSZ x82,W
0A1E:  BRA    0A22
0A20:  BRA    0A26
0A22:  MOVLB  0
0A24:  BRA    0A82
....................     mes--;                                               //DECREMENTA DIRETAMENTE A VARIAVEL       
0A26:  DECF   x6A,F
....................       if(mes == 4 || mes == 6 || mes == 9 || mes == 12){ 
0A28:  MOVF   x6A,W
0A2A:  SUBLW  04
0A2C:  BZ    0A40
0A2E:  MOVF   x6A,W
0A30:  SUBLW  06
0A32:  BZ    0A40
0A34:  MOVF   x6A,W
0A36:  SUBLW  09
0A38:  BZ    0A40
0A3A:  MOVF   x6A,W
0A3C:  SUBLW  0C
0A3E:  BNZ   0A46
....................          flag30=1; 
0A40:  BSF    x62.0
....................          flag28=0; 
0A42:  BCF    1C.7
....................       } 
....................       else if(mes == 2){ 
0A44:  BRA    0A56
0A46:  MOVF   x6A,W
0A48:  SUBLW  02
0A4A:  BNZ   0A52
....................          flag28=1; 
0A4C:  BSF    1C.7
....................          flag30=0; 
0A4E:  BCF    x62.0
....................       } 
....................       else{ 
0A50:  BRA    0A56
....................          flag28=0; 
0A52:  BCF    1C.7
....................          flag30=0; 
0A54:  BCF    x62.0
....................       } 
....................       if(mes < 1)mes=12; 
0A56:  BTFSC  x6A.7
0A58:  BRA    0A60
0A5A:  MOVF   x6A,W
0A5C:  SUBLW  00
0A5E:  BNC   0A64
0A60:  MOVLW  0C
0A62:  MOVWF  x6A
....................       flag3 = 0; 
0A64:  BCF    1C.5
....................       escreve_ds(hr, min, s_dia, dia, mes, ano); 
0A66:  MOVFF  567,641
0A6A:  MOVFF  566,642
0A6E:  MOVFF  568,643
0A72:  MOVFF  569,644
0A76:  MOVFF  56A,645
0A7A:  MOVFF  56B,646
0A7E:  MOVLB  0
0A80:  RCALL  036C
....................   } 
....................   /*DECREMENTA A VARIAVEL DIA DO MENU DATA*/ 
....................   if(flag3==1 && menu3.flagmenu == 2){                   //BLOCO COM A LOGICA DAS RESTRIÇOES DE DIAS PARA MESES COM 30, 31 E 28 DIAS 
0A82:  BTFSS  1C.5
0A84:  BRA    0AD8
0A86:  MOVLB  5
0A88:  MOVF   x82,W
0A8A:  SUBLW  02
0A8C:  BTFSC  FD8.2
0A8E:  BRA    0A94
0A90:  MOVLB  0
0A92:  BRA    0AD8
....................       dia--;                                             //DECREMENTA DIRETAMENTE A VARIAVEL  
0A94:  DECF   x69,F
....................       if(flag30 == 1){ 
0A96:  BTFSS  x62.0
0A98:  BRA    0AA4
....................          if(dia==0)dia=30; 
0A9A:  MOVF   x69,F
0A9C:  BNZ   0AA2
0A9E:  MOVLW  1E
0AA0:  MOVWF  x69
....................       } 
....................       else if(flag28 == 1){ 
0AA2:  BRA    0ABA
0AA4:  BTFSS  1C.7
0AA6:  BRA    0AB2
....................          if(dia==0)dia=28; 
0AA8:  MOVF   x69,F
0AAA:  BNZ   0AB0
0AAC:  MOVLW  1C
0AAE:  MOVWF  x69
....................       } 
....................       else if(dia==0)dia=31; 
0AB0:  BRA    0ABA
0AB2:  MOVF   x69,F
0AB4:  BNZ   0ABA
0AB6:  MOVLW  1F
0AB8:  MOVWF  x69
....................       //if(mes<1)mes=12; 
....................       flag3 = 0; 
0ABA:  BCF    1C.5
....................       escreve_ds(hr, min, s_dia, dia, mes, ano); 
0ABC:  MOVFF  567,641
0AC0:  MOVFF  566,642
0AC4:  MOVFF  568,643
0AC8:  MOVFF  569,644
0ACC:  MOVFF  56A,645
0AD0:  MOVFF  56B,646
0AD4:  MOVLB  0
0AD6:  RCALL  036C
....................   } 
....................   /*---DECREMENTO DA VARIAVEL ANO DO MENU DATA---*/       
....................   if(flag3==1 && menu3.flagmenu==3){                     //BLOCO COM A LOGICA DO DECREMENTO DO ANO 
0AD8:  BTFSS  1C.5
0ADA:  BRA    0AFA
0ADC:  MOVLB  5
0ADE:  MOVF   x82,W
0AE0:  SUBLW  03
0AE2:  BTFSC  FD8.2
0AE4:  BRA    0AEA
0AE6:  MOVLB  0
0AE8:  BRA    0AFA
....................       ano--;                                             //DECREMENTA DIRETAMENTE A VARIAVEL 
0AEA:  DECF   x6B,F
....................       if(ano==10)ano = 60; 
0AEC:  MOVF   x6B,W
0AEE:  SUBLW  0A
0AF0:  BNZ   0AF6
0AF2:  MOVLW  3C
0AF4:  MOVWF  x6B
....................       flag3 = 0; 
0AF6:  BCF    1C.5
0AF8:  MOVLB  0
....................   } 
....................   if(flag3==1 && menu3.flagmenu==4){ 
0AFA:  BTFSS  1C.5
0AFC:  BRA    0B34
0AFE:  MOVLB  5
0B00:  MOVF   x82,W
0B02:  SUBLW  04
0B04:  BTFSC  FD8.2
0B06:  BRA    0B0C
0B08:  MOVLB  0
0B0A:  BRA    0B34
....................       s_dia--; 
0B0C:  DECF   x68,F
....................       if(s_dia==0)s_dia = 7; 
0B0E:  MOVF   x68,F
0B10:  BNZ   0B16
0B12:  MOVLW  07
0B14:  MOVWF  x68
....................       flag3 = 0; 
0B16:  BCF    1C.5
....................       escreve_ds(hr, min, s_dia, dia, mes, ano); 
0B18:  MOVFF  567,641
0B1C:  MOVFF  566,642
0B20:  MOVFF  568,643
0B24:  MOVFF  569,644
0B28:  MOVFF  56A,645
0B2C:  MOVFF  56B,646
0B30:  MOVLB  0
0B32:  RCALL  036C
....................   } 
....................   /*---DECREMENTO DA VARIAVEL HORA DO MENU HORA---*/ 
....................   if(flag3==1 && menu2.flagmenu ==1){                    //BLOCO COM A LOGICA DO DECREMENTO DAS HORAS 00 ATÉ 23 
0B34:  BTFSS  1C.5
0B36:  BRA    0B52
0B38:  MOVLB  5
0B3A:  DECFSZ x7F,W
0B3C:  BRA    0B40
0B3E:  BRA    0B44
0B40:  MOVLB  0
0B42:  BRA    0B52
....................       hr--;                                            //DECREMENTA DIRETAMENTE A VARIAVEL  
0B44:  DECF   x67,F
....................       if(hr<0)hr=23; 
0B46:  BTFSS  x67.7
0B48:  BRA    0B4E
0B4A:  MOVLW  17
0B4C:  MOVWF  x67
....................       flag3=0; 
0B4E:  BCF    1C.5
0B50:  MOVLB  0
....................   } 
....................   /*---DECREMENTO DA VARIAVEL MINUTOS DO MENU HORA---*/ 
....................   if(flag3==1 && menu2.flagmenu ==2){                  //BLOCO COM A LOGICA DO DECREMENTO DOS MINUTOS 00 ATÉ 59  
0B52:  BTFSS  1C.5
0B54:  BRA    0B72
0B56:  MOVLB  5
0B58:  MOVF   x7F,W
0B5A:  SUBLW  02
0B5C:  BTFSC  FD8.2
0B5E:  BRA    0B64
0B60:  MOVLB  0
0B62:  BRA    0B72
....................       min--;//DECREMENTA DIRETAMENTE A VARIAVEL 
0B64:  DECF   x66,F
....................       if(min<0)min=59; 
0B66:  BTFSS  x66.7
0B68:  BRA    0B6E
0B6A:  MOVLW  3B
0B6C:  MOVWF  x66
....................       flag3=0; 
0B6E:  BCF    1C.5
0B70:  MOVLB  0
....................   }    
....................   /*---DECREMENTO DO SUBMENU3 TIMER ---*/ 
....................   if(flag3== 1 && menu4.flagtrava ==1 && menu4.flagmenu >= 0){ 
0B72:  BTFSS  1C.5
0B74:  BRA    0B90
0B76:  MOVLB  5
0B78:  DECFSZ x84,W
0B7A:  BRA    0B7E
0B7C:  BRA    0B82
0B7E:  MOVLB  0
0B80:  BRA    0B90
....................       menu4.flagmenu++; 
0B82:  INCF   x85,F
....................       if(menu4.flagmenu > 3)menu4.flagmenu = 1;         //PARA NAVEGAR NO MENU(P/CIMA P/BAIXO)GARANTIR QUE NAO TENHA NENHUMA FLAG DE SUBMENU SETADA 
0B84:  MOVF   x85,W
0B86:  SUBLW  03
0B88:  BC    0B8E
0B8A:  MOVLW  01
0B8C:  MOVWF  x85
....................       flag3 = 0; 
0B8E:  BCF    1C.5
0B90:  MOVLB  0
....................   } 
.................... } 
0B92:  GOTO   0BD8 (RETURN)
....................  
.................... void atualiza_menu(void){ 
....................    /*---VARIAVEIS LOCAIS---*/ 
....................    char txt1[]    = "Relogio"; 
*
2054:  MOVLW  52
2056:  MOVLB  5
2058:  MOVWF  x9C
205A:  MOVLW  65
205C:  MOVWF  x9D
205E:  MOVLW  6C
2060:  MOVWF  x9E
2062:  MOVLW  6F
2064:  MOVWF  x9F
2066:  MOVLW  67
2068:  MOVWF  xA0
206A:  MOVLW  69
206C:  MOVWF  xA1
206E:  MOVLW  6F
2070:  MOVWF  xA2
2072:  CLRF   xA3
....................    char txt2[]    = "Data"; 
2074:  MOVLW  44
2076:  MOVWF  xA4
2078:  MOVLW  61
207A:  MOVWF  xA5
207C:  MOVLW  74
207E:  MOVWF  xA6
2080:  MOVLW  61
2082:  MOVWF  xA7
2084:  CLRF   xA8
....................    char txt3[]    = "Timer"; 
2086:  MOVLW  54
2088:  MOVWF  xA9
208A:  MOVLW  69
208C:  MOVWF  xAA
208E:  MOVLW  6D
2090:  MOVWF  xAB
2092:  MOVLW  65
2094:  MOVWF  xAC
2096:  MOVLW  72
2098:  MOVWF  xAD
209A:  CLRF   xAE
....................    char txt4[]    = "Sobre"; 
209C:  MOVLW  53
209E:  MOVWF  xAF
20A0:  MOVLW  6F
20A2:  MOVWF  xB0
20A4:  MOVLW  62
20A6:  MOVWF  xB1
20A8:  MOVLW  72
20AA:  MOVWF  xB2
20AC:  MOVLW  65
20AE:  MOVWF  xB3
20B0:  CLRF   xB4
....................    char txt5[]    = "Horas"; 
20B2:  MOVLW  48
20B4:  MOVWF  xB5
20B6:  MOVLW  6F
20B8:  MOVWF  xB6
20BA:  MOVLW  72
20BC:  MOVWF  xB7
20BE:  MOVLW  61
20C0:  MOVWF  xB8
20C2:  MOVLW  73
20C4:  MOVWF  xB9
20C6:  CLRF   xBA
....................    char txt6[]    = "Minutos"; 
20C8:  MOVLW  4D
20CA:  MOVWF  xBB
20CC:  MOVLW  69
20CE:  MOVWF  xBC
20D0:  MOVLW  6E
20D2:  MOVWF  xBD
20D4:  MOVLW  75
20D6:  MOVWF  xBE
20D8:  MOVLW  74
20DA:  MOVWF  xBF
20DC:  MOVLW  6F
20DE:  MOVWF  xC0
20E0:  MOVLW  73
20E2:  MOVWF  xC1
20E4:  CLRF   xC2
....................    char txt7[]    = "Mes"; 
20E6:  MOVLW  4D
20E8:  MOVWF  xC3
20EA:  MOVLW  65
20EC:  MOVWF  xC4
20EE:  MOVLW  73
20F0:  MOVWF  xC5
20F2:  CLRF   xC6
....................    char txt8[]    = "Dia"; 
20F4:  MOVLW  44
20F6:  MOVWF  xC7
20F8:  MOVLW  69
20FA:  MOVWF  xC8
20FC:  MOVLW  61
20FE:  MOVWF  xC9
2100:  CLRF   xCA
....................    char txt9[]    = "Ano"; 
2102:  MOVLW  41
2104:  MOVWF  xCB
2106:  MOVLW  6E
2108:  MOVWF  xCC
210A:  MOVLW  6F
210C:  MOVWF  xCD
210E:  CLRF   xCE
....................    char txt10[]   = "Init  temp"; 
2110:  MOVLW  49
2112:  MOVWF  xCF
2114:  MOVLW  6E
2116:  MOVWF  xD0
2118:  MOVLW  69
211A:  MOVWF  xD1
211C:  MOVLW  74
211E:  MOVWF  xD2
2120:  MOVLW  20
2122:  MOVWF  xD3
2124:  MOVWF  xD4
2126:  MOVLW  74
2128:  MOVWF  xD5
212A:  MOVLW  65
212C:  MOVWF  xD6
212E:  MOVLW  6D
2130:  MOVWF  xD7
2132:  MOVLW  70
2134:  MOVWF  xD8
2136:  CLRF   xD9
....................    char txt11[]   = "Stop  temp"; 
2138:  MOVLW  53
213A:  MOVWF  xDA
213C:  MOVLW  74
213E:  MOVWF  xDB
2140:  MOVLW  6F
2142:  MOVWF  xDC
2144:  MOVLW  70
2146:  MOVWF  xDD
2148:  MOVLW  20
214A:  MOVWF  xDE
214C:  MOVWF  xDF
214E:  MOVLW  74
2150:  MOVWF  xE0
2152:  MOVLW  65
2154:  MOVWF  xE1
2156:  MOVLW  6D
2158:  MOVWF  xE2
215A:  MOVLW  70
215C:  MOVWF  xE3
215E:  CLRF   xE4
....................    char txt12[]   = "Reset temp"; 
2160:  MOVLW  52
2162:  MOVWF  xE5
2164:  MOVLW  65
2166:  MOVWF  xE6
2168:  MOVLW  73
216A:  MOVWF  xE7
216C:  MOVLW  65
216E:  MOVWF  xE8
2170:  MOVLW  74
2172:  MOVWF  xE9
2174:  MOVLW  20
2176:  MOVWF  xEA
2178:  MOVLW  74
217A:  MOVWF  xEB
217C:  MOVLW  65
217E:  MOVWF  xEC
2180:  MOVLW  6D
2182:  MOVWF  xED
2184:  MOVLW  70
2186:  MOVWF  xEE
2188:  CLRF   xEF
....................    char txt13[]   = "Dia sem"; 
218A:  MOVLW  44
218C:  MOVWF  xF0
218E:  MOVLW  69
2190:  MOVWF  xF1
2192:  MOVLW  61
2194:  MOVWF  xF2
2196:  MOVLW  20
2198:  MOVWF  xF3
219A:  MOVLW  73
219C:  MOVWF  xF4
219E:  MOVLW  65
21A0:  MOVWF  xF5
21A2:  MOVLW  6D
21A4:  MOVWF  xF6
21A6:  CLRF   xF7
....................    char txt14[]   = "Autoban"; 
21A8:  MOVLW  41
21AA:  MOVWF  xF8
21AC:  MOVLW  75
21AE:  MOVWF  xF9
21B0:  MOVLW  74
21B2:  MOVWF  xFA
21B4:  MOVLW  6F
21B6:  MOVWF  xFB
21B8:  MOVLW  62
21BA:  MOVWF  xFC
21BC:  MOVLW  61
21BE:  MOVWF  xFD
21C0:  MOVLW  6E
21C2:  MOVWF  xFE
21C4:  CLRF   xFF
....................    char txt15[]   = "MaxxForte"; 
21C6:  MOVLW  4D
21C8:  MOVLB  6
21CA:  MOVWF  x00
21CC:  MOVLW  61
21CE:  MOVWF  x01
21D0:  MOVLW  78
21D2:  MOVWF  x02
21D4:  MOVWF  x03
21D6:  MOVLW  46
21D8:  MOVWF  x04
21DA:  MOVLW  6F
21DC:  MOVWF  x05
21DE:  MOVLW  72
21E0:  MOVWF  x06
21E2:  MOVLW  74
21E4:  MOVWF  x07
21E6:  MOVLW  65
21E8:  MOVWF  x08
21EA:  CLRF   x09
....................     
....................    switch(menu1.flagmenu){ 
21EC:  MOVLB  5
21EE:  MOVF   x7C,W
21F0:  ADDLW  FB
21F2:  BTFSC  FD8.0
21F4:  GOTO   2B72
21F8:  ADDLW  05
21FA:  MOVLB  0
21FC:  GOTO   2BD6
....................       case 0 : 
....................          init = 1; 
2200:  BSF    1C.1
....................          if(aux == 50){ 
2202:  MOVLB  5
2204:  MOVF   x72,W
2206:  SUBLW  32
2208:  BNZ   2214
220A:  MOVF   x73,F
220C:  BNZ   2214
....................             le_DS1307(); 
220E:  MOVLB  0
2210:  BRA    1CAA
2212:  MOVLB  5
....................          } 
....................       break; 
2214:  GOTO   2B72
....................       case 1 : 
....................          if(menu2.flagtrava == 0){ 
2218:  MOVLB  5
221A:  MOVF   x7E,F
221C:  BNZ   22AA
....................          OLED_ClearDisplay();    // Clear the buffer. 
221E:  MOVLB  0
2220:  CALL   10C8
....................          OLED_DrawText(2, 4, txt1, 2); 
2224:  MOVLW  02
2226:  MOVLB  6
2228:  MOVWF  x0A
222A:  MOVLW  04
222C:  MOVWF  x0B
222E:  MOVLW  05
2230:  MOVWF  x0D
2232:  MOVLW  9C
2234:  MOVWF  x0C
2236:  MOVLW  02
2238:  MOVWF  x0E
223A:  MOVLB  0
223C:  CALL   17A8
....................          OLED_DrawRect(0,2,128,18); 
2240:  MOVLB  6
2242:  CLRF   x0A
2244:  MOVLW  02
2246:  MOVWF  x0B
2248:  MOVLW  80
224A:  MOVWF  x0C
224C:  MOVLW  12
224E:  MOVWF  x0D
2250:  MOVLB  0
2252:  RCALL  1E16
....................          OLED_DrawText(2, 25, txt2, 2); 
2254:  MOVLW  02
2256:  MOVLB  6
2258:  MOVWF  x0A
225A:  MOVLW  19
225C:  MOVWF  x0B
225E:  MOVLW  05
2260:  MOVWF  x0D
2262:  MOVLW  A4
2264:  MOVWF  x0C
2266:  MOVLW  02
2268:  MOVWF  x0E
226A:  MOVLB  0
226C:  CALL   17A8
....................          //SSD1306_DrawRect(0,23,128,18); 
....................          OLED_DrawText(2, 46, txt3, 2); 
2270:  MOVLW  02
2272:  MOVLB  6
2274:  MOVWF  x0A
2276:  MOVLW  2E
2278:  MOVWF  x0B
227A:  MOVLW  05
227C:  MOVWF  x0D
227E:  MOVLW  A9
2280:  MOVWF  x0C
2282:  MOVLW  02
2284:  MOVWF  x0E
2286:  MOVLB  0
2288:  CALL   17A8
....................          //SSD1306_DrawRect(0,44,128,18); 
....................          OLED_Display(); 
228C:  CALL   110E
2290:  CLRF   16
2292:  BTFSC  FF2.7
2294:  BSF    16.7
2296:  BCF    FF2.7
....................          delay_ms(2);  
2298:  MOVLW  02
229A:  MOVLB  6
229C:  MOVWF  x47
229E:  MOVLB  0
22A0:  CALL   0344
22A4:  BTFSC  16.7
22A6:  BSF    FF2.7
22A8:  MOVLB  5
....................          } 
....................          switch(menu2.flagmenu){    
22AA:  MOVF   x7F,W
22AC:  XORLW  01
22AE:  MOVLB  0
22B0:  BZ    22B8
22B2:  XORLW  03
22B4:  BZ    2314
22B6:  BRA    2370
....................             case 1: 
....................                atualiza_disp(); 
22B8:  RCALL  1E80
....................                OLED_ClearDisplay();    // Clear the buffer. 
22BA:  CALL   10C8
....................                OLED_DrawText(32, 4, txt5, 2); 
22BE:  MOVLW  20
22C0:  MOVLB  6
22C2:  MOVWF  x0A
22C4:  MOVLW  04
22C6:  MOVWF  x0B
22C8:  MOVLW  05
22CA:  MOVWF  x0D
22CC:  MOVLW  B5
22CE:  MOVWF  x0C
22D0:  MOVLW  02
22D2:  MOVWF  x0E
22D4:  MOVLB  0
22D6:  CALL   17A8
....................                OLED_DrawText(32, 25, horas, 2); 
22DA:  MOVLW  20
22DC:  MOVLB  6
22DE:  MOVWF  x0A
22E0:  MOVLW  19
22E2:  MOVWF  x0B
22E4:  MOVLW  05
22E6:  MOVWF  x0D
22E8:  MOVLW  1F
22EA:  MOVWF  x0C
22EC:  MOVLW  02
22EE:  MOVWF  x0E
22F0:  MOVLB  0
22F2:  CALL   17A8
....................                OLED_Display(); 
22F6:  CALL   110E
22FA:  CLRF   16
22FC:  BTFSC  FF2.7
22FE:  BSF    16.7
2300:  BCF    FF2.7
....................                delay_ms(2); 
2302:  MOVLW  02
2304:  MOVLB  6
2306:  MOVWF  x47
2308:  MOVLB  0
230A:  CALL   0344
230E:  BTFSC  16.7
2310:  BSF    FF2.7
....................             break; 
2312:  BRA    2370
....................             case 2: 
....................                atualiza_disp(); 
2314:  RCALL  1E80
....................                OLED_ClearDisplay();    // Clear the buffer. 
2316:  CALL   10C8
....................                OLED_DrawText(20, 4, txt6, 2); 
231A:  MOVLW  14
231C:  MOVLB  6
231E:  MOVWF  x0A
2320:  MOVLW  04
2322:  MOVWF  x0B
2324:  MOVLW  05
2326:  MOVWF  x0D
2328:  MOVLW  BB
232A:  MOVWF  x0C
232C:  MOVLW  02
232E:  MOVWF  x0E
2330:  MOVLB  0
2332:  CALL   17A8
....................                OLED_DrawText(32, 25, horas, 2); 
2336:  MOVLW  20
2338:  MOVLB  6
233A:  MOVWF  x0A
233C:  MOVLW  19
233E:  MOVWF  x0B
2340:  MOVLW  05
2342:  MOVWF  x0D
2344:  MOVLW  1F
2346:  MOVWF  x0C
2348:  MOVLW  02
234A:  MOVWF  x0E
234C:  MOVLB  0
234E:  CALL   17A8
....................                OLED_Display(); 
2352:  CALL   110E
2356:  CLRF   16
2358:  BTFSC  FF2.7
235A:  BSF    16.7
235C:  BCF    FF2.7
....................                delay_ms(2); 
235E:  MOVLW  02
2360:  MOVLB  6
2362:  MOVWF  x47
2364:  MOVLB  0
2366:  CALL   0344
236A:  BTFSC  16.7
236C:  BSF    FF2.7
....................             break; 
236E:  BRA    2370
....................           } 
....................       break; 
2370:  MOVLB  5
2372:  GOTO   2B72
....................       case 2 : 
....................          if(menu3.flagtrava == 0){ 
2376:  MOVLB  5
2378:  MOVF   x81,F
237A:  BNZ   2408
....................          OLED_ClearDisplay();    // Clear the buffer. 
237C:  MOVLB  0
237E:  CALL   10C8
....................          OLED_DrawText(2, 4, txt1, 2); 
2382:  MOVLW  02
2384:  MOVLB  6
2386:  MOVWF  x0A
2388:  MOVLW  04
238A:  MOVWF  x0B
238C:  MOVLW  05
238E:  MOVWF  x0D
2390:  MOVLW  9C
2392:  MOVWF  x0C
2394:  MOVLW  02
2396:  MOVWF  x0E
2398:  MOVLB  0
239A:  CALL   17A8
....................          //SSD1306_DrawRect(0,2,128,18); 
....................          OLED_DrawText(2, 25, txt2, 2); 
239E:  MOVLW  02
23A0:  MOVLB  6
23A2:  MOVWF  x0A
23A4:  MOVLW  19
23A6:  MOVWF  x0B
23A8:  MOVLW  05
23AA:  MOVWF  x0D
23AC:  MOVLW  A4
23AE:  MOVWF  x0C
23B0:  MOVLW  02
23B2:  MOVWF  x0E
23B4:  MOVLB  0
23B6:  CALL   17A8
....................          OLED_DrawRect(0,23,128,18); 
23BA:  MOVLB  6
23BC:  CLRF   x0A
23BE:  MOVLW  17
23C0:  MOVWF  x0B
23C2:  MOVLW  80
23C4:  MOVWF  x0C
23C6:  MOVLW  12
23C8:  MOVWF  x0D
23CA:  MOVLB  0
23CC:  RCALL  1E16
....................          OLED_DrawText(2, 46, txt3, 2); 
23CE:  MOVLW  02
23D0:  MOVLB  6
23D2:  MOVWF  x0A
23D4:  MOVLW  2E
23D6:  MOVWF  x0B
23D8:  MOVLW  05
23DA:  MOVWF  x0D
23DC:  MOVLW  A9
23DE:  MOVWF  x0C
23E0:  MOVLW  02
23E2:  MOVWF  x0E
23E4:  MOVLB  0
23E6:  CALL   17A8
....................          //SSD1306_DrawRect(0,44,128,18); 
....................          OLED_Display(); 
23EA:  CALL   110E
23EE:  CLRF   16
23F0:  BTFSC  FF2.7
23F2:  BSF    16.7
23F4:  BCF    FF2.7
....................          delay_ms(2); 
23F6:  MOVLW  02
23F8:  MOVLB  6
23FA:  MOVWF  x47
23FC:  MOVLB  0
23FE:  CALL   0344
2402:  BTFSC  16.7
2404:  BSF    FF2.7
2406:  MOVLB  5
....................          } 
....................          switch(menu3.flagmenu){    
2408:  MOVLW  01
240A:  SUBWF  x82,W
240C:  ADDLW  FC
240E:  BTFSC  FD8.0
2410:  BRA    27D2
2412:  ADDLW  04
2414:  MOVLB  0
2416:  GOTO   2BAA
....................             case 1: 
....................                atualiza_disp(); 
241A:  RCALL  1E80
....................                OLED_ClearDisplay();    // Clear the buffer. 
241C:  CALL   10C8
....................                OLED_DrawText(45, 4, txt7, 2); 
2420:  MOVLW  2D
2422:  MOVLB  6
2424:  MOVWF  x0A
2426:  MOVLW  04
2428:  MOVWF  x0B
242A:  MOVLW  05
242C:  MOVWF  x0D
242E:  MOVLW  C3
2430:  MOVWF  x0C
2432:  MOVLW  02
2434:  MOVWF  x0E
2436:  MOVLB  0
2438:  CALL   17A8
....................                OLED_DrawText(17, 25, data, 2); 
243C:  MOVLW  11
243E:  MOVLB  6
2440:  MOVWF  x0A
2442:  MOVLW  19
2444:  MOVWF  x0B
2446:  MOVLW  05
2448:  MOVWF  x0D
244A:  MOVLW  25
244C:  MOVWF  x0C
244E:  MOVLW  02
2450:  MOVWF  x0E
2452:  MOVLB  0
2454:  CALL   17A8
....................                OLED_Display(); 
2458:  CALL   110E
245C:  CLRF   16
245E:  BTFSC  FF2.7
2460:  BSF    16.7
2462:  BCF    FF2.7
....................                delay_ms(2); 
2464:  MOVLW  02
2466:  MOVLB  6
2468:  MOVWF  x47
246A:  MOVLB  0
246C:  CALL   0344
2470:  BTFSC  16.7
2472:  BSF    FF2.7
....................             break; 
2474:  MOVLB  5
2476:  BRA    27D2
....................             case 2: 
....................                atualiza_disp(); 
2478:  RCALL  1E80
....................                OLED_ClearDisplay();    // Clear the buffer. 
247A:  CALL   10C8
....................                OLED_DrawText(45, 4, txt8, 2); 
247E:  MOVLW  2D
2480:  MOVLB  6
2482:  MOVWF  x0A
2484:  MOVLW  04
2486:  MOVWF  x0B
2488:  MOVLW  05
248A:  MOVWF  x0D
248C:  MOVLW  C7
248E:  MOVWF  x0C
2490:  MOVLW  02
2492:  MOVWF  x0E
2494:  MOVLB  0
2496:  CALL   17A8
....................                OLED_DrawText(17, 25, data, 2); 
249A:  MOVLW  11
249C:  MOVLB  6
249E:  MOVWF  x0A
24A0:  MOVLW  19
24A2:  MOVWF  x0B
24A4:  MOVLW  05
24A6:  MOVWF  x0D
24A8:  MOVLW  25
24AA:  MOVWF  x0C
24AC:  MOVLW  02
24AE:  MOVWF  x0E
24B0:  MOVLB  0
24B2:  CALL   17A8
....................                OLED_Display(); 
24B6:  CALL   110E
24BA:  CLRF   16
24BC:  BTFSC  FF2.7
24BE:  BSF    16.7
24C0:  BCF    FF2.7
....................                delay_ms(2); 
24C2:  MOVLW  02
24C4:  MOVLB  6
24C6:  MOVWF  x47
24C8:  MOVLB  0
24CA:  CALL   0344
24CE:  BTFSC  16.7
24D0:  BSF    FF2.7
....................             break; 
24D2:  MOVLB  5
24D4:  BRA    27D2
....................             case 3: 
....................                atualiza_disp(); 
24D6:  RCALL  1E80
....................                OLED_ClearDisplay();    // Clear the buffer. 
24D8:  CALL   10C8
....................                OLED_DrawText(45, 4, txt9, 2); 
24DC:  MOVLW  2D
24DE:  MOVLB  6
24E0:  MOVWF  x0A
24E2:  MOVLW  04
24E4:  MOVWF  x0B
24E6:  MOVLW  05
24E8:  MOVWF  x0D
24EA:  MOVLW  CB
24EC:  MOVWF  x0C
24EE:  MOVLW  02
24F0:  MOVWF  x0E
24F2:  MOVLB  0
24F4:  CALL   17A8
....................                OLED_DrawText(17, 25, data, 2); 
24F8:  MOVLW  11
24FA:  MOVLB  6
24FC:  MOVWF  x0A
24FE:  MOVLW  19
2500:  MOVWF  x0B
2502:  MOVLW  05
2504:  MOVWF  x0D
2506:  MOVLW  25
2508:  MOVWF  x0C
250A:  MOVLW  02
250C:  MOVWF  x0E
250E:  MOVLB  0
2510:  CALL   17A8
....................                OLED_Display(); 
2514:  CALL   110E
2518:  CLRF   16
251A:  BTFSC  FF2.7
251C:  BSF    16.7
251E:  BCF    FF2.7
....................                delay_ms(2); 
2520:  MOVLW  02
2522:  MOVLB  6
2524:  MOVWF  x47
2526:  MOVLB  0
2528:  CALL   0344
252C:  BTFSC  16.7
252E:  BSF    FF2.7
....................             break; 
2530:  MOVLB  5
2532:  BRA    27D2
....................             case 4: 
....................                switch(s_dia){ 
2534:  MOVLW  01
2536:  MOVLB  5
2538:  SUBWF  x68,W
253A:  ADDLW  F9
253C:  BTFSC  FD8.0
253E:  BRA    27CE
2540:  ADDLW  07
2542:  MOVLB  0
2544:  GOTO   2B78
....................                   case 1: 
....................                      OLED_ClearDisplay();    // Clear the buffer. 
2548:  CALL   10C8
....................                      OLED_DrawText(22, 4, txt13, 2); 
254C:  MOVLW  16
254E:  MOVLB  6
2550:  MOVWF  x0A
2552:  MOVLW  04
2554:  MOVWF  x0B
2556:  MOVLW  05
2558:  MOVWF  x0D
255A:  MOVLW  F0
255C:  MOVWF  x0C
255E:  MOVLW  02
2560:  MOVWF  x0E
2562:  MOVLB  0
2564:  CALL   17A8
....................                      OLED_DrawText(45, 25, dom, 2); 
2568:  MOVLW  2D
256A:  MOVLB  6
256C:  MOVWF  x0A
256E:  MOVLW  19
2570:  MOVWF  x0B
2572:  MOVLW  05
2574:  MOVWF  x0D
2576:  MOVLW  5E
2578:  MOVWF  x0C
257A:  MOVLW  02
257C:  MOVWF  x0E
257E:  MOVLB  0
2580:  CALL   17A8
....................                      OLED_Display(); 
2584:  CALL   110E
2588:  CLRF   16
258A:  BTFSC  FF2.7
258C:  BSF    16.7
258E:  BCF    FF2.7
....................                      delay_ms(2); 
2590:  MOVLW  02
2592:  MOVLB  6
2594:  MOVWF  x47
2596:  MOVLB  0
2598:  CALL   0344
259C:  BTFSC  16.7
259E:  BSF    FF2.7
....................                   break; 
25A0:  MOVLB  5
25A2:  BRA    27CE
....................                   case 2: 
....................                      OLED_ClearDisplay();    // Clear the buffer. 
25A4:  CALL   10C8
....................                      OLED_DrawText(22, 4, txt13, 2); 
25A8:  MOVLW  16
25AA:  MOVLB  6
25AC:  MOVWF  x0A
25AE:  MOVLW  04
25B0:  MOVWF  x0B
25B2:  MOVLW  05
25B4:  MOVWF  x0D
25B6:  MOVLW  F0
25B8:  MOVWF  x0C
25BA:  MOVLW  02
25BC:  MOVWF  x0E
25BE:  MOVLB  0
25C0:  CALL   17A8
....................                      OLED_DrawText(45, 25, seg1, 2); 
25C4:  MOVLW  2D
25C6:  MOVLB  6
25C8:  MOVWF  x0A
25CA:  MOVLW  19
25CC:  MOVWF  x0B
25CE:  MOVLW  05
25D0:  MOVWF  x0D
25D2:  MOVLW  46
25D4:  MOVWF  x0C
25D6:  MOVLW  02
25D8:  MOVWF  x0E
25DA:  MOVLB  0
25DC:  CALL   17A8
....................                      OLED_Display(); 
25E0:  CALL   110E
25E4:  CLRF   16
25E6:  BTFSC  FF2.7
25E8:  BSF    16.7
25EA:  BCF    FF2.7
....................                      delay_ms(2); 
25EC:  MOVLW  02
25EE:  MOVLB  6
25F0:  MOVWF  x47
25F2:  MOVLB  0
25F4:  CALL   0344
25F8:  BTFSC  16.7
25FA:  BSF    FF2.7
....................                   break;  
25FC:  MOVLB  5
25FE:  BRA    27CE
....................                   case 3: 
....................                      OLED_ClearDisplay();    // Clear the buffer. 
2600:  CALL   10C8
....................                      OLED_DrawText(22, 4, txt13, 2); 
2604:  MOVLW  16
2606:  MOVLB  6
2608:  MOVWF  x0A
260A:  MOVLW  04
260C:  MOVWF  x0B
260E:  MOVLW  05
2610:  MOVWF  x0D
2612:  MOVLW  F0
2614:  MOVWF  x0C
2616:  MOVLW  02
2618:  MOVWF  x0E
261A:  MOVLB  0
261C:  CALL   17A8
....................                      OLED_DrawText(45, 25, ter, 2); 
2620:  MOVLW  2D
2622:  MOVLB  6
2624:  MOVWF  x0A
2626:  MOVLW  19
2628:  MOVWF  x0B
262A:  MOVLW  05
262C:  MOVWF  x0D
262E:  MOVLW  4A
2630:  MOVWF  x0C
2632:  MOVLW  02
2634:  MOVWF  x0E
2636:  MOVLB  0
2638:  CALL   17A8
....................                      OLED_Display(); 
263C:  CALL   110E
2640:  CLRF   16
2642:  BTFSC  FF2.7
2644:  BSF    16.7
2646:  BCF    FF2.7
....................                      delay_ms(2); 
2648:  MOVLW  02
264A:  MOVLB  6
264C:  MOVWF  x47
264E:  MOVLB  0
2650:  CALL   0344
2654:  BTFSC  16.7
2656:  BSF    FF2.7
....................                   break;  
2658:  MOVLB  5
265A:  BRA    27CE
....................                   case 4: 
....................                      OLED_ClearDisplay();    // Clear the buffer. 
265C:  CALL   10C8
....................                      OLED_DrawText(22, 4, txt13, 2); 
2660:  MOVLW  16
2662:  MOVLB  6
2664:  MOVWF  x0A
2666:  MOVLW  04
2668:  MOVWF  x0B
266A:  MOVLW  05
266C:  MOVWF  x0D
266E:  MOVLW  F0
2670:  MOVWF  x0C
2672:  MOVLW  02
2674:  MOVWF  x0E
2676:  MOVLB  0
2678:  CALL   17A8
....................                      OLED_DrawText(45, 25, qua, 2); 
267C:  MOVLW  2D
267E:  MOVLB  6
2680:  MOVWF  x0A
2682:  MOVLW  19
2684:  MOVWF  x0B
2686:  MOVLW  05
2688:  MOVWF  x0D
268A:  MOVLW  4E
268C:  MOVWF  x0C
268E:  MOVLW  02
2690:  MOVWF  x0E
2692:  MOVLB  0
2694:  CALL   17A8
....................                      OLED_Display(); 
2698:  CALL   110E
269C:  CLRF   16
269E:  BTFSC  FF2.7
26A0:  BSF    16.7
26A2:  BCF    FF2.7
....................                      delay_ms(2); 
26A4:  MOVLW  02
26A6:  MOVLB  6
26A8:  MOVWF  x47
26AA:  MOVLB  0
26AC:  CALL   0344
26B0:  BTFSC  16.7
26B2:  BSF    FF2.7
....................                   break;  
26B4:  MOVLB  5
26B6:  BRA    27CE
....................                   case 5: 
....................                      OLED_ClearDisplay();    // Clear the buffer. 
26B8:  CALL   10C8
....................                      OLED_DrawText(22, 4, txt13, 2); 
26BC:  MOVLW  16
26BE:  MOVLB  6
26C0:  MOVWF  x0A
26C2:  MOVLW  04
26C4:  MOVWF  x0B
26C6:  MOVLW  05
26C8:  MOVWF  x0D
26CA:  MOVLW  F0
26CC:  MOVWF  x0C
26CE:  MOVLW  02
26D0:  MOVWF  x0E
26D2:  MOVLB  0
26D4:  CALL   17A8
....................                      OLED_DrawText(45, 25, qui, 2); 
26D8:  MOVLW  2D
26DA:  MOVLB  6
26DC:  MOVWF  x0A
26DE:  MOVLW  19
26E0:  MOVWF  x0B
26E2:  MOVLW  05
26E4:  MOVWF  x0D
26E6:  MOVLW  52
26E8:  MOVWF  x0C
26EA:  MOVLW  02
26EC:  MOVWF  x0E
26EE:  MOVLB  0
26F0:  CALL   17A8
....................                      OLED_Display(); 
26F4:  CALL   110E
26F8:  CLRF   16
26FA:  BTFSC  FF2.7
26FC:  BSF    16.7
26FE:  BCF    FF2.7
....................                      delay_ms(2); 
2700:  MOVLW  02
2702:  MOVLB  6
2704:  MOVWF  x47
2706:  MOVLB  0
2708:  CALL   0344
270C:  BTFSC  16.7
270E:  BSF    FF2.7
....................                   break;  
2710:  MOVLB  5
2712:  BRA    27CE
....................                   case 6: 
....................                      OLED_ClearDisplay();    // Clear the buffer. 
2714:  CALL   10C8
....................                      OLED_DrawText(22, 4, txt13, 2); 
2718:  MOVLW  16
271A:  MOVLB  6
271C:  MOVWF  x0A
271E:  MOVLW  04
2720:  MOVWF  x0B
2722:  MOVLW  05
2724:  MOVWF  x0D
2726:  MOVLW  F0
2728:  MOVWF  x0C
272A:  MOVLW  02
272C:  MOVWF  x0E
272E:  MOVLB  0
2730:  CALL   17A8
....................                      OLED_DrawText(45, 25, sex, 2); 
2734:  MOVLW  2D
2736:  MOVLB  6
2738:  MOVWF  x0A
273A:  MOVLW  19
273C:  MOVWF  x0B
273E:  MOVLW  05
2740:  MOVWF  x0D
2742:  MOVLW  56
2744:  MOVWF  x0C
2746:  MOVLW  02
2748:  MOVWF  x0E
274A:  MOVLB  0
274C:  CALL   17A8
....................                      OLED_Display(); 
2750:  CALL   110E
2754:  CLRF   16
2756:  BTFSC  FF2.7
2758:  BSF    16.7
275A:  BCF    FF2.7
....................                      delay_ms(2); 
275C:  MOVLW  02
275E:  MOVLB  6
2760:  MOVWF  x47
2762:  MOVLB  0
2764:  CALL   0344
2768:  BTFSC  16.7
276A:  BSF    FF2.7
....................                   break;  
276C:  MOVLB  5
276E:  BRA    27CE
....................                   case 7: 
....................                      OLED_ClearDisplay();    // Clear the buffer. 
2770:  CALL   10C8
....................                      OLED_DrawText(22, 4, txt13, 2); 
2774:  MOVLW  16
2776:  MOVLB  6
2778:  MOVWF  x0A
277A:  MOVLW  04
277C:  MOVWF  x0B
277E:  MOVLW  05
2780:  MOVWF  x0D
2782:  MOVLW  F0
2784:  MOVWF  x0C
2786:  MOVLW  02
2788:  MOVWF  x0E
278A:  MOVLB  0
278C:  CALL   17A8
....................                      OLED_DrawText(45, 25, sab, 2); 
2790:  MOVLW  2D
2792:  MOVLB  6
2794:  MOVWF  x0A
2796:  MOVLW  19
2798:  MOVWF  x0B
279A:  MOVLW  05
279C:  MOVWF  x0D
279E:  MOVLW  5A
27A0:  MOVWF  x0C
27A2:  MOVLW  02
27A4:  MOVWF  x0E
27A6:  MOVLB  0
27A8:  CALL   17A8
....................                      OLED_Display(); 
27AC:  CALL   110E
27B0:  CLRF   16
27B2:  BTFSC  FF2.7
27B4:  BSF    16.7
27B6:  BCF    FF2.7
....................                      delay_ms(2); 
27B8:  MOVLW  02
27BA:  MOVLB  6
27BC:  MOVWF  x47
27BE:  MOVLB  0
27C0:  CALL   0344
27C4:  BTFSC  16.7
27C6:  BSF    FF2.7
....................                   break;  
27C8:  MOVLB  5
27CA:  BRA    27CE
27CC:  MOVLB  5
27CE:  MOVLB  0
27D0:  MOVLB  5
....................                } 
....................           } 
....................       break; 
27D2:  BRA    2B72
....................       case 3 : 
....................          if(menu4.flagtrava == 0){ 
27D4:  MOVLB  5
27D6:  MOVF   x84,F
27D8:  BNZ   2868
....................          OLED_ClearDisplay();    // Clear the buffer. 
27DA:  MOVLB  0
27DC:  CALL   10C8
....................          OLED_DrawText(2, 4, txt1, 2); 
27E0:  MOVLW  02
27E2:  MOVLB  6
27E4:  MOVWF  x0A
27E6:  MOVLW  04
27E8:  MOVWF  x0B
27EA:  MOVLW  05
27EC:  MOVWF  x0D
27EE:  MOVLW  9C
27F0:  MOVWF  x0C
27F2:  MOVLW  02
27F4:  MOVWF  x0E
27F6:  MOVLB  0
27F8:  CALL   17A8
....................          //SSD1306_DrawRect(0,2,128,18); 
....................          OLED_DrawText(2, 25, txt2, 2); 
27FC:  MOVLW  02
27FE:  MOVLB  6
2800:  MOVWF  x0A
2802:  MOVLW  19
2804:  MOVWF  x0B
2806:  MOVLW  05
2808:  MOVWF  x0D
280A:  MOVLW  A4
280C:  MOVWF  x0C
280E:  MOVLW  02
2810:  MOVWF  x0E
2812:  MOVLB  0
2814:  CALL   17A8
....................          //SSD1306_DrawRect(0,23,128,18); 
....................          OLED_DrawText(2, 46, txt3, 2); 
2818:  MOVLW  02
281A:  MOVLB  6
281C:  MOVWF  x0A
281E:  MOVLW  2E
2820:  MOVWF  x0B
2822:  MOVLW  05
2824:  MOVWF  x0D
2826:  MOVLW  A9
2828:  MOVWF  x0C
282A:  MOVLW  02
282C:  MOVWF  x0E
282E:  MOVLB  0
2830:  CALL   17A8
....................          OLED_DrawRect(0,44,128,18); 
2834:  MOVLB  6
2836:  CLRF   x0A
2838:  MOVLW  2C
283A:  MOVWF  x0B
283C:  MOVLW  80
283E:  MOVWF  x0C
2840:  MOVLW  12
2842:  MOVWF  x0D
2844:  MOVLB  0
2846:  CALL   1E16
....................          OLED_Display(); 
284A:  CALL   110E
284E:  CLRF   16
2850:  BTFSC  FF2.7
2852:  BSF    16.7
2854:  BCF    FF2.7
....................          delay_ms(2); 
2856:  MOVLW  02
2858:  MOVLB  6
285A:  MOVWF  x47
285C:  MOVLB  0
285E:  CALL   0344
2862:  BTFSC  16.7
2864:  BSF    FF2.7
2866:  MOVLB  5
....................          } 
....................          switch(menu4.flagmenu){ 
2868:  MOVF   x85,W
286A:  XORLW  01
286C:  MOVLB  0
286E:  BZ    287C
2870:  XORLW  03
2872:  BZ    2908
2874:  XORLW  01
2876:  BTFSC  FD8.2
2878:  BRA    2994
287A:  BRA    2A20
....................             case 1: 
....................                   OLED_ClearDisplay();    // Clear the buffer. 
287C:  CALL   10C8
....................                   OLED_DrawText(2, 4, txt10, 2); 
2880:  MOVLW  02
2882:  MOVLB  6
2884:  MOVWF  x0A
2886:  MOVLW  04
2888:  MOVWF  x0B
288A:  MOVLW  05
288C:  MOVWF  x0D
288E:  MOVLW  CF
2890:  MOVWF  x0C
2892:  MOVLW  02
2894:  MOVWF  x0E
2896:  MOVLB  0
2898:  CALL   17A8
....................                   OLED_DrawRect(0,2,128,18); 
289C:  MOVLB  6
289E:  CLRF   x0A
28A0:  MOVLW  02
28A2:  MOVWF  x0B
28A4:  MOVLW  80
28A6:  MOVWF  x0C
28A8:  MOVLW  12
28AA:  MOVWF  x0D
28AC:  MOVLB  0
28AE:  CALL   1E16
....................                   OLED_DrawText(2, 25, txt11, 2); 
28B2:  MOVLW  02
28B4:  MOVLB  6
28B6:  MOVWF  x0A
28B8:  MOVLW  19
28BA:  MOVWF  x0B
28BC:  MOVLW  05
28BE:  MOVWF  x0D
28C0:  MOVLW  DA
28C2:  MOVWF  x0C
28C4:  MOVLW  02
28C6:  MOVWF  x0E
28C8:  MOVLB  0
28CA:  CALL   17A8
....................                   //SSD1306_DrawRect(0,23,128,18); 
....................                   OLED_DrawText(2, 46, txt12, 2); 
28CE:  MOVLW  02
28D0:  MOVLB  6
28D2:  MOVWF  x0A
28D4:  MOVLW  2E
28D6:  MOVWF  x0B
28D8:  MOVLW  05
28DA:  MOVWF  x0D
28DC:  MOVLW  E5
28DE:  MOVWF  x0C
28E0:  MOVLW  02
28E2:  MOVWF  x0E
28E4:  MOVLB  0
28E6:  CALL   17A8
....................                   //SSD1306_DrawRect(0,44,128,18); 
....................                   OLED_Display(); 
28EA:  CALL   110E
28EE:  CLRF   16
28F0:  BTFSC  FF2.7
28F2:  BSF    16.7
28F4:  BCF    FF2.7
....................                   delay_ms(2); 
28F6:  MOVLW  02
28F8:  MOVLB  6
28FA:  MOVWF  x47
28FC:  MOVLB  0
28FE:  CALL   0344
2902:  BTFSC  16.7
2904:  BSF    FF2.7
....................             break; 
2906:  BRA    2A20
....................             case 2: 
....................                   OLED_ClearDisplay();    // Clear the buffer. 
2908:  CALL   10C8
....................                   OLED_DrawText(2, 4, txt10, 2); 
290C:  MOVLW  02
290E:  MOVLB  6
2910:  MOVWF  x0A
2912:  MOVLW  04
2914:  MOVWF  x0B
2916:  MOVLW  05
2918:  MOVWF  x0D
291A:  MOVLW  CF
291C:  MOVWF  x0C
291E:  MOVLW  02
2920:  MOVWF  x0E
2922:  MOVLB  0
2924:  CALL   17A8
....................                   //SSD1306_DrawRect(0,2,128,18); 
....................                   OLED_DrawText(2, 25, txt11, 2); 
2928:  MOVLW  02
292A:  MOVLB  6
292C:  MOVWF  x0A
292E:  MOVLW  19
2930:  MOVWF  x0B
2932:  MOVLW  05
2934:  MOVWF  x0D
2936:  MOVLW  DA
2938:  MOVWF  x0C
293A:  MOVLW  02
293C:  MOVWF  x0E
293E:  MOVLB  0
2940:  CALL   17A8
....................                   OLED_DrawRect(0,23,128,18); 
2944:  MOVLB  6
2946:  CLRF   x0A
2948:  MOVLW  17
294A:  MOVWF  x0B
294C:  MOVLW  80
294E:  MOVWF  x0C
2950:  MOVLW  12
2952:  MOVWF  x0D
2954:  MOVLB  0
2956:  CALL   1E16
....................                   OLED_DrawText(2, 46, txt12, 2); 
295A:  MOVLW  02
295C:  MOVLB  6
295E:  MOVWF  x0A
2960:  MOVLW  2E
2962:  MOVWF  x0B
2964:  MOVLW  05
2966:  MOVWF  x0D
2968:  MOVLW  E5
296A:  MOVWF  x0C
296C:  MOVLW  02
296E:  MOVWF  x0E
2970:  MOVLB  0
2972:  CALL   17A8
....................                   //SSD1306_DrawRect(0,44,128,18); 
....................                   OLED_Display(); 
2976:  CALL   110E
297A:  CLRF   16
297C:  BTFSC  FF2.7
297E:  BSF    16.7
2980:  BCF    FF2.7
....................                   delay_ms(2); 
2982:  MOVLW  02
2984:  MOVLB  6
2986:  MOVWF  x47
2988:  MOVLB  0
298A:  CALL   0344
298E:  BTFSC  16.7
2990:  BSF    FF2.7
....................             break; 
2992:  BRA    2A20
....................             case 3: 
....................                   OLED_ClearDisplay();    // Clear the buffer. 
2994:  CALL   10C8
....................                   OLED_DrawText(2, 4, txt10, 2); 
2998:  MOVLW  02
299A:  MOVLB  6
299C:  MOVWF  x0A
299E:  MOVLW  04
29A0:  MOVWF  x0B
29A2:  MOVLW  05
29A4:  MOVWF  x0D
29A6:  MOVLW  CF
29A8:  MOVWF  x0C
29AA:  MOVLW  02
29AC:  MOVWF  x0E
29AE:  MOVLB  0
29B0:  CALL   17A8
....................                   //SSD1306_DrawRect(0,2,128,18); 
....................                   OLED_DrawText(2, 25, txt11, 2); 
29B4:  MOVLW  02
29B6:  MOVLB  6
29B8:  MOVWF  x0A
29BA:  MOVLW  19
29BC:  MOVWF  x0B
29BE:  MOVLW  05
29C0:  MOVWF  x0D
29C2:  MOVLW  DA
29C4:  MOVWF  x0C
29C6:  MOVLW  02
29C8:  MOVWF  x0E
29CA:  MOVLB  0
29CC:  CALL   17A8
....................                   //SSD1306_DrawRect(0,23,128,18); 
....................                   OLED_DrawText(2, 46, txt12, 2); 
29D0:  MOVLW  02
29D2:  MOVLB  6
29D4:  MOVWF  x0A
29D6:  MOVLW  2E
29D8:  MOVWF  x0B
29DA:  MOVLW  05
29DC:  MOVWF  x0D
29DE:  MOVLW  E5
29E0:  MOVWF  x0C
29E2:  MOVLW  02
29E4:  MOVWF  x0E
29E6:  MOVLB  0
29E8:  CALL   17A8
....................                   OLED_DrawRect(0,44,128,18); 
29EC:  MOVLB  6
29EE:  CLRF   x0A
29F0:  MOVLW  2C
29F2:  MOVWF  x0B
29F4:  MOVLW  80
29F6:  MOVWF  x0C
29F8:  MOVLW  12
29FA:  MOVWF  x0D
29FC:  MOVLB  0
29FE:  CALL   1E16
....................                   OLED_Display(); 
2A02:  CALL   110E
2A06:  CLRF   16
2A08:  BTFSC  FF2.7
2A0A:  BSF    16.7
2A0C:  BCF    FF2.7
....................                   delay_ms(2); 
2A0E:  MOVLW  02
2A10:  MOVLB  6
2A12:  MOVWF  x47
2A14:  MOVLB  0
2A16:  CALL   0344
2A1A:  BTFSC  16.7
2A1C:  BSF    FF2.7
....................             break; 
2A1E:  BRA    2A20
....................          }             
....................       break; 
2A20:  MOVLB  5
2A22:  BRA    2B72
....................       case 4 : 
....................          if(p2trava == 0){ 
2A24:  MOVLB  5
2A26:  MOVF   x76,F
2A28:  BNZ   2ABC
2A2A:  MOVF   x77,F
2A2C:  BNZ   2ABC
....................             OLED_ClearDisplay();    // Clear the buffer. 
2A2E:  MOVLB  0
2A30:  CALL   10C8
....................             OLED_DrawText(2, 4, txt2, 2); 
2A34:  MOVLW  02
2A36:  MOVLB  6
2A38:  MOVWF  x0A
2A3A:  MOVLW  04
2A3C:  MOVWF  x0B
2A3E:  MOVLW  05
2A40:  MOVWF  x0D
2A42:  MOVLW  A4
2A44:  MOVWF  x0C
2A46:  MOVLW  02
2A48:  MOVWF  x0E
2A4A:  MOVLB  0
2A4C:  CALL   17A8
....................             //SSD1306_DrawRect(0,2,128,18); 
....................             OLED_DrawText(2, 25, txt3, 2); 
2A50:  MOVLW  02
2A52:  MOVLB  6
2A54:  MOVWF  x0A
2A56:  MOVLW  19
2A58:  MOVWF  x0B
2A5A:  MOVLW  05
2A5C:  MOVWF  x0D
2A5E:  MOVLW  A9
2A60:  MOVWF  x0C
2A62:  MOVLW  02
2A64:  MOVWF  x0E
2A66:  MOVLB  0
2A68:  CALL   17A8
....................             //SSD1306_DrawRect(0,23,128,18); 
....................             OLED_DrawText(2, 46, txt4, 2); 
2A6C:  MOVLW  02
2A6E:  MOVLB  6
2A70:  MOVWF  x0A
2A72:  MOVLW  2E
2A74:  MOVWF  x0B
2A76:  MOVLW  05
2A78:  MOVWF  x0D
2A7A:  MOVLW  AF
2A7C:  MOVWF  x0C
2A7E:  MOVLW  02
2A80:  MOVWF  x0E
2A82:  MOVLB  0
2A84:  CALL   17A8
....................             OLED_DrawRect(0,44,128,18); 
2A88:  MOVLB  6
2A8A:  CLRF   x0A
2A8C:  MOVLW  2C
2A8E:  MOVWF  x0B
2A90:  MOVLW  80
2A92:  MOVWF  x0C
2A94:  MOVLW  12
2A96:  MOVWF  x0D
2A98:  MOVLB  0
2A9A:  CALL   1E16
....................             OLED_Display(); 
2A9E:  CALL   110E
2AA2:  CLRF   16
2AA4:  BTFSC  FF2.7
2AA6:  BSF    16.7
2AA8:  BCF    FF2.7
....................             delay_ms(2); 
2AAA:  MOVLW  02
2AAC:  MOVLB  6
2AAE:  MOVWF  x47
2AB0:  MOVLB  0
2AB2:  CALL   0344
2AB6:  BTFSC  16.7
2AB8:  BSF    FF2.7
2ABA:  MOVLB  5
....................          } 
....................          switch(p2menu){    
2ABC:  MOVF   x78,W
2ABE:  MOVWF  00
2AC0:  MOVF   x79,W
2AC2:  MOVWF  03
2AC4:  MOVF   03,W
2AC6:  BNZ   2AD2
2AC8:  MOVLW  01
2ACA:  SUBWF  00,W
2ACC:  MOVLB  0
2ACE:  BZ    2AD4
2AD0:  MOVLB  5
2AD2:  BRA    2B6E
....................             case 1: 
....................                OLED_ClearDisplay(); 
2AD4:  CALL   10C8
....................                OLED_DrawText(2, 4, txt14, 2); 
2AD8:  MOVLW  02
2ADA:  MOVLB  6
2ADC:  MOVWF  x0A
2ADE:  MOVLW  04
2AE0:  MOVWF  x0B
2AE2:  MOVLW  05
2AE4:  MOVWF  x0D
2AE6:  MOVLW  F8
2AE8:  MOVWF  x0C
2AEA:  MOVLW  02
2AEC:  MOVWF  x0E
2AEE:  MOVLB  0
2AF0:  CALL   17A8
....................                //SSD1306_DrawRect(0,2,128,18); 
....................                OLED_DrawText(2, 25, txt15, 2); 
2AF4:  MOVLW  02
2AF6:  MOVLB  6
2AF8:  MOVWF  x0A
2AFA:  MOVLW  19
2AFC:  MOVWF  x0B
2AFE:  MOVLW  06
2B00:  MOVWF  x0D
2B02:  CLRF   x0C
2B04:  MOVLW  02
2B06:  MOVWF  x0E
2B08:  MOVLB  0
2B0A:  CALL   17A8
....................                //SSD1306_DrawRect(0,23,128,18); 
....................                OLED_Display(); 
2B0E:  CALL   110E
....................                OLED_InvertDisplay(1); 
2B12:  MOVLW  01
2B14:  MOVLB  6
2B16:  MOVWF  x0A
2B18:  MOVLB  0
2B1A:  CALL   2034
....................                delay_ms(300); 
2B1E:  MOVLW  02
2B20:  MOVLB  6
2B22:  MOVWF  x0A
2B24:  CLRF   16
2B26:  BTFSC  FF2.7
2B28:  BSF    16.7
2B2A:  BCF    FF2.7
2B2C:  MOVLW  96
2B2E:  MOVWF  x47
2B30:  MOVLB  0
2B32:  CALL   0344
2B36:  BTFSC  16.7
2B38:  BSF    FF2.7
2B3A:  MOVLB  6
2B3C:  DECFSZ x0A,F
2B3E:  BRA    2B24
....................                OLED_InvertDisplay(0); 
2B40:  CLRF   x0A
2B42:  MOVLB  0
2B44:  CALL   2034
....................                delay_ms(300); 
2B48:  MOVLW  02
2B4A:  MOVLB  6
2B4C:  MOVWF  x0A
2B4E:  CLRF   16
2B50:  BTFSC  FF2.7
2B52:  BSF    16.7
2B54:  BCF    FF2.7
2B56:  MOVLW  96
2B58:  MOVWF  x47
2B5A:  MOVLB  0
2B5C:  CALL   0344
2B60:  BTFSC  16.7
2B62:  BSF    FF2.7
2B64:  MOVLB  6
2B66:  DECFSZ x0A,F
2B68:  BRA    2B4E
....................             break; 
2B6A:  MOVLB  5
2B6C:  BRA    2B6E
....................          } 
....................       break; 
2B6E:  BRA    2B72
2B70:  MOVLB  5
....................    } 
.................... } 
2B72:  MOVLB  0
2B74:  GOTO   3A0E (RETURN)
....................  
.................... void display_dia() {  
....................    //BUSCA O DIA DA SEMANA DA VARIAVEL W_DAY E ESCREVE O NOME CORRESPONDENTE NO DISPLAY 
....................    
....................   switch(s_dia){ 
*
1BC2:  MOVLB  5
1BC4:  MOVF   x68,W
1BC6:  XORLW  01
1BC8:  MOVLB  0
1BCA:  BZ    1BE2
1BCC:  XORLW  03
1BCE:  BZ    1BFE
1BD0:  XORLW  01
1BD2:  BZ    1C1A
1BD4:  XORLW  07
1BD6:  BZ    1C36
1BD8:  XORLW  01
1BDA:  BZ    1C52
1BDC:  XORLW  03
1BDE:  BZ    1C6E
1BE0:  BRA    1C8A
....................     case 1:   
....................       OLED_Drawtext(100, 15, dom, 1); break; 
1BE2:  MOVLW  64
1BE4:  MOVLB  6
1BE6:  MOVWF  x0A
1BE8:  MOVLW  0F
1BEA:  MOVWF  x0B
1BEC:  MOVLW  05
1BEE:  MOVWF  x0D
1BF0:  MOVLW  5E
1BF2:  MOVWF  x0C
1BF4:  MOVLW  01
1BF6:  MOVWF  x0E
1BF8:  MOVLB  0
1BFA:  RCALL  17A8
1BFC:  BRA    1CA6
....................     case 2:   
....................       OLED_Drawtext(100, 15, seg1, 1); break; 
1BFE:  MOVLW  64
1C00:  MOVLB  6
1C02:  MOVWF  x0A
1C04:  MOVLW  0F
1C06:  MOVWF  x0B
1C08:  MOVLW  05
1C0A:  MOVWF  x0D
1C0C:  MOVLW  46
1C0E:  MOVWF  x0C
1C10:  MOVLW  01
1C12:  MOVWF  x0E
1C14:  MOVLB  0
1C16:  RCALL  17A8
1C18:  BRA    1CA6
....................     case 3: 
....................       OLED_Drawtext(100, 15, ter, 1); break; 
1C1A:  MOVLW  64
1C1C:  MOVLB  6
1C1E:  MOVWF  x0A
1C20:  MOVLW  0F
1C22:  MOVWF  x0B
1C24:  MOVLW  05
1C26:  MOVWF  x0D
1C28:  MOVLW  4A
1C2A:  MOVWF  x0C
1C2C:  MOVLW  01
1C2E:  MOVWF  x0E
1C30:  MOVLB  0
1C32:  RCALL  17A8
1C34:  BRA    1CA6
....................     case 4: 
....................       OLED_Drawtext(100, 15, qua, 1); break; 
1C36:  MOVLW  64
1C38:  MOVLB  6
1C3A:  MOVWF  x0A
1C3C:  MOVLW  0F
1C3E:  MOVWF  x0B
1C40:  MOVLW  05
1C42:  MOVWF  x0D
1C44:  MOVLW  4E
1C46:  MOVWF  x0C
1C48:  MOVLW  01
1C4A:  MOVWF  x0E
1C4C:  MOVLB  0
1C4E:  RCALL  17A8
1C50:  BRA    1CA6
....................     case 5:   
....................       OLED_Drawtext(100, 15, qui, 1); break; 
1C52:  MOVLW  64
1C54:  MOVLB  6
1C56:  MOVWF  x0A
1C58:  MOVLW  0F
1C5A:  MOVWF  x0B
1C5C:  MOVLW  05
1C5E:  MOVWF  x0D
1C60:  MOVLW  52
1C62:  MOVWF  x0C
1C64:  MOVLW  01
1C66:  MOVWF  x0E
1C68:  MOVLB  0
1C6A:  RCALL  17A8
1C6C:  BRA    1CA6
....................     case 6: 
....................       OLED_Drawtext(100, 15, sex, 1); break; 
1C6E:  MOVLW  64
1C70:  MOVLB  6
1C72:  MOVWF  x0A
1C74:  MOVLW  0F
1C76:  MOVWF  x0B
1C78:  MOVLW  05
1C7A:  MOVWF  x0D
1C7C:  MOVLW  56
1C7E:  MOVWF  x0C
1C80:  MOVLW  01
1C82:  MOVWF  x0E
1C84:  MOVLB  0
1C86:  RCALL  17A8
1C88:  BRA    1CA6
....................     default:  
....................       OLED_Drawtext(100, 15, sab, 1); break; 
1C8A:  MOVLW  64
1C8C:  MOVLB  6
1C8E:  MOVWF  x0A
1C90:  MOVLW  0F
1C92:  MOVWF  x0B
1C94:  MOVLW  05
1C96:  MOVWF  x0D
1C98:  MOVLW  5A
1C9A:  MOVWF  x0C
1C9C:  MOVLW  01
1C9E:  MOVWF  x0E
1CA0:  MOVLB  0
1CA2:  RCALL  17A8
1CA4:  BRA    1CA6
....................   } 
....................   
.................... } 
1CA6:  GOTO   1D96 (RETURN)
....................  
.................... void DS1307_display() { 
....................       // FAZ A CONVERSÃO DOS DADOS RECEBIDOS PELA I2C DO DS1307 DE BINARIO PARA DECIMAL 
....................    seg = (seg >> 4) * 10 + (seg & 0x0F); 
*
191E:  MOVLB  5
1920:  SWAPF  x65,W
1922:  MOVWF  00
1924:  MOVLW  0F
1926:  ANDWF  00,F
1928:  MOVF   00,W
192A:  MULLW  0A
192C:  MOVFF  FF3,60A
1930:  MOVLB  5
1932:  MOVF   x65,W
1934:  ANDLW  0F
1936:  MOVLB  6
1938:  ADDWF  x0A,W
193A:  MOVLB  5
193C:  MOVWF  x65
....................    min = (min >> 4) * 10 + (min & 0x0F); 
193E:  SWAPF  x66,W
1940:  MOVWF  00
1942:  MOVLW  0F
1944:  ANDWF  00,F
1946:  MOVF   00,W
1948:  MULLW  0A
194A:  MOVFF  FF3,60A
194E:  MOVLB  5
1950:  MOVF   x66,W
1952:  ANDLW  0F
1954:  MOVLB  6
1956:  ADDWF  x0A,W
1958:  MOVLB  5
195A:  MOVWF  x66
....................    hr  = (hr  >> 4) * 10 + (hr  & 0x0F); 
195C:  SWAPF  x67,W
195E:  MOVWF  00
1960:  MOVLW  0F
1962:  ANDWF  00,F
1964:  MOVF   00,W
1966:  MULLW  0A
1968:  MOVFF  FF3,60A
196C:  MOVLB  5
196E:  MOVF   x67,W
1970:  ANDLW  0F
1972:  MOVLB  6
1974:  ADDWF  x0A,W
1976:  MOVLB  5
1978:  MOVWF  x67
....................    dia = (dia >> 4) * 10 + (dia & 0x0F); 
197A:  SWAPF  x69,W
197C:  MOVWF  00
197E:  MOVLW  0F
1980:  ANDWF  00,F
1982:  MOVF   00,W
1984:  MULLW  0A
1986:  MOVFF  FF3,60A
198A:  MOVLB  5
198C:  MOVF   x69,W
198E:  ANDLW  0F
1990:  MOVLB  6
1992:  ADDWF  x0A,W
1994:  MOVLB  5
1996:  MOVWF  x69
....................    mes = (mes >> 4) * 10 + (mes & 0x0F); 
1998:  SWAPF  x6A,W
199A:  MOVWF  00
199C:  MOVLW  0F
199E:  ANDWF  00,F
19A0:  MOVF   00,W
19A2:  MULLW  0A
19A4:  MOVFF  FF3,60A
19A8:  MOVLB  5
19AA:  MOVF   x6A,W
19AC:  ANDLW  0F
19AE:  MOVLB  6
19B0:  ADDWF  x0A,W
19B2:  MOVLB  5
19B4:  MOVWF  x6A
....................    ano = (ano >> 4) * 10 + (ano & 0x0F); 
19B6:  SWAPF  x6B,W
19B8:  MOVWF  00
19BA:  MOVLW  0F
19BC:  ANDWF  00,F
19BE:  MOVF   00,W
19C0:  MULLW  0A
19C2:  MOVFF  FF3,60A
19C6:  MOVLB  5
19C8:  MOVF   x6B,W
19CA:  ANDLW  0F
19CC:  MOVLB  6
19CE:  ADDWF  x0A,W
19D0:  MOVLB  5
19D2:  MOVWF  x6B
19D4:  CLRF   16
19D6:  BTFSC  FF2.7
19D8:  BSF    16.7
19DA:  BCF    FF2.7
....................    
....................       // End conversion 
....................       //CONVERTE O VALOR DECIMAL PARA ASCII PARA SER MOSTRADO NO DISPLAY 
....................    horas[7] = seg % 10 + 0x30; //RESTO DA DIVISÃO POR 10 DE SEG RETORNA APENAS A UNIDADE DO VALOR (EX: 15 % 10 = 5) E ADC +48(0x30) DO ASCII 
19DC:  MOVFF  565,648
19E0:  MOVLW  0A
19E2:  MOVLB  6
19E4:  MOVWF  x49
19E6:  MOVLB  0
19E8:  CALL   02A6
19EC:  BTFSC  16.7
19EE:  BSF    FF2.7
19F0:  MOVLW  30
19F2:  ADDWF  00,W
19F4:  MOVLB  5
19F6:  MOVWF  x26
19F8:  CLRF   16
19FA:  BTFSC  FF2.7
19FC:  BSF    16.7
19FE:  BCF    FF2.7
....................    horas[6] = seg / 10 + 0x30; //DIVIDE UM INTEIRO POR 10, CASO HOUVER RESTO O MESMO É DESCARTADO, RESTANDO APENAS O VALOR DA DEZENA, SOMA +48 ASCII 
1A00:  MOVFF  565,648
1A04:  MOVLW  0A
1A06:  MOVLB  6
1A08:  MOVWF  x49
1A0A:  MOVLB  0
1A0C:  CALL   02A6
1A10:  BTFSC  16.7
1A12:  BSF    FF2.7
1A14:  MOVLW  30
1A16:  ADDWF  01,W
1A18:  MOVLB  5
1A1A:  MOVWF  x25
1A1C:  CLRF   16
1A1E:  BTFSC  FF2.7
1A20:  BSF    16.7
1A22:  BCF    FF2.7
....................    horas[4] = min % 10 + 0x30; 
1A24:  MOVFF  566,648
1A28:  MOVLW  0A
1A2A:  MOVLB  6
1A2C:  MOVWF  x49
1A2E:  MOVLB  0
1A30:  CALL   02A6
1A34:  BTFSC  16.7
1A36:  BSF    FF2.7
1A38:  MOVLW  30
1A3A:  ADDWF  00,W
1A3C:  MOVLB  5
1A3E:  MOVWF  x23
1A40:  CLRF   16
1A42:  BTFSC  FF2.7
1A44:  BSF    16.7
1A46:  BCF    FF2.7
....................    horas[3] = min / 10 + 0x30; 
1A48:  MOVFF  566,648
1A4C:  MOVLW  0A
1A4E:  MOVLB  6
1A50:  MOVWF  x49
1A52:  MOVLB  0
1A54:  CALL   02A6
1A58:  BTFSC  16.7
1A5A:  BSF    FF2.7
1A5C:  MOVLW  30
1A5E:  ADDWF  01,W
1A60:  MOVLB  5
1A62:  MOVWF  x22
1A64:  CLRF   16
1A66:  BTFSC  FF2.7
1A68:  BSF    16.7
1A6A:  BCF    FF2.7
....................    horas[1] = hr  % 10 + 0x30; 
1A6C:  MOVFF  567,648
1A70:  MOVLW  0A
1A72:  MOVLB  6
1A74:  MOVWF  x49
1A76:  MOVLB  0
1A78:  CALL   02A6
1A7C:  BTFSC  16.7
1A7E:  BSF    FF2.7
1A80:  MOVLW  30
1A82:  ADDWF  00,W
1A84:  MOVLB  5
1A86:  MOVWF  x20
1A88:  CLRF   16
1A8A:  BTFSC  FF2.7
1A8C:  BSF    16.7
1A8E:  BCF    FF2.7
....................    horas[0] = hr  / 10 + 0x30; 
1A90:  MOVFF  567,648
1A94:  MOVLW  0A
1A96:  MOVLB  6
1A98:  MOVWF  x49
1A9A:  MOVLB  0
1A9C:  CALL   02A6
1AA0:  BTFSC  16.7
1AA2:  BSF    FF2.7
1AA4:  MOVLW  30
1AA6:  ADDWF  01,W
1AA8:  MOVLB  5
1AAA:  MOVWF  x1F
1AAC:  CLRF   16
1AAE:  BTFSC  FF2.7
1AB0:  BSF    16.7
1AB2:  BCF    FF2.7
....................    data[7] = ano % 10 + 0x30; 
1AB4:  MOVFF  56B,648
1AB8:  MOVLW  0A
1ABA:  MOVLB  6
1ABC:  MOVWF  x49
1ABE:  MOVLB  0
1AC0:  CALL   02A6
1AC4:  BTFSC  16.7
1AC6:  BSF    FF2.7
1AC8:  MOVLW  30
1ACA:  ADDWF  00,W
1ACC:  MOVLB  5
1ACE:  MOVWF  x2C
1AD0:  CLRF   16
1AD2:  BTFSC  FF2.7
1AD4:  BSF    16.7
1AD6:  BCF    FF2.7
....................    data[6] = ano / 10 + 0x30; 
1AD8:  MOVFF  56B,648
1ADC:  MOVLW  0A
1ADE:  MOVLB  6
1AE0:  MOVWF  x49
1AE2:  MOVLB  0
1AE4:  CALL   02A6
1AE8:  BTFSC  16.7
1AEA:  BSF    FF2.7
1AEC:  MOVLW  30
1AEE:  ADDWF  01,W
1AF0:  MOVLB  5
1AF2:  MOVWF  x2B
1AF4:  CLRF   16
1AF6:  BTFSC  FF2.7
1AF8:  BSF    16.7
1AFA:  BCF    FF2.7
....................    data[4] = mes % 10 + 0x30; 
1AFC:  MOVFF  56A,648
1B00:  MOVLW  0A
1B02:  MOVLB  6
1B04:  MOVWF  x49
1B06:  MOVLB  0
1B08:  CALL   02A6
1B0C:  BTFSC  16.7
1B0E:  BSF    FF2.7
1B10:  MOVLW  30
1B12:  ADDWF  00,W
1B14:  MOVLB  5
1B16:  MOVWF  x29
1B18:  CLRF   16
1B1A:  BTFSC  FF2.7
1B1C:  BSF    16.7
1B1E:  BCF    FF2.7
....................    data[3] = mes / 10 + 0x30; 
1B20:  MOVFF  56A,648
1B24:  MOVLW  0A
1B26:  MOVLB  6
1B28:  MOVWF  x49
1B2A:  MOVLB  0
1B2C:  CALL   02A6
1B30:  BTFSC  16.7
1B32:  BSF    FF2.7
1B34:  MOVLW  30
1B36:  ADDWF  01,W
1B38:  MOVLB  5
1B3A:  MOVWF  x28
1B3C:  CLRF   16
1B3E:  BTFSC  FF2.7
1B40:  BSF    16.7
1B42:  BCF    FF2.7
....................    data[1] = dia % 10 + 0x30; 
1B44:  MOVFF  569,648
1B48:  MOVLW  0A
1B4A:  MOVLB  6
1B4C:  MOVWF  x49
1B4E:  MOVLB  0
1B50:  CALL   02A6
1B54:  BTFSC  16.7
1B56:  BSF    FF2.7
1B58:  MOVLW  30
1B5A:  ADDWF  00,W
1B5C:  MOVLB  5
1B5E:  MOVWF  x26
1B60:  CLRF   16
1B62:  BTFSC  FF2.7
1B64:  BSF    16.7
1B66:  BCF    FF2.7
....................    data[0] = dia / 10 + 0x30; 
1B68:  MOVFF  569,648
1B6C:  MOVLW  0A
1B6E:  MOVLB  6
1B70:  MOVWF  x49
1B72:  MOVLB  0
1B74:  CALL   02A6
1B78:  BTFSC  16.7
1B7A:  BSF    FF2.7
1B7C:  MOVLW  30
1B7E:  ADDWF  01,W
1B80:  MOVLB  5
1B82:  MOVWF  x25
....................    OLED_ClearDisplay();    // Clear the buffer.  
1B84:  MOVLB  0
1B86:  CALL   10C8
....................    OLED_DrawText(10,  15, data, 1);        // IMPRIME A STRING DE DATA NO DISPLAY 
1B8A:  MOVLW  0A
1B8C:  MOVLB  6
1B8E:  MOVWF  x0A
1B90:  MOVLW  0F
1B92:  MOVWF  x0B
1B94:  MOVLW  05
1B96:  MOVWF  x0D
1B98:  MOVLW  25
1B9A:  MOVWF  x0C
1B9C:  MOVLW  01
1B9E:  MOVWF  x0E
1BA0:  MOVLB  0
1BA2:  RCALL  17A8
....................    OLED_DrawText(64, 15, horas, 1);        // IMPRIME A STRING DE TEMPO NO DISPLAY 
1BA4:  MOVLW  40
1BA6:  MOVLB  6
1BA8:  MOVWF  x0A
1BAA:  MOVLW  0F
1BAC:  MOVWF  x0B
1BAE:  MOVLW  05
1BB0:  MOVWF  x0D
1BB2:  MOVLW  1F
1BB4:  MOVWF  x0C
1BB6:  MOVLW  01
1BB8:  MOVWF  x0E
1BBA:  MOVLB  0
1BBC:  RCALL  17A8
....................  
.................... } 
1BBE:  GOTO   1D94 (RETURN)
....................  
.................... void escreve_ds(signed int8 hr, signed int8 min, signed int8 s_dia, signed int8 dia, signed int8 mes, signed int8 ano){ 
....................     // Convert decimal to BCD 
....................          // Convert decimal to BCD 
....................    min = ((min  / 10) << 4) + (min  % 10); 
*
036C:  MOVFF  642,648
0370:  MOVLW  0A
0372:  MOVLB  6
0374:  MOVWF  x49
0376:  MOVLB  0
0378:  RCALL  02A6
037A:  SWAPF  01,W
037C:  MOVLB  6
037E:  MOVWF  x47
0380:  MOVLW  F0
0382:  ANDWF  x47,F
0384:  MOVFF  642,648
0388:  MOVLW  0A
038A:  MOVWF  x49
038C:  MOVLB  0
038E:  RCALL  02A6
0390:  MOVF   00,W
0392:  MOVLB  6
0394:  ADDWF  x47,W
0396:  MOVWF  x42
....................    hr  = ((hr   / 10) << 4) + (hr   % 10); 
0398:  MOVFF  641,648
039C:  MOVLW  0A
039E:  MOVWF  x49
03A0:  MOVLB  0
03A2:  RCALL  02A6
03A4:  SWAPF  01,W
03A6:  MOVLB  6
03A8:  MOVWF  x47
03AA:  MOVLW  F0
03AC:  ANDWF  x47,F
03AE:  MOVFF  641,648
03B2:  MOVLW  0A
03B4:  MOVWF  x49
03B6:  MOVLB  0
03B8:  RCALL  02A6
03BA:  MOVF   00,W
03BC:  MOVLB  6
03BE:  ADDWF  x47,W
03C0:  MOVWF  x41
....................    dia = ((dia  / 10) << 4) + (dia  % 10); 
03C2:  MOVFF  644,648
03C6:  MOVLW  0A
03C8:  MOVWF  x49
03CA:  MOVLB  0
03CC:  RCALL  02A6
03CE:  SWAPF  01,W
03D0:  MOVLB  6
03D2:  MOVWF  x47
03D4:  MOVLW  F0
03D6:  ANDWF  x47,F
03D8:  MOVFF  644,648
03DC:  MOVLW  0A
03DE:  MOVWF  x49
03E0:  MOVLB  0
03E2:  RCALL  02A6
03E4:  MOVF   00,W
03E6:  MOVLB  6
03E8:  ADDWF  x47,W
03EA:  MOVWF  x44
....................    mes = ((mes  / 10) << 4) + (mes  % 10); 
03EC:  MOVFF  645,648
03F0:  MOVLW  0A
03F2:  MOVWF  x49
03F4:  MOVLB  0
03F6:  RCALL  02A6
03F8:  SWAPF  01,W
03FA:  MOVLB  6
03FC:  MOVWF  x47
03FE:  MOVLW  F0
0400:  ANDWF  x47,F
0402:  MOVFF  645,648
0406:  MOVLW  0A
0408:  MOVWF  x49
040A:  MOVLB  0
040C:  RCALL  02A6
040E:  MOVF   00,W
0410:  MOVLB  6
0412:  ADDWF  x47,W
0414:  MOVWF  x45
....................    ano = ((ano  / 10) << 4) + (ano  % 10); 
0416:  MOVFF  646,648
041A:  MOVLW  0A
041C:  MOVWF  x49
041E:  MOVLB  0
0420:  RCALL  02A6
0422:  SWAPF  01,W
0424:  MOVLB  6
0426:  MOVWF  x47
0428:  MOVLW  F0
042A:  ANDWF  x47,F
042C:  MOVFF  646,648
0430:  MOVLW  0A
0432:  MOVWF  x49
0434:  MOVLB  0
0436:  RCALL  02A6
0438:  MOVF   00,W
043A:  MOVLB  6
043C:  ADDWF  x47,W
043E:  MOVWF  x46
....................     // End conversion 
....................  
....................    // ESCREVE DADOS DA HORA NO DS1307 RTC 
....................     i2c_Start(OLED_stream);             // INICIA I2C 
0440:  BSF    F93.0
0442:  NOP   
0444:  BSF    F93.1
0446:  NOP   
0448:  BCF    F8A.0
044A:  BCF    F93.0
044C:  NOP   
044E:  BCF    F8A.1
0450:  BCF    F93.1
....................     i2c_Write(OLED_stream, 0xD0);       // ENDEREÇO DS1307 
0452:  MOVLW  D0
0454:  MOVWF  x47
0456:  MOVLB  0
0458:  RCALL  02F2
....................     i2c_Write(OLED_stream, 0);          // ENVIA PARA O ENDEREÇO DO REGISTRADOR 
045A:  MOVLB  6
045C:  CLRF   x47
045E:  MOVLB  0
0460:  RCALL  02F2
....................     i2c_Write(OLED_stream, 0);          // RESETA OS SEGUNDOS E INICIA O OSCILADOR 
0462:  MOVLB  6
0464:  CLRF   x47
0466:  MOVLB  0
0468:  RCALL  02F2
....................     i2c_Write(OLED_stream, min);        // ESCREVE O VALOR DOS MINS NO DS1307 
046A:  MOVFF  642,647
046E:  RCALL  02F2
....................     i2c_Write(OLED_stream, hr);          // ESCREVE O VALOR DAS HRS NO DS1307 
0470:  MOVFF  641,647
0474:  RCALL  02F2
....................     i2c_Write(OLED_stream, s_dia);      // ESCREVE O VALOR DO DIA DA SEMANA NO DS1307 
0476:  MOVFF  643,647
047A:  RCALL  02F2
....................     i2c_Write(OLED_stream, dia);        // ESCREVE O VALOR DO DIA NO DS1307 
047C:  MOVFF  644,647
0480:  RCALL  02F2
....................     i2c_Write(OLED_stream, mes);         // ESCREVE O VALOR DO MES DS1307 
0482:  MOVFF  645,647
0486:  RCALL  02F2
....................     i2c_Write(OLED_stream, ano);          // ESCREVE O VALOR DO ANO NO DS1307 
0488:  MOVFF  646,647
048C:  RCALL  02F2
....................     i2c_Stop(OLED_stream);              // PARA A COMUNICAÇÃO I2C 
048E:  BCF    F93.0
0490:  NOP   
0492:  BSF    F93.1
0494:  BTFSS  F81.1
0496:  BRA    0494
0498:  NOP   
049A:  BRA    049C
049C:  NOP   
049E:  BSF    F93.0
04A0:  NOP   
....................   
....................     delay_ms(200);                     // AGUARDA 200MS    
04A2:  MOVLW  C8
04A4:  MOVLB  6
04A6:  MOVWF  x47
04A8:  MOVLB  0
04AA:  RCALL  0344
.................... } 
04AC:  RETLW  00
....................  
.................... void le_DS1307(void){ 
....................     // Read current time and date 
....................     i2c_Start(OLED_stream);              // Start I2C 
*
1CAA:  BSF    F93.0
1CAC:  NOP   
1CAE:  BSF    F93.1
1CB0:  NOP   
1CB2:  BCF    F8A.0
1CB4:  BCF    F93.0
1CB6:  NOP   
1CB8:  BCF    F8A.1
1CBA:  BCF    F93.1
1CBC:  CLRF   16
1CBE:  BTFSC  FF2.7
1CC0:  BSF    16.7
1CC2:  BCF    FF2.7
....................     i2c_Write(OLED_stream, 0xD0);        // DS1307 address 
1CC4:  MOVLW  D0
1CC6:  MOVLB  6
1CC8:  MOVWF  x47
1CCA:  MOVLB  0
1CCC:  CALL   02F2
1CD0:  BTFSC  16.7
1CD2:  BSF    FF2.7
1CD4:  CLRF   16
1CD6:  BTFSC  FF2.7
1CD8:  BSF    16.7
1CDA:  BCF    FF2.7
....................     i2c_Write(OLED_stream, 0);           // Send register address 
1CDC:  MOVLB  6
1CDE:  CLRF   x47
1CE0:  MOVLB  0
1CE2:  CALL   02F2
1CE6:  BTFSC  16.7
1CE8:  BSF    FF2.7
....................     i2c_Start(OLED_stream);              // Restart I2C 
1CEA:  BSF    F93.0
1CEC:  NOP   
1CEE:  BSF    F93.1
1CF0:  NOP   
1CF2:  BTFSS  F81.1
1CF4:  BRA    1CF2
1CF6:  BCF    F8A.0
1CF8:  BCF    F93.0
1CFA:  NOP   
1CFC:  BCF    F8A.1
1CFE:  BCF    F93.1
1D00:  CLRF   16
1D02:  BTFSC  FF2.7
1D04:  BSF    16.7
1D06:  BCF    FF2.7
....................     i2c_Write(OLED_stream, 0xD1);        // Initialize data read 
1D08:  MOVLW  D1
1D0A:  MOVLB  6
1D0C:  MOVWF  x47
1D0E:  MOVLB  0
1D10:  CALL   02F2
1D14:  BTFSC  16.7
1D16:  BSF    FF2.7
....................     seg =   i2c_Read(OLED_stream, 1);      // Read seconds from register 0 
1D18:  MOVLW  01
1D1A:  MOVWF  00
1D1C:  RCALL  18D2
1D1E:  MOVFF  01,565
1D22:  MOVLB  5
....................     min =   i2c_Read(OLED_stream, 2);      // Read minuts from register 1 
1D24:  MOVLW  02
1D26:  MOVWF  00
1D28:  MOVLB  0
1D2A:  RCALL  18D2
1D2C:  MOVFF  01,566
1D30:  MOVLB  5
....................     hr  =   i2c_Read(OLED_stream, 3);      // Read hour from register 2 
1D32:  MOVLW  03
1D34:  MOVWF  00
1D36:  MOVLB  0
1D38:  RCALL  18D2
1D3A:  MOVFF  01,567
1D3E:  MOVLB  5
....................     s_dia = i2c_Read(OLED_stream, 4);      // Read day of week from register 3 
1D40:  MOVLW  04
1D42:  MOVWF  00
1D44:  MOVLB  0
1D46:  RCALL  18D2
1D48:  MOVFF  01,568
1D4C:  MOVLB  5
....................     dia =   i2c_Read(OLED_stream, 5);      // Read day from register 4 
1D4E:  MOVLW  05
1D50:  MOVWF  00
1D52:  MOVLB  0
1D54:  RCALL  18D2
1D56:  MOVFF  01,569
1D5A:  MOVLB  5
....................     mes =   i2c_Read(OLED_stream, 6);      // Read month from register 5 
1D5C:  MOVLW  06
1D5E:  MOVWF  00
1D60:  MOVLB  0
1D62:  RCALL  18D2
1D64:  MOVFF  01,56A
1D68:  MOVLB  5
....................     ano =   i2c_Read(OLED_stream, 7);      // Read year from register 6 
1D6A:  MOVLW  07
1D6C:  MOVWF  00
1D6E:  MOVLB  0
1D70:  RCALL  18D2
1D72:  MOVFF  01,56B
1D76:  MOVLB  5
....................     i2c_Stop(OLED_stream);               // Stop I2C 
1D78:  BCF    F93.0
1D7A:  NOP   
1D7C:  BSF    F93.1
1D7E:  BTFSS  F81.1
1D80:  BRA    1D7E
1D82:  NOP   
1D84:  BRA    1D86
1D86:  NOP   
1D88:  BSF    F93.0
1D8A:  NOP   
....................  
....................   OLED_ClearDisplay();    // Clear the buffer. 
1D8C:  MOVLB  0
1D8E:  CALL   10C8
....................   DS1307_display();   // Diaplay time & Date 
1D92:  BRA    191E
....................   display_dia();      // Display day of the week 
1D94:  BRA    1BC2
....................   OLED_DrawText(2, 27, hori, 2); 
1D96:  MOVLW  02
1D98:  MOVLB  6
1D9A:  MOVWF  x0A
1D9C:  MOVLW  1B
1D9E:  MOVWF  x0B
1DA0:  MOVLW  05
1DA2:  MOVWF  x0D
1DA4:  MOVLW  2E
1DA6:  MOVWF  x0C
1DA8:  MOVLW  02
1DAA:  MOVWF  x0E
1DAC:  MOVLB  0
1DAE:  RCALL  17A8
....................   OLED_DrawText(2, 47, tmr, 2); 
1DB0:  MOVLW  02
1DB2:  MOVLB  6
1DB4:  MOVWF  x0A
1DB6:  MOVLW  2F
1DB8:  MOVWF  x0B
1DBA:  MOVLW  05
1DBC:  MOVWF  x0D
1DBE:  MOVLW  3A
1DC0:  MOVWF  x0C
1DC2:  MOVLW  02
1DC4:  MOVWF  x0E
1DC6:  MOVLB  0
1DC8:  RCALL  17A8
....................   OLED_Display(); 
1DCA:  CALL   110E
1DCE:  CLRF   16
1DD0:  BTFSC  FF2.7
1DD2:  BSF    16.7
1DD4:  BCF    FF2.7
....................   delay_ms(20); 
1DD6:  MOVLW  14
1DD8:  MOVLB  6
1DDA:  MOVWF  x47
1DDC:  MOVLB  0
1DDE:  CALL   0344
1DE2:  BTFSC  16.7
1DE4:  BSF    FF2.7
.................... } 
1DE6:  GOTO   2212 (RETURN)
....................  
.................... void conv_valor(char buff[],unsigned int16 aux){ 
....................   unsigned char dezena,unidade,centena, milhar, dmilhar; 
....................   unsigned int16 aux1; 
....................   dmilhar = 0; 
*
0C2C:  MOVLB  5
0C2E:  CLRF   xA6
....................   milhar = 0; 
0C30:  CLRF   xA5
....................   centena = 0; 
0C32:  CLRF   xA4
....................   dezena  = 0; 
0C34:  CLRF   xA2
....................   unidade = 0; 
0C36:  CLRF   xA3
....................   aux1 = aux;  
0C38:  MOVFF  5A1,5A8
0C3C:  MOVFF  5A0,5A7
....................   for(;aux>=10000;aux -=10000){dmilhar++;} 
0C40:  MOVF   xA1,W
0C42:  SUBLW  26
0C44:  BC    0C5C
0C46:  XORLW  FF
0C48:  BNZ   0C50
0C4A:  MOVF   xA0,W
0C4C:  SUBLW  0F
0C4E:  BC    0C5C
0C50:  INCF   xA6,F
0C52:  MOVLW  10
0C54:  SUBWF  xA0,F
0C56:  MOVLW  27
0C58:  SUBWFB xA1,F
0C5A:  BRA    0C40
....................   for(;aux>=1000;aux -=1000){milhar++;} 
0C5C:  MOVF   xA1,W
0C5E:  SUBLW  02
0C60:  BC    0C78
0C62:  XORLW  FF
0C64:  BNZ   0C6C
0C66:  MOVF   xA0,W
0C68:  SUBLW  E7
0C6A:  BC    0C78
0C6C:  INCF   xA5,F
0C6E:  MOVLW  E8
0C70:  SUBWF  xA0,F
0C72:  MOVLW  03
0C74:  SUBWFB xA1,F
0C76:  BRA    0C5C
....................   for(;aux>=100;aux -=100){centena++;} 
0C78:  MOVF   xA1,F
0C7A:  BNZ   0C82
0C7C:  MOVF   xA0,W
0C7E:  SUBLW  63
0C80:  BC    0C8E
0C82:  INCF   xA4,F
0C84:  MOVLW  64
0C86:  SUBWF  xA0,F
0C88:  MOVLW  00
0C8A:  SUBWFB xA1,F
0C8C:  BRA    0C78
....................   for(;aux>=10;aux -=10){dezena++;} 
0C8E:  MOVF   xA1,F
0C90:  BNZ   0C98
0C92:  MOVF   xA0,W
0C94:  SUBLW  09
0C96:  BC    0CA4
0C98:  INCF   xA2,F
0C9A:  MOVLW  0A
0C9C:  SUBWF  xA0,F
0C9E:  MOVLW  00
0CA0:  SUBWFB xA1,F
0CA2:  BRA    0C8E
....................   for(;aux>=1;aux -=1){unidade++;} 
0CA4:  MOVF   xA1,F
0CA6:  BNZ   0CAE
0CA8:  MOVF   xA0,W
0CAA:  SUBLW  00
0CAC:  BC    0CBA
0CAE:  INCF   xA3,F
0CB0:  MOVLW  01
0CB2:  SUBWF  xA0,F
0CB4:  MOVLW  00
0CB6:  SUBWFB xA1,F
0CB8:  BRA    0CA4
....................   dmilhar = (dmilhar + 48); 
0CBA:  MOVLW  30
0CBC:  ADDWF  xA6,F
....................   milhar  = (milhar  + 48);   
0CBE:  ADDWF  xA5,F
....................   centena = (centena + 48); 
0CC0:  ADDWF  xA4,F
....................   dezena  = (dezena  + 48); 
0CC2:  ADDWF  xA2,F
....................   unidade = (unidade + 48); 
0CC4:  ADDWF  xA3,F
....................    
....................   buff[6] = unidade; 
0CC6:  MOVLW  06
0CC8:  ADDWF  x9E,W
0CCA:  MOVWF  FE9
0CCC:  MOVLW  00
0CCE:  ADDWFC x9F,W
0CD0:  MOVWF  FEA
0CD2:  MOVFF  5A3,FEF
....................   buff[5] = dezena; 
0CD6:  MOVLW  05
0CD8:  ADDWF  x9E,W
0CDA:  MOVWF  FE9
0CDC:  MOVLW  00
0CDE:  ADDWFC x9F,W
0CE0:  MOVWF  FEA
0CE2:  MOVFF  5A2,FEF
....................   buff[4] = centena; 
0CE6:  MOVLW  04
0CE8:  ADDWF  x9E,W
0CEA:  MOVWF  FE9
0CEC:  MOVLW  00
0CEE:  ADDWFC x9F,W
0CF0:  MOVWF  FEA
0CF2:  MOVFF  5A4,FEF
....................   buff[3] = milhar; 
0CF6:  MOVLW  03
0CF8:  ADDWF  x9E,W
0CFA:  MOVWF  FE9
0CFC:  MOVLW  00
0CFE:  ADDWFC x9F,W
0D00:  MOVWF  FEA
0D02:  MOVFF  5A5,FEF
....................   buff[2] = dmilhar; 
0D06:  MOVLW  02
0D08:  ADDWF  x9E,W
0D0A:  MOVWF  FE9
0D0C:  MOVLW  00
0D0E:  ADDWFC x9F,W
0D10:  MOVWF  FEA
0D12:  MOVFF  5A6,FEF
.................... } 
0D16:  MOVLB  0
0D18:  RETLW  00
....................  
.................... void atualiza_disp(void){ 
*
1E80:  CLRF   16
1E82:  BTFSC  FF2.7
1E84:  BSF    16.7
1E86:  BCF    FF2.7
....................   horas[7] = seg % 10 + 0x30; //RESTO DA DIVISÃO POR 10 DE SEG RETORNA APENAS A UNIDADE DO VALOR (EX: 15 % 10 = 5) E ADC +48(0x30) DO ASCII 
1E88:  MOVFF  565,648
1E8C:  MOVLW  0A
1E8E:  MOVLB  6
1E90:  MOVWF  x49
1E92:  MOVLB  0
1E94:  CALL   02A6
1E98:  BTFSC  16.7
1E9A:  BSF    FF2.7
1E9C:  MOVLW  30
1E9E:  ADDWF  00,W
1EA0:  MOVLB  5
1EA2:  MOVWF  x26
1EA4:  CLRF   16
1EA6:  BTFSC  FF2.7
1EA8:  BSF    16.7
1EAA:  BCF    FF2.7
....................   horas[6] = seg / 10 + 0x30; //DIVIDE UM INTEIRO POR 10, CASO HOUVER RESTO O MESMO É DESCARTADO, RESTANDO APENAS O VALOR DA DEZENA, SOMA +48 ASCII 
1EAC:  MOVFF  565,648
1EB0:  MOVLW  0A
1EB2:  MOVLB  6
1EB4:  MOVWF  x49
1EB6:  MOVLB  0
1EB8:  CALL   02A6
1EBC:  BTFSC  16.7
1EBE:  BSF    FF2.7
1EC0:  MOVLW  30
1EC2:  ADDWF  01,W
1EC4:  MOVLB  5
1EC6:  MOVWF  x25
1EC8:  CLRF   16
1ECA:  BTFSC  FF2.7
1ECC:  BSF    16.7
1ECE:  BCF    FF2.7
....................   horas[4] = min % 10 + 0x30; 
1ED0:  MOVFF  566,648
1ED4:  MOVLW  0A
1ED6:  MOVLB  6
1ED8:  MOVWF  x49
1EDA:  MOVLB  0
1EDC:  CALL   02A6
1EE0:  BTFSC  16.7
1EE2:  BSF    FF2.7
1EE4:  MOVLW  30
1EE6:  ADDWF  00,W
1EE8:  MOVLB  5
1EEA:  MOVWF  x23
1EEC:  CLRF   16
1EEE:  BTFSC  FF2.7
1EF0:  BSF    16.7
1EF2:  BCF    FF2.7
....................   horas[3] = min / 10 + 0x30; 
1EF4:  MOVFF  566,648
1EF8:  MOVLW  0A
1EFA:  MOVLB  6
1EFC:  MOVWF  x49
1EFE:  MOVLB  0
1F00:  CALL   02A6
1F04:  BTFSC  16.7
1F06:  BSF    FF2.7
1F08:  MOVLW  30
1F0A:  ADDWF  01,W
1F0C:  MOVLB  5
1F0E:  MOVWF  x22
1F10:  CLRF   16
1F12:  BTFSC  FF2.7
1F14:  BSF    16.7
1F16:  BCF    FF2.7
....................   horas[1] = hr  % 10 + 0x30; 
1F18:  MOVFF  567,648
1F1C:  MOVLW  0A
1F1E:  MOVLB  6
1F20:  MOVWF  x49
1F22:  MOVLB  0
1F24:  CALL   02A6
1F28:  BTFSC  16.7
1F2A:  BSF    FF2.7
1F2C:  MOVLW  30
1F2E:  ADDWF  00,W
1F30:  MOVLB  5
1F32:  MOVWF  x20
1F34:  CLRF   16
1F36:  BTFSC  FF2.7
1F38:  BSF    16.7
1F3A:  BCF    FF2.7
....................   horas[0] = hr  / 10 + 0x30; 
1F3C:  MOVFF  567,648
1F40:  MOVLW  0A
1F42:  MOVLB  6
1F44:  MOVWF  x49
1F46:  MOVLB  0
1F48:  CALL   02A6
1F4C:  BTFSC  16.7
1F4E:  BSF    FF2.7
1F50:  MOVLW  30
1F52:  ADDWF  01,W
1F54:  MOVLB  5
1F56:  MOVWF  x1F
1F58:  CLRF   16
1F5A:  BTFSC  FF2.7
1F5C:  BSF    16.7
1F5E:  BCF    FF2.7
....................   data[7] = ano % 10 + 0x30; 
1F60:  MOVFF  56B,648
1F64:  MOVLW  0A
1F66:  MOVLB  6
1F68:  MOVWF  x49
1F6A:  MOVLB  0
1F6C:  CALL   02A6
1F70:  BTFSC  16.7
1F72:  BSF    FF2.7
1F74:  MOVLW  30
1F76:  ADDWF  00,W
1F78:  MOVLB  5
1F7A:  MOVWF  x2C
1F7C:  CLRF   16
1F7E:  BTFSC  FF2.7
1F80:  BSF    16.7
1F82:  BCF    FF2.7
....................   data[6] = ano / 10 + 0x30; 
1F84:  MOVFF  56B,648
1F88:  MOVLW  0A
1F8A:  MOVLB  6
1F8C:  MOVWF  x49
1F8E:  MOVLB  0
1F90:  CALL   02A6
1F94:  BTFSC  16.7
1F96:  BSF    FF2.7
1F98:  MOVLW  30
1F9A:  ADDWF  01,W
1F9C:  MOVLB  5
1F9E:  MOVWF  x2B
1FA0:  CLRF   16
1FA2:  BTFSC  FF2.7
1FA4:  BSF    16.7
1FA6:  BCF    FF2.7
....................   data[4] = mes % 10 + 0x30; 
1FA8:  MOVFF  56A,648
1FAC:  MOVLW  0A
1FAE:  MOVLB  6
1FB0:  MOVWF  x49
1FB2:  MOVLB  0
1FB4:  CALL   02A6
1FB8:  BTFSC  16.7
1FBA:  BSF    FF2.7
1FBC:  MOVLW  30
1FBE:  ADDWF  00,W
1FC0:  MOVLB  5
1FC2:  MOVWF  x29
1FC4:  CLRF   16
1FC6:  BTFSC  FF2.7
1FC8:  BSF    16.7
1FCA:  BCF    FF2.7
....................   data[3] = mes / 10 + 0x30; 
1FCC:  MOVFF  56A,648
1FD0:  MOVLW  0A
1FD2:  MOVLB  6
1FD4:  MOVWF  x49
1FD6:  MOVLB  0
1FD8:  CALL   02A6
1FDC:  BTFSC  16.7
1FDE:  BSF    FF2.7
1FE0:  MOVLW  30
1FE2:  ADDWF  01,W
1FE4:  MOVLB  5
1FE6:  MOVWF  x28
1FE8:  CLRF   16
1FEA:  BTFSC  FF2.7
1FEC:  BSF    16.7
1FEE:  BCF    FF2.7
....................   data[1] = dia % 10 + 0x30; 
1FF0:  MOVFF  569,648
1FF4:  MOVLW  0A
1FF6:  MOVLB  6
1FF8:  MOVWF  x49
1FFA:  MOVLB  0
1FFC:  CALL   02A6
2000:  BTFSC  16.7
2002:  BSF    FF2.7
2004:  MOVLW  30
2006:  ADDWF  00,W
2008:  MOVLB  5
200A:  MOVWF  x26
200C:  CLRF   16
200E:  BTFSC  FF2.7
2010:  BSF    16.7
2012:  BCF    FF2.7
....................   data[0] = dia / 10 + 0x30; 
2014:  MOVFF  569,648
2018:  MOVLW  0A
201A:  MOVLB  6
201C:  MOVWF  x49
201E:  MOVLB  0
2020:  CALL   02A6
2024:  BTFSC  16.7
2026:  BSF    FF2.7
2028:  MOVLW  30
202A:  ADDWF  01,W
202C:  MOVLB  5
202E:  MOVWF  x25
.................... } 
2030:  MOVLB  0
2032:  RETLW  00
....................  
.................... void escrita(void){ 
....................    write_eeprom((HR_START + 0), (int8) mem.hhr);          // Byte menos significativo 
*
2C04:  MOVLW  30
2C06:  MOVWF  FA9
2C08:  MOVFF  594,FA8
2C0C:  BCF    FA6.6
2C0E:  BCF    FA6.7
2C10:  BSF    FA6.2
2C12:  MOVF   FF2,W
2C14:  MOVWF  00
2C16:  BCF    FF2.7
2C18:  MOVLB  F
2C1A:  MOVLW  55
2C1C:  MOVWF  FA7
2C1E:  MOVLW  AA
2C20:  MOVWF  FA7
2C22:  BSF    FA6.1
2C24:  BTFSC  FA6.1
2C26:  BRA    2C24
2C28:  BCF    FA6.2
2C2A:  MOVF   00,W
2C2C:  IORWF  FF2,F
....................    write_eeprom((HR_START + 1), (int8)(mem.hhr >> 8));   // Próximo byte 
2C2E:  MOVFF  596,01
2C32:  MOVFF  597,02
2C36:  CLRF   03
2C38:  MOVFF  595,59D
2C3C:  MOVLW  31
2C3E:  MOVWF  FA9
2C40:  MOVFF  595,FA8
2C44:  BCF    FA6.6
2C46:  BCF    FA6.7
2C48:  BSF    FA6.2
2C4A:  MOVFF  FF2,00
2C4E:  BCF    FF2.7
2C50:  MOVLW  55
2C52:  MOVWF  FA7
2C54:  MOVLW  AA
2C56:  MOVWF  FA7
2C58:  BSF    FA6.1
2C5A:  BTFSC  FA6.1
2C5C:  BRA    2C5A
2C5E:  BCF    FA6.2
2C60:  MOVF   00,W
2C62:  IORWF  FF2,F
....................    write_eeprom((HR_START + 2), (int8)(mem.hhr >> 16));  // Próximo byte 
2C64:  MOVFF  597,01
2C68:  CLRF   02
2C6A:  CLRF   03
2C6C:  MOVFF  596,59D
2C70:  MOVLW  32
2C72:  MOVWF  FA9
2C74:  MOVFF  596,FA8
2C78:  BCF    FA6.6
2C7A:  BCF    FA6.7
2C7C:  BSF    FA6.2
2C7E:  MOVFF  FF2,00
2C82:  BCF    FF2.7
2C84:  MOVLW  55
2C86:  MOVWF  FA7
2C88:  MOVLW  AA
2C8A:  MOVWF  FA7
2C8C:  BSF    FA6.1
2C8E:  BTFSC  FA6.1
2C90:  BRA    2C8E
2C92:  BCF    FA6.2
2C94:  MOVF   00,W
2C96:  IORWF  FF2,F
....................    write_eeprom((HR_START + 3), (int8)(mem.hhr >> 24));  // Byte mais significativo 
2C98:  CLRF   01
2C9A:  CLRF   02
2C9C:  CLRF   03
2C9E:  MOVFF  597,59D
2CA2:  MOVLW  33
2CA4:  MOVWF  FA9
2CA6:  MOVFF  597,FA8
2CAA:  BCF    FA6.6
2CAC:  BCF    FA6.7
2CAE:  BSF    FA6.2
2CB0:  MOVFF  FF2,00
2CB4:  BCF    FF2.7
2CB6:  MOVLW  55
2CB8:  MOVWF  FA7
2CBA:  MOVLW  AA
2CBC:  MOVWF  FA7
2CBE:  BSF    FA6.1
2CC0:  BTFSC  FA6.1
2CC2:  BRA    2CC0
2CC4:  BCF    FA6.2
2CC6:  MOVF   00,W
2CC8:  IORWF  FF2,F
....................    write_eeprom((MIN_START + 0), (int8) mem.hmin);          // Byte menos significativo 
2CCA:  MOVLW  34
2CCC:  MOVWF  FA9
2CCE:  MOVFF  592,FA8
2CD2:  BCF    FA6.6
2CD4:  BCF    FA6.7
2CD6:  BSF    FA6.2
2CD8:  MOVFF  FF2,00
2CDC:  BCF    FF2.7
2CDE:  MOVLW  55
2CE0:  MOVWF  FA7
2CE2:  MOVLW  AA
2CE4:  MOVWF  FA7
2CE6:  BSF    FA6.1
2CE8:  BTFSC  FA6.1
2CEA:  BRA    2CE8
2CEC:  BCF    FA6.2
2CEE:  MOVF   00,W
2CF0:  IORWF  FF2,F
....................    write_eeprom((MIN_START + 1), (int8)(mem.hmin >> 8));   // Próximo byte 
2CF2:  MOVLB  5
2CF4:  MOVF   x93,W
2CF6:  CLRF   03
2CF8:  MOVWF  x9C
2CFA:  MOVLW  35
2CFC:  MOVWF  FA9
2CFE:  MOVFF  59C,FA8
2D02:  BCF    FA6.6
2D04:  BCF    FA6.7
2D06:  BSF    FA6.2
2D08:  MOVF   FF2,W
2D0A:  MOVWF  00
2D0C:  BCF    FF2.7
2D0E:  MOVLB  F
2D10:  MOVLW  55
2D12:  MOVWF  FA7
2D14:  MOVLW  AA
2D16:  MOVWF  FA7
2D18:  BSF    FA6.1
2D1A:  BTFSC  FA6.1
2D1C:  BRA    2D1A
2D1E:  BCF    FA6.2
2D20:  MOVF   00,W
2D22:  IORWF  FF2,F
.................... } 
2D24:  MOVLB  0
2D26:  GOTO   3BA2 (RETURN)
....................  
.................... void lemem(void){ 
....................        // Leitura das quatro posições de memória e combinação em data32 
....................    mem.hhr = (unsigned int32)read_eeprom(HR_START + 0);             // Leitura da primeira posição 
*
0D60:  MOVFF  FF2,59C
0D64:  BCF    FF2.7
0D66:  MOVLW  30
0D68:  MOVWF  FA9
0D6A:  BCF    FA6.6
0D6C:  BCF    FA6.7
0D6E:  BSF    FA6.0
0D70:  MOVF   FA8,W
0D72:  MOVLB  5
0D74:  BTFSC  x9C.7
0D76:  BSF    FF2.7
0D78:  CLRF   x97
0D7A:  CLRF   x96
0D7C:  CLRF   x95
0D7E:  MOVWF  x94
....................    mem.hhr |= ((unsigned int32)read_eeprom(HR_START + 1)) << 8;     // Leitura da segunda posição 
0D80:  MOVFF  FF2,59C
0D84:  BCF    FF2.7
0D86:  MOVLW  31
0D88:  MOVWF  FA9
0D8A:  BCF    FA6.6
0D8C:  BCF    FA6.7
0D8E:  BSF    FA6.0
0D90:  MOVF   FA8,W
0D92:  BTFSC  x9C.7
0D94:  BSF    FF2.7
0D96:  CLRF   xA0
0D98:  CLRF   x9F
0D9A:  CLRF   x9E
0D9C:  MOVWF  x9D
0D9E:  MOVFF  59F,03
0DA2:  MOVFF  59E,02
0DA6:  MOVFF  59D,01
0DAA:  CLRF   00
0DAC:  MOVF   00,W
0DAE:  IORWF  x94,F
0DB0:  MOVF   01,W
0DB2:  IORWF  x95,F
0DB4:  MOVF   02,W
0DB6:  IORWF  x96,F
0DB8:  MOVF   03,W
0DBA:  IORWF  x97,F
....................    mem.hhr |= ((unsigned int32)read_eeprom(HR_START + 2)) << 16;    // Leitura da terceira posição 
0DBC:  MOVFF  FF2,59C
0DC0:  BCF    FF2.7
0DC2:  MOVLW  32
0DC4:  MOVWF  FA9
0DC6:  BCF    FA6.6
0DC8:  BCF    FA6.7
0DCA:  BSF    FA6.0
0DCC:  MOVF   FA8,W
0DCE:  BTFSC  x9C.7
0DD0:  BSF    FF2.7
0DD2:  CLRF   xA0
0DD4:  CLRF   x9F
0DD6:  CLRF   x9E
0DD8:  MOVWF  x9D
0DDA:  MOVFF  59E,03
0DDE:  MOVFF  59D,02
0DE2:  CLRF   00
0DE4:  CLRF   01
0DE6:  MOVF   00,W
0DE8:  IORWF  x94,F
0DEA:  MOVF   01,W
0DEC:  IORWF  x95,F
0DEE:  MOVF   02,W
0DF0:  IORWF  x96,F
0DF2:  MOVF   03,W
0DF4:  IORWF  x97,F
....................    mem.hhr |= ((unsigned int32)read_eeprom(HR_START + 3)) << 24;    // Leitura da quarta posição 
0DF6:  MOVFF  FF2,59C
0DFA:  BCF    FF2.7
0DFC:  MOVLW  33
0DFE:  MOVWF  FA9
0E00:  BCF    FA6.6
0E02:  BCF    FA6.7
0E04:  BSF    FA6.0
0E06:  MOVF   FA8,W
0E08:  BTFSC  x9C.7
0E0A:  BSF    FF2.7
0E0C:  CLRF   xA0
0E0E:  CLRF   x9F
0E10:  CLRF   x9E
0E12:  MOVWF  x9D
0E14:  MOVFF  59D,03
0E18:  CLRF   00
0E1A:  CLRF   01
0E1C:  CLRF   02
0E1E:  MOVF   00,W
0E20:  IORWF  x94,F
0E22:  MOVF   01,W
0E24:  IORWF  x95,F
0E26:  MOVF   02,W
0E28:  IORWF  x96,F
0E2A:  MOVF   03,W
0E2C:  IORWF  x97,F
....................      
....................    if(mem.hhr == 0xFFFFFFFF){ 
0E2E:  INCFSZ x94,W
0E30:  BRA    0E74
0E32:  INCFSZ x95,W
0E34:  BRA    0E74
0E36:  INCFSZ x96,W
0E38:  BRA    0E74
0E3A:  INCFSZ x97,W
0E3C:  BRA    0E74
....................       mem.hhr=0x00000000; 
0E3E:  CLRF   x97
0E40:  CLRF   x96
0E42:  CLRF   x95
0E44:  CLRF   x94
....................       horimetro.hhr = mem.hhr; 
0E46:  MOVFF  597,58C
0E4A:  MOVFF  596,58B
0E4E:  MOVFF  595,58A
0E52:  MOVFF  594,589
....................       conv_valor(hori, horimetro.hhr);  
0E56:  MOVFF  58A,59D
0E5A:  MOVFF  589,59C
0E5E:  MOVLW  05
0E60:  MOVWF  x9F
0E62:  MOVLW  2E
0E64:  MOVWF  x9E
0E66:  MOVFF  58A,5A1
0E6A:  MOVFF  589,5A0
0E6E:  MOVLB  0
0E70:  RCALL  0C2C
0E72:  MOVLB  5
....................    } 
....................     
....................    horimetro.hhr = mem.hhr; 
0E74:  MOVFF  597,58C
0E78:  MOVFF  596,58B
0E7C:  MOVFF  595,58A
0E80:  MOVFF  594,589
....................     
....................    mem.hmin = (unsigned int16)read_eeprom(MIN_START + 0);             // Leitura da primeira posição 
0E84:  MOVFF  FF2,59C
0E88:  BCF    FF2.7
0E8A:  MOVLW  34
0E8C:  MOVWF  FA9
0E8E:  BCF    FA6.6
0E90:  BCF    FA6.7
0E92:  BSF    FA6.0
0E94:  MOVF   FA8,W
0E96:  BTFSC  x9C.7
0E98:  BSF    FF2.7
0E9A:  CLRF   x93
0E9C:  MOVWF  x92
....................    mem.hmin |= ((unsigned int16)read_eeprom(MIN_START + 1)) << 8;     // Leitura da segunda posição 
0E9E:  MOVFF  FF2,59C
0EA2:  BCF    FF2.7
0EA4:  MOVLW  35
0EA6:  MOVWF  FA9
0EA8:  BCF    FA6.6
0EAA:  BCF    FA6.7
0EAC:  BSF    FA6.0
0EAE:  MOVF   FA8,W
0EB0:  BTFSC  x9C.7
0EB2:  BSF    FF2.7
0EB4:  CLRF   x9E
0EB6:  MOVWF  x9D
0EB8:  MOVFF  59D,03
0EBC:  MOVLW  00
0EBE:  IORWF  x92,F
0EC0:  MOVF   03,W
0EC2:  IORWF  x93,F
....................     
....................    if(mem.hmin == 0xFFFF){ 
0EC4:  INCFSZ x92,W
0EC6:  BRA    0F0C
0EC8:  INCFSZ x93,W
0ECA:  BRA    0F0C
....................       mem.hmin =0x0000; 
0ECC:  CLRF   x93
0ECE:  CLRF   x92
....................       horimetro.hmin = mem.hmin; 
0ED0:  MOVFF  593,588
0ED4:  MOVFF  592,587
....................       hori[9] = horimetro.hmin % 10 + 0x30; 
0ED8:  MOVFF  588,59D
0EDC:  MOVFF  587,59C
0EE0:  CLRF   x9F
0EE2:  MOVLW  0A
0EE4:  MOVWF  x9E
0EE6:  MOVLB  0
0EE8:  RCALL  0D1A
0EEA:  MOVLB  5
0EEC:  MOVLW  30
0EEE:  ADDWF  00,W
0EF0:  MOVWF  x37
....................       hori[8] = horimetro.hmin / 10 + 0x30; 
0EF2:  MOVFF  588,59D
0EF6:  MOVFF  587,59C
0EFA:  CLRF   x9F
0EFC:  MOVLW  0A
0EFE:  MOVWF  x9E
0F00:  MOVLB  0
0F02:  RCALL  0D1A
0F04:  MOVLW  30
0F06:  MOVLB  5
0F08:  ADDWF  01,W
0F0A:  MOVWF  x36
....................    } 
....................     
....................    horimetro.hmin = mem.hmin; 
0F0C:  MOVFF  593,588
0F10:  MOVFF  592,587
....................     
.................... } 
0F14:  MOVLB  0
0F16:  GOTO   3A02 (RETURN)
....................  
.................... void initdisp(void){ 
....................    OLED_Begin(); 
*
1246:  BRA    0FAE
....................    OLED_ClearDisplay(); 
1248:  RCALL  10C8
....................    //OLED_ROMBMP(0, 0, Logo, 64, 32); 
....................    OLED_Display(); 
124A:  RCALL  110E
....................    delay_ms(1000); 
124C:  MOVLW  04
124E:  MOVLB  5
1250:  MOVWF  x9C
1252:  CLRF   16
1254:  BTFSC  FF2.7
1256:  BSF    16.7
1258:  BCF    FF2.7
125A:  MOVLW  FA
125C:  MOVLB  6
125E:  MOVWF  x47
1260:  MOVLB  0
1262:  CALL   0344
1266:  BTFSC  16.7
1268:  BSF    FF2.7
126A:  MOVLB  5
126C:  DECFSZ x9C,F
126E:  BRA    1252
.................... } 
1270:  MOVLB  0
1272:  GOTO   3A06 (RETURN)
....................  
.................... void inithori(void){ 
....................    hori[9] = horimetro.hmin % 10 + 0x30; 
*
17F2:  MOVFF  588,59D
17F6:  MOVFF  587,59C
17FA:  MOVLB  5
17FC:  CLRF   x9F
17FE:  MOVLW  0A
1800:  MOVWF  x9E
1802:  MOVLB  0
1804:  CALL   0D1A
1808:  MOVLB  5
180A:  MOVLW  30
180C:  ADDWF  00,W
180E:  MOVWF  x37
....................    hori[8] = horimetro.hmin / 10 + 0x30; 
1810:  MOVFF  588,59D
1814:  MOVFF  587,59C
1818:  CLRF   x9F
181A:  MOVLW  0A
181C:  MOVWF  x9E
181E:  MOVLB  0
1820:  CALL   0D1A
1824:  MOVLW  30
1826:  MOVLB  5
1828:  ADDWF  01,W
182A:  MOVWF  x36
....................    conv_valor(hori, horimetro.hhr); 
182C:  MOVFF  58A,59D
1830:  MOVFF  589,59C
1834:  MOVLW  05
1836:  MOVWF  x9F
1838:  MOVLW  2E
183A:  MOVWF  x9E
183C:  MOVFF  58A,5A1
1840:  MOVFF  589,5A0
1844:  MOVLB  0
1846:  CALL   0C2C
....................    tmr[9] = horimetro.tmin % 10 + 0x30; 
184A:  MOVFF  58E,59D
184E:  MOVFF  58D,59C
1852:  MOVLB  5
1854:  CLRF   x9F
1856:  MOVLW  0A
1858:  MOVWF  x9E
185A:  MOVLB  0
185C:  CALL   0D1A
1860:  MOVLB  5
1862:  MOVLW  30
1864:  ADDWF  00,W
1866:  MOVWF  x43
....................    tmr[8] = horimetro.tmin / 10 + 0x30;   
1868:  MOVFF  58E,59D
186C:  MOVFF  58D,59C
1870:  CLRF   x9F
1872:  MOVLW  0A
1874:  MOVWF  x9E
1876:  MOVLB  0
1878:  CALL   0D1A
187C:  MOVLW  30
187E:  MOVLB  5
1880:  ADDWF  01,W
1882:  MOVWF  x42
....................    conv_valor(tmr, horimetro.thr); 
1884:  MOVLW  05
1886:  MOVWF  x9F
1888:  MOVLW  3A
188A:  MOVWF  x9E
188C:  MOVFF  590,5A1
1890:  MOVFF  58F,5A0
1894:  MOVLB  0
1896:  CALL   0C2C
....................    OLED_DrawText(2, 27, hori, 2); 
189A:  MOVLW  02
189C:  MOVLB  6
189E:  MOVWF  x0A
18A0:  MOVLW  1B
18A2:  MOVWF  x0B
18A4:  MOVLW  05
18A6:  MOVWF  x0D
18A8:  MOVLW  2E
18AA:  MOVWF  x0C
18AC:  MOVLW  02
18AE:  MOVWF  x0E
18B0:  MOVLB  0
18B2:  RCALL  17A8
....................    OLED_DrawText(2, 47, tmr, 2); 
18B4:  MOVLW  02
18B6:  MOVLB  6
18B8:  MOVWF  x0A
18BA:  MOVLW  2F
18BC:  MOVWF  x0B
18BE:  MOVLW  05
18C0:  MOVWF  x0D
18C2:  MOVLW  3A
18C4:  MOVWF  x0C
18C6:  MOVLW  02
18C8:  MOVWF  x0E
18CA:  MOVLB  0
18CC:  RCALL  17A8
.................... } 
18CE:  GOTO   3A0A (RETURN)

Configuration Fuses:
   Word  1: CE3C   IESO FCMEN HSPLL PLL5 CPUDIV4 USBDIV
   Word  2: 0E39   NOBROWNOUT WDT128 NOWDT BORV20 NOPUT VREGEN
   Word  3: 8500   NOPBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 00A5   STVREN NODEBUG LVP NOXINST ICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB

ROM data:
007FF8: B0 B1 B2 B3 B4 B5 B6 B7 
