CCS PCH C Compiler, Version 4.104, 5967               01-set-23 09:35

               Filename: C:\Users\Laboratorio\Desktop\Douglas Autoban\Projetos\Horimetro\Firmware\FW\TesteDS1307.lst

               ROM used: 14038 bytes (43%)
                         Largest free fragment is 18726
               RAM used: 1295 (63%) at main() level
                         1357 (66%) worst case
               Stack:    13 worst case (9 in main + 4 for interrupts)

*
0000:  GOTO   26BE
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.5
004A:  GOTO   0054
004E:  BTFSC  FF2.2
0050:  GOTO   0A8A
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include "C:\Users\Laboratorio\Desktop\Douglas Autoban\Projetos\Horimetro\Firmware\FW\TesteDS1307.h" 
.................... /*#include <18F4550.h> //8MHZ 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO                 //Internal RC Osc, no CLKOUT 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES BORV20                   //Brownout reset at 2.0V 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 //PORTB pins are configured as digital I/O on RESET 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES MCLR                     //Master Clear pin enabled 
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL1                     //Divide By 2(8MHz oscillator input) 
.................... #FUSES CPUDIV1                  //System Clock by 4 
.................... #FUSES USBDIV                   //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                   //USB voltage regulator enabled 
.................... #FUSES ICPRT                    //ICPRT enabled 
....................  
....................  
.................... #use delay(clock=8000000) 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #use i2c(Master,Fast, stream = SSD1306_STREAM, sda=PIN_B0,scl=PIN_B1)*/ 
....................  
.................... #include <18F4550.h>    //20MHZ 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                    //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES BORV20                   //Brownout reset at 2.0V 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                   //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES MCLR                     //Master Clear pin enabled 
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                     //PARA CRISTA EXTERNO É NECESSARIO PLL(5 P/ 20MHZ) 
.................... #FUSES CPUDIV4                  //No System Clock Postscaler 
.................... #FUSES USBDIV                   //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                   //USB voltage regulator enabled 
.................... #FUSES ICPRT                    //ICPRT enabled 
....................  
.................... #use delay(clock=20000000) 
*
0C10:  MOVLW  05
0C12:  MOVWF  FEA
0C14:  MOVLW  0C
0C16:  MOVWF  FE9
0C18:  MOVF   FEF,W
0C1A:  BZ    0C36
0C1C:  MOVLW  06
0C1E:  MOVWF  01
0C20:  CLRF   00
0C22:  DECFSZ 00,F
0C24:  BRA    0C22
0C26:  DECFSZ 01,F
0C28:  BRA    0C20
0C2A:  MOVLW  7B
0C2C:  MOVWF  00
0C2E:  DECFSZ 00,F
0C30:  BRA    0C2E
0C32:  DECFSZ FEF,F
0C34:  BRA    0C1C
0C36:  GOTO   0CB6 (RETURN)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #use i2c(Master,Fast, stream = SSD1306_STREAM, sda=PIN_B0,scl=PIN_B1) 
*
02D2:  MOVLW  08
02D4:  MOVWF  01
02D6:  NOP   
02D8:  BCF    F8A.1
02DA:  BCF    F93.1
02DC:  NOP   
02DE:  MOVLB  5
02E0:  RLCF   x49,F
02E2:  BCF    F8A.0
02E4:  BTFSC  FD8.0
02E6:  BSF    F93.0
02E8:  BTFSS  FD8.0
02EA:  BCF    F93.0
02EC:  BSF    F93.1
02EE:  BTFSS  F81.1
02F0:  BRA    02EE
02F2:  DECFSZ 01,F
02F4:  BRA    02F8
02F6:  BRA    02FC
02F8:  MOVLB  0
02FA:  BRA    02D6
02FC:  NOP   
02FE:  BCF    F8A.1
0300:  BCF    F93.1
0302:  NOP   
0304:  BSF    F93.0
0306:  NOP   
0308:  NOP   
030A:  BSF    F93.1
030C:  BTFSS  F81.1
030E:  BRA    030C
0310:  CLRF   01
0312:  NOP   
0314:  BTFSC  F81.0
0316:  BSF    01.0
0318:  BCF    F8A.1
031A:  BCF    F93.1
031C:  BCF    F8A.0
031E:  BCF    F93.0
0320:  MOVLB  0
0322:  RETLW  00
*
10D8:  MOVLW  08
10DA:  MOVLB  5
10DC:  MOVWF  x0D
10DE:  MOVFF  00,50E
10E2:  BSF    F93.0
10E4:  NOP   
10E6:  BSF    F93.1
10E8:  BTFSS  F81.1
10EA:  BRA    10E8
10EC:  BTFSC  F81.0
10EE:  BSF    FD8.0
10F0:  BTFSS  F81.0
10F2:  BCF    FD8.0
10F4:  RLCF   01,F
10F6:  NOP   
10F8:  BCF    F93.1
10FA:  BCF    F8A.1
10FC:  DECFSZ x0D,F
10FE:  BRA    10E2
1100:  BSF    F93.0
1102:  NOP   
1104:  BCF    F8A.0
1106:  MOVF   x0E,W
1108:  BTFSS  FD8.2
110A:  BCF    F93.0
110C:  NOP   
110E:  BSF    F93.1
1110:  BTFSS  F81.1
1112:  BRA    1110
1114:  NOP   
1116:  BCF    F8A.1
1118:  BCF    F93.1
111A:  NOP   
111C:  BCF    F8A.0
111E:  BCF    F93.0
1120:  MOVLB  0
1122:  RETLW  00
....................  
.................... #include <SSD1306OLED.c> 
.................... /****************************************************************************** 
....................  SSD1306 OLED driver for CCS PIC C compiler (SSD1306OLED.c)                   * 
....................  Reference: Adafruit Industries SSD1306 OLED driver and graphics library.     * 
....................                                                                               * 
....................  The driver is for I2C mode only.                                             * 
....................                                                                               * 
....................  https://simple-circuit.com/                                                   * 
....................                                                                               * 
.................... ******************************************************************************* 
.................... ******************************************************************************* 
....................  This is a library for our Monochrome OLEDs based on SSD1306 drivers          * 
....................                                                                               * 
....................   Pick one up today in the adafruit shop!                                     * 
....................   ------> http://www.adafruit.com/category/63_98                              * 
....................                                                                               * 
....................  Adafruit invests time and resources providing this open source code,         * 
....................  please support Adafruit and open-source hardware by purchasing               * 
....................  products from Adafruit!                                                      * 
....................                                                                               * 
....................  Written by Limor Fried/Ladyada  for Adafruit Industries.                     * 
....................  BSD license, check license.txt for more information                          * 
....................  All text above, and the splash screen must be included in any redistribution * 
.................... *******************************************************************************/ 
....................  
....................  
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //------------------------------ Definitions ---------------------------------// 
....................  
.................... #ifndef SSD1306_I2C_ADDRESS 
....................  #define SSD1306_I2C_ADDRESS   0x78 
.................... #endif 
....................  
.................... #if !defined SSD1306_128_32 && !defined SSD1306_96_16 
.................... #define SSD1306_128_64 
.................... #endif 
.................... #if defined SSD1306_128_32 && defined SSD1306_96_16 
....................   #error "Only one SSD1306 display can be specified at once" 
.................... #endif 
....................  
.................... #if defined SH1106_128_64 
....................    #define OLED_LCDWIDTH            128 
....................    #define OLED_LCDHEIGHT            64 
.................... #endif 
.................... #if defined SSD1306_128_64 
....................   #define SSD1306_LCDWIDTH            128 
....................   #define SSD1306_LCDHEIGHT            64 
.................... #endif 
.................... #if defined SSD1306_128_32 
....................   #define SSD1306_LCDWIDTH            128 
....................   #define SSD1306_LCDHEIGHT            32 
.................... #endif 
.................... #if defined SSD1306_96_16 
....................   #define SSD1306_LCDWIDTH             96 
....................   #define SSD1306_LCDHEIGHT            16 
.................... #endif 
....................  
.................... #define SSD1306_SETCONTRAST          0x81 
.................... #define SSD1306_DISPLAYALLON_RESUME  0xA4 
.................... #define SSD1306_DISPLAYALLON         0xA5 
.................... #define SSD1306_NORMALDISPLAY        0xA6 
.................... #define SSD1306_INVERTDISPLAY_       0xA7 
.................... #define SSD1306_DISPLAYOFF           0xAE 
.................... #define SSD1306_DISPLAYON            0xAF 
.................... #define SSD1306_SETDISPLAYOFFSET     0xD3 
.................... #define SSD1306_SETCOMPINS           0xDA 
.................... #define SSD1306_SETVCOMDETECT        0xDB 
.................... #define SSD1306_SETDISPLAYCLOCKDIV   0xD5 
.................... #define SSD1306_SETPRECHARGE         0xD9 
.................... #define SSD1306_SETMULTIPLEX         0xA8 
.................... #define SSD1306_SETLOWCOLUMN         0x00 
.................... #define SSD1306_SETHIGHCOLUMN        0x10 
.................... #define SSD1306_SETSTARTLINE         0x40 
.................... #define SSD1306_MEMORYMODE           0x20 
.................... #define SSD1306_COLUMNADDR           0x21 
.................... #define SSD1306_PAGEADDR             0x22 
.................... #define SSD1306_COMSCANINC           0xC0 
.................... #define SSD1306_COMSCANDEC           0xC8 
.................... #define SSD1306_SEGREMAP             0xA0 
.................... #define SSD1306_CHARGEPUMP           0x8D 
.................... #define SSD1306_EXTERNALVCC          0x01 
.................... #define SSD1306_SWITCHCAPVCC         0x02 
....................  
.................... // Scrolling #defines 
.................... #define SSD1306_ACTIVATE_SCROLL                      0x2F 
.................... #define SSD1306_DEACTIVATE_SCROLL                    0x2E 
.................... #define SSD1306_SET_VERTICAL_SCROLL_AREA             0xA3 
.................... #define SSD1306_RIGHT_HORIZONTAL_SCROLL              0x26 
.................... #define SSD1306_LEFT_HORIZONTAL_SCROLL               0x27 
.................... #define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29 
.................... #define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL  0x2A 
....................  
.................... #define ssd1306_swap(a, b) { int16_t t = a; a = b; b = t; } 
....................  
.................... uint8_t _i2caddr, _vccstate, x_pos, y_pos, text_size; 
.................... int1 wrap = TRUE; 
....................  
.................... void ssd1306_command(uint8_t c); 
.................... void SSD1306_Begin(uint8_t vccstate = SSD1306_SWITCHCAPVCC, uint8_t i2caddr = SSD1306_I2C_ADDRESS); 
.................... void SSD1306_DrawPixel(uint8_t x, uint8_t y, int1 color = TRUE); 
.................... void SSD1306_StartScrollRight(uint8_t start, uint8_t stop); 
.................... void SSD1306_StartScrollLeft(uint8_t start, uint8_t stop); 
.................... void SSD1306_StartScrollDiagRight(uint8_t start, uint8_t stop); 
.................... void SSD1306_StartScrollDiagLeft(uint8_t start, uint8_t stop); 
.................... void SSD1306_StopScroll(void); 
.................... void SSD1306_Dim(int1 dim); 
.................... void SSD1306_Display(void); 
.................... void SSD1306_ClearDisplay(void); 
.................... void SSD1306_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int1 color = TRUE); 
.................... void SSD1306_DrawFastHLine(uint8_t x, uint8_t y, uint8_t w, int1 color = TRUE); 
.................... void SSD1306_DrawFastVLine(uint8_t x, uint8_t y, uint8_t h, int1 color = TRUE); 
.................... void SSD1306_FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, int1 color = TRUE); 
.................... void SSD1306_FillScreen(int1 color = TRUE); 
.................... void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r); 
.................... void SSD1306_DrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername); 
.................... void SSD1306_FillCircle(int16_t x0, int16_t y0, int16_t r, int1 color = TRUE); 
.................... void SSD1306_FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, int1 color = TRUE); 
.................... void SSD1306_DrawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h); 
.................... void SSD1306_DrawRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r); 
.................... void SSD1306_FillRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r, int1 color = TRUE); 
.................... void SSD1306_DrawTriangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2); 
.................... void SSD1306_FillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, int1 color = TRUE); 
.................... void SSD1306_DrawChar(uint8_t x, uint8_t y, uint8_t c, uint8_t size = 1); 
.................... void SSD1306_DrawText(uint8_t x, uint8_t y, char *_text, uint8_t size = 1); 
.................... void SSD1306_TextSize(uint8_t t_size); 
.................... void SSD1306_GotoXY(uint8_t x, uint8_t y); 
.................... void SSD1306_Print(uint8_t c); 
.................... void SSD1306_PutCustomC(rom uint8_t *c); 
.................... void SSD1306_SetTextWrap(int1 w); 
.................... void SSD1306_InvertDisplay(int1 i); 
.................... void SSD1306_DrawBMP(uint8_t x, uint8_t y, rom uint8_t *bitmap, uint8_t w, uint8_t h); 
....................  
.................... //--------------------------------------------------------------------------// 
....................  
.................... const char Font[] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x5F, 0x00, 0x00, 
.................... 0x00, 0x07, 0x00, 0x07, 0x00, 
.................... 0x14, 0x7F, 0x14, 0x7F, 0x14, 
.................... 0x24, 0x2A, 0x7F, 0x2A, 0x12, 
.................... 0x23, 0x13, 0x08, 0x64, 0x62, 
.................... 0x36, 0x49, 0x56, 0x20, 0x50, 
.................... 0x00, 0x08, 0x07, 0x03, 0x00, 
.................... 0x00, 0x1C, 0x22, 0x41, 0x00, 
.................... 0x00, 0x41, 0x22, 0x1C, 0x00, 
.................... 0x2A, 0x1C, 0x7F, 0x1C, 0x2A, 
.................... 0x08, 0x08, 0x3E, 0x08, 0x08, 
.................... 0x00, 0x80, 0x70, 0x30, 0x00, 
.................... 0x08, 0x08, 0x08, 0x08, 0x08, 
.................... 0x00, 0x00, 0x60, 0x60, 0x00, 
.................... 0x20, 0x10, 0x08, 0x04, 0x02, 
.................... 0x3E, 0x51, 0x49, 0x45, 0x3E, 
.................... 0x00, 0x42, 0x7F, 0x40, 0x00, 
.................... 0x72, 0x49, 0x49, 0x49, 0x46, 
.................... 0x21, 0x41, 0x49, 0x4D, 0x33, 
.................... 0x18, 0x14, 0x12, 0x7F, 0x10, 
.................... 0x27, 0x45, 0x45, 0x45, 0x39, 
.................... 0x3C, 0x4A, 0x49, 0x49, 0x31, 
.................... 0x41, 0x21, 0x11, 0x09, 0x07, 
.................... 0x36, 0x49, 0x49, 0x49, 0x36, 
.................... 0x46, 0x49, 0x49, 0x29, 0x1E, 
.................... 0x00, 0x00, 0x14, 0x00, 0x00, 
.................... 0x00, 0x40, 0x34, 0x00, 0x00, 
.................... 0x00, 0x08, 0x14, 0x22, 0x41, 
.................... 0x14, 0x14, 0x14, 0x14, 0x14, 
.................... 0x00, 0x41, 0x22, 0x14, 0x08, 
.................... 0x02, 0x01, 0x59, 0x09, 0x06, 
.................... 0x3E, 0x41, 0x5D, 0x59, 0x4E, 
.................... 0x7C, 0x12, 0x11, 0x12, 0x7C, 
.................... 0x7F, 0x49, 0x49, 0x49, 0x36, 
.................... 0x3E, 0x41, 0x41, 0x41, 0x22, 
.................... 0x7F, 0x41, 0x41, 0x41, 0x3E, 
.................... 0x7F, 0x49, 0x49, 0x49, 0x41, 
.................... 0x7F, 0x09, 0x09, 0x09, 0x01, 
.................... 0x3E, 0x41, 0x41, 0x51, 0x73, 
.................... 0x7F, 0x08, 0x08, 0x08, 0x7F, 
.................... 0x00, 0x41, 0x7F, 0x41, 0x00, 
.................... 0x20, 0x40, 0x41, 0x3F, 0x01, 
.................... 0x7F, 0x08, 0x14, 0x22, 0x41, 
.................... 0x7F, 0x40, 0x40, 0x40, 0x40, 
.................... 0x7F, 0x02, 0x1C, 0x02, 0x7F, 
.................... 0x7F, 0x04, 0x08, 0x10, 0x7F, 
.................... 0x3E, 0x41, 0x41, 0x41, 0x3E, 
.................... 0x7F, 0x09, 0x09, 0x09, 0x06, 
.................... 0x3E, 0x41, 0x51, 0x21, 0x5E, 
.................... 0x7F, 0x09, 0x19, 0x29, 0x46 
.................... }; 
.................... const char Font2[] = { 
.................... 0x26, 0x49, 0x49, 0x49, 0x32, 
.................... 0x03, 0x01, 0x7F, 0x01, 0x03, 
.................... 0x3F, 0x40, 0x40, 0x40, 0x3F, 
.................... 0x1F, 0x20, 0x40, 0x20, 0x1F, 
.................... 0x3F, 0x40, 0x38, 0x40, 0x3F, 
.................... 0x63, 0x14, 0x08, 0x14, 0x63, 
.................... 0x03, 0x04, 0x78, 0x04, 0x03, 
.................... 0x61, 0x59, 0x49, 0x4D, 0x43, 
.................... 0x00, 0x7F, 0x41, 0x41, 0x41, 
.................... 0x02, 0x04, 0x08, 0x10, 0x20, 
.................... 0x00, 0x41, 0x41, 0x41, 0x7F, 
.................... 0x04, 0x02, 0x01, 0x02, 0x04, 
.................... 0x40, 0x40, 0x40, 0x40, 0x40, 
.................... 0x00, 0x03, 0x07, 0x08, 0x00, 
.................... 0x20, 0x54, 0x54, 0x78, 0x40, 
.................... 0x7F, 0x28, 0x44, 0x44, 0x38, 
.................... 0x38, 0x44, 0x44, 0x44, 0x28, 
.................... 0x38, 0x44, 0x44, 0x28, 0x7F, 
.................... 0x38, 0x54, 0x54, 0x54, 0x18, 
.................... 0x00, 0x08, 0x7E, 0x09, 0x02, 
.................... 0x18, 0xA4, 0xA4, 0x9C, 0x78, 
.................... 0x7F, 0x08, 0x04, 0x04, 0x78, 
.................... 0x00, 0x44, 0x7D, 0x40, 0x00, 
.................... 0x20, 0x40, 0x40, 0x3D, 0x00, 
.................... 0x7F, 0x10, 0x28, 0x44, 0x00, 
.................... 0x00, 0x41, 0x7F, 0x40, 0x00, 
.................... 0x7C, 0x04, 0x78, 0x04, 0x78, 
.................... 0x7C, 0x08, 0x04, 0x04, 0x78, 
.................... 0x38, 0x44, 0x44, 0x44, 0x38, 
.................... 0xFC, 0x18, 0x24, 0x24, 0x18, 
.................... 0x18, 0x24, 0x24, 0x18, 0xFC, 
.................... 0x7C, 0x08, 0x04, 0x04, 0x08, 
.................... 0x48, 0x54, 0x54, 0x54, 0x24, 
.................... 0x04, 0x04, 0x3F, 0x44, 0x24, 
.................... 0x3C, 0x40, 0x40, 0x20, 0x7C, 
.................... 0x1C, 0x20, 0x40, 0x20, 0x1C, 
.................... 0x3C, 0x40, 0x30, 0x40, 0x3C, 
.................... 0x44, 0x28, 0x10, 0x28, 0x44, 
.................... 0x4C, 0x90, 0x90, 0x90, 0x7C, 
.................... 0x44, 0x64, 0x54, 0x4C, 0x44, 
.................... 0x00, 0x08, 0x36, 0x41, 0x00, 
.................... 0x00, 0x00, 0x77, 0x00, 0x00, 
.................... 0x00, 0x41, 0x36, 0x08, 0x00, 
.................... 0x02, 0x01, 0x02, 0x04, 0x02 
.................... }; 
....................  
.................... static uint8_t ssd1306_buffer[SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
.................... 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x80, 0x80, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 
.................... 0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0xFF 
.................... #if (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH > 96*16) 
.................... , 
.................... 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 
.................... 0x80, 0xFF, 0xFF, 0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x80, 0x80, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x8C, 0x8E, 0x84, 0x00, 0x00, 0x80, 0xF8, 
.................... 0xF8, 0xF8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x80, 
.................... 0x00, 0xE0, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xC7, 0x01, 0x01, 
.................... 0x01, 0x01, 0x83, 0xFF, 0xFF, 0x00, 0x00, 0x7C, 0xFE, 0xC7, 0x01, 0x01, 0x01, 0x01, 0x83, 0xFF, 
.................... 0xFF, 0xFF, 0x00, 0x38, 0xFE, 0xC7, 0x83, 0x01, 0x01, 0x01, 0x83, 0xC7, 0xFF, 0xFF, 0x00, 0x00, 
.................... 0x01, 0xFF, 0xFF, 0x01, 0x01, 0x00, 0xFF, 0xFF, 0x07, 0x01, 0x01, 0x01, 0x00, 0x00, 0x7F, 0xFF, 
.................... 0x80, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0xFF, 
.................... 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x03, 0x0F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC7, 0xC7, 0x8F, 
.................... 0x8F, 0x9F, 0xBF, 0xFF, 0xFF, 0xC3, 0xC0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC, 
.................... 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0xC0, 0x00, 0x01, 0x03, 0x03, 0x03, 
.................... 0x03, 0x03, 0x01, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 
.................... 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x03, 0x03, 0x00, 0x00, 
.................... 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
.................... 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x03, 
.................... 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... #if (SSD1306_LCDHEIGHT == 64) 
.................... , 
.................... 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x1F, 0x0F, 
.................... 0x87, 0xC7, 0xF7, 0xFF, 0xFF, 0x1F, 0x1F, 0x3D, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0x7C, 0x7D, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x07, 0x00, 0x30, 0x30, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xC0, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0xC0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3F, 0x1F, 
.................... 0x0F, 0x07, 0x1F, 0x7F, 0xFF, 0xFF, 0xF8, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0xE0, 
.................... 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 
.................... 0x00, 0xFC, 0xFE, 0xFC, 0x0C, 0x06, 0x06, 0x0E, 0xFC, 0xF8, 0x00, 0x00, 0xF0, 0xF8, 0x1C, 0x0E, 
.................... 0x06, 0x06, 0x06, 0x0C, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFC, 
.................... 0xFE, 0xFC, 0x00, 0x18, 0x3C, 0x7E, 0x66, 0xE6, 0xCE, 0x84, 0x00, 0x00, 0x06, 0xFF, 0xFF, 0x06, 
.................... 0x06, 0xFC, 0xFE, 0xFC, 0x0C, 0x06, 0x06, 0x06, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0xC0, 0xF8, 
.................... 0xFC, 0x4E, 0x46, 0x46, 0x46, 0x4E, 0x7C, 0x78, 0x40, 0x18, 0x3C, 0x76, 0xE6, 0xCE, 0xCC, 0x80, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F, 0x3F, 0x1F, 0x0F, 0x03, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 
.................... 0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x03, 0x07, 0x0E, 0x0C, 
.................... 0x18, 0x18, 0x0C, 0x06, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x01, 0x0F, 0x0E, 0x0C, 0x18, 0x0C, 0x0F, 
.................... 0x07, 0x01, 0x00, 0x04, 0x0E, 0x0C, 0x18, 0x0C, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 
.................... 0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x07, 
.................... 0x07, 0x0C, 0x0C, 0x18, 0x1C, 0x0C, 0x06, 0x06, 0x00, 0x04, 0x0E, 0x0C, 0x18, 0x0C, 0x0F, 0x07, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... #endif 
.................... #endif 
.................... }; 
....................  
.................... void ssd1306_command(uint8_t c) 
.................... { 
*
0C3A:  MOVLB  5
0C3C:  CLRF   x1E
....................     uint8_t control = 0x00;   // Co = 0, D/C = 0 
....................     I2C_Start(SSD1306_STREAM); 
0C3E:  BSF    F93.0
0C40:  NOP   
0C42:  BSF    F93.1
0C44:  NOP   
0C46:  BCF    F8A.0
0C48:  BCF    F93.0
0C4A:  NOP   
0C4C:  BCF    F8A.1
0C4E:  BCF    F93.1
0C50:  CLRF   16
0C52:  BTFSC  FF2.7
0C54:  BSF    16.7
0C56:  BCF    FF2.7
....................     I2C_Write(SSD1306_STREAM, _i2caddr); 
0C58:  MOVFF  17,549
0C5C:  MOVLB  0
0C5E:  CALL   02D2
0C62:  BTFSC  16.7
0C64:  BSF    FF2.7
0C66:  CLRF   16
0C68:  BTFSC  FF2.7
0C6A:  BSF    16.7
0C6C:  BCF    FF2.7
....................     I2C_Write(SSD1306_STREAM, control); 
0C6E:  MOVFF  51E,549
0C72:  CALL   02D2
0C76:  BTFSC  16.7
0C78:  BSF    FF2.7
0C7A:  CLRF   16
0C7C:  BTFSC  FF2.7
0C7E:  BSF    16.7
0C80:  BCF    FF2.7
....................     I2C_Write(SSD1306_STREAM, c); 
0C82:  MOVFF  51D,549
0C86:  CALL   02D2
0C8A:  BTFSC  16.7
0C8C:  BSF    FF2.7
....................     I2C_Stop(SSD1306_STREAM); 
0C8E:  BCF    F93.0
0C90:  NOP   
0C92:  BSF    F93.1
0C94:  BTFSS  F81.1
0C96:  BRA    0C94
0C98:  NOP   
0C9A:  BRA    0C9C
0C9C:  NOP   
0C9E:  BSF    F93.0
0CA0:  NOP   
.................... } 
0CA2:  RETLW  00
....................  
.................... uint8_t vccstate = SSD1306_SWITCHCAPVCC; 
.................... uint8_t i2caddr = SSD1306_I2C_ADDRESS; 
.................... void SSD1306_Begin() 
.................... { 
....................   _vccstate = vccstate; 
0CA4:  MOVFF  41D,18
....................   _i2caddr  = i2caddr; 
0CA8:  MOVFF  41E,17
....................   delay_ms(10); 
0CAC:  MOVLW  0A
0CAE:  MOVLB  5
0CB0:  MOVWF  x0C
0CB2:  MOVLB  0
0CB4:  BRA    0C10
....................  
....................   #ifdef SSD1306_RST 
....................     output_low(SSD1306_RST); 
....................     output_drive(SSD1306_RST); 
....................     delay_ms(10); 
....................     output_high(SSD1306_RST); 
....................   #endif 
....................    
....................   // Init sequence 
....................   ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE 
0CB6:  MOVLW  AE
0CB8:  MOVLB  5
0CBA:  MOVWF  x1D
0CBC:  MOVLB  0
0CBE:  RCALL  0C3A
....................   ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5 
0CC0:  MOVLW  D5
0CC2:  MOVLB  5
0CC4:  MOVWF  x1D
0CC6:  MOVLB  0
0CC8:  RCALL  0C3A
....................   ssd1306_command(0x80);                                  // the suggested ratio 0x80 
0CCA:  MOVLW  80
0CCC:  MOVLB  5
0CCE:  MOVWF  x1D
0CD0:  MOVLB  0
0CD2:  RCALL  0C3A
....................  
....................   ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8 
0CD4:  MOVLW  A8
0CD6:  MOVLB  5
0CD8:  MOVWF  x1D
0CDA:  MOVLB  0
0CDC:  RCALL  0C3A
....................   ssd1306_command(SSD1306_LCDHEIGHT - 1); 
0CDE:  MOVLW  3F
0CE0:  MOVLB  5
0CE2:  MOVWF  x1D
0CE4:  MOVLB  0
0CE6:  RCALL  0C3A
....................  
....................   ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3 
0CE8:  MOVLW  D3
0CEA:  MOVLB  5
0CEC:  MOVWF  x1D
0CEE:  MOVLB  0
0CF0:  RCALL  0C3A
....................   ssd1306_command(0x0);                                   // no offset 
0CF2:  MOVLB  5
0CF4:  CLRF   x1D
0CF6:  MOVLB  0
0CF8:  RCALL  0C3A
....................   ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0 
0CFA:  MOVLW  40
0CFC:  MOVLB  5
0CFE:  MOVWF  x1D
0D00:  MOVLB  0
0D02:  RCALL  0C3A
....................   ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D 
0D04:  MOVLW  8D
0D06:  MOVLB  5
0D08:  MOVWF  x1D
0D0A:  MOVLB  0
0D0C:  RCALL  0C3A
....................   if (vccstate == SSD1306_EXTERNALVCC) 
0D0E:  MOVLB  4
0D10:  DECFSZ x1D,W
0D12:  BRA    0D20
....................     { ssd1306_command(0x10); } 
0D14:  MOVLW  10
0D16:  MOVLB  5
0D18:  MOVWF  x1D
0D1A:  MOVLB  0
0D1C:  RCALL  0C3A
....................   else 
0D1E:  BRA    0D2A
....................     { ssd1306_command(0x14); } 
0D20:  MOVLW  14
0D22:  MOVLB  5
0D24:  MOVWF  x1D
0D26:  MOVLB  0
0D28:  RCALL  0C3A
....................   ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20 
0D2A:  MOVLW  20
0D2C:  MOVLB  5
0D2E:  MOVWF  x1D
0D30:  MOVLB  0
0D32:  RCALL  0C3A
....................   ssd1306_command(0x00);                                  // 0x0 act like ks0108 
0D34:  MOVLB  5
0D36:  CLRF   x1D
0D38:  MOVLB  0
0D3A:  RCALL  0C3A
....................   ssd1306_command(SSD1306_SEGREMAP | 0x1); 
0D3C:  MOVLW  A1
0D3E:  MOVLB  5
0D40:  MOVWF  x1D
0D42:  MOVLB  0
0D44:  RCALL  0C3A
....................   ssd1306_command(SSD1306_COMSCANDEC); 
0D46:  MOVLW  C8
0D48:  MOVLB  5
0D4A:  MOVWF  x1D
0D4C:  MOVLB  0
0D4E:  RCALL  0C3A
....................  
....................  #if defined SSD1306_128_32 
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA 
....................   ssd1306_command(0x02); 
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81 
....................   ssd1306_command(0x8F); 
....................  
.................... #elif defined SSD1306_128_64 
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA 
0D50:  MOVLW  DA
0D52:  MOVLB  5
0D54:  MOVWF  x1D
0D56:  MOVLB  0
0D58:  RCALL  0C3A
....................   ssd1306_command(0x12); 
0D5A:  MOVLW  12
0D5C:  MOVLB  5
0D5E:  MOVWF  x1D
0D60:  MOVLB  0
0D62:  RCALL  0C3A
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81 
0D64:  MOVLW  81
0D66:  MOVLB  5
0D68:  MOVWF  x1D
0D6A:  MOVLB  0
0D6C:  RCALL  0C3A
....................   if (vccstate == SSD1306_EXTERNALVCC) 
0D6E:  MOVLB  4
0D70:  DECFSZ x1D,W
0D72:  BRA    0D80
....................     { ssd1306_command(0x9F); } 
0D74:  MOVLW  9F
0D76:  MOVLB  5
0D78:  MOVWF  x1D
0D7A:  MOVLB  0
0D7C:  RCALL  0C3A
....................   else 
0D7E:  BRA    0D8A
....................     { ssd1306_command(0xCF); } 
0D80:  MOVLW  CF
0D82:  MOVLB  5
0D84:  MOVWF  x1D
0D86:  MOVLB  0
0D88:  RCALL  0C3A
....................  
.................... #elif defined SSD1306_96_16 
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA 
....................   ssd1306_command(0x2);   //ada x12 
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81 
....................   if (vccstate == SSD1306_EXTERNALVCC) 
....................     { ssd1306_command(0x10); } 
....................   else 
....................     { ssd1306_command(0xAF); } 
....................  
.................... #endif 
....................  
....................   ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9 
0D8A:  MOVLW  D9
0D8C:  MOVLB  5
0D8E:  MOVWF  x1D
0D90:  MOVLB  0
0D92:  RCALL  0C3A
....................   if (vccstate == SSD1306_EXTERNALVCC) 
0D94:  MOVLB  4
0D96:  DECFSZ x1D,W
0D98:  BRA    0DA6
....................     { ssd1306_command(0x22); } 
0D9A:  MOVLW  22
0D9C:  MOVLB  5
0D9E:  MOVWF  x1D
0DA0:  MOVLB  0
0DA2:  RCALL  0C3A
....................   else 
0DA4:  BRA    0DB0
....................     { ssd1306_command(0xF1); } 
0DA6:  MOVLW  F1
0DA8:  MOVLB  5
0DAA:  MOVWF  x1D
0DAC:  MOVLB  0
0DAE:  RCALL  0C3A
....................   ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB 
0DB0:  MOVLW  DB
0DB2:  MOVLB  5
0DB4:  MOVWF  x1D
0DB6:  MOVLB  0
0DB8:  RCALL  0C3A
....................   ssd1306_command(0x40); 
0DBA:  MOVLW  40
0DBC:  MOVLB  5
0DBE:  MOVWF  x1D
0DC0:  MOVLB  0
0DC2:  RCALL  0C3A
....................   ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4 
0DC4:  MOVLW  A4
0DC6:  MOVLB  5
0DC8:  MOVWF  x1D
0DCA:  MOVLB  0
0DCC:  RCALL  0C3A
....................   ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6 
0DCE:  MOVLW  A6
0DD0:  MOVLB  5
0DD2:  MOVWF  x1D
0DD4:  MOVLB  0
0DD6:  RCALL  0C3A
....................  
....................   ssd1306_command(SSD1306_DEACTIVATE_SCROLL); 
0DD8:  MOVLW  2E
0DDA:  MOVLB  5
0DDC:  MOVWF  x1D
0DDE:  MOVLB  0
0DE0:  RCALL  0C3A
....................  
....................   ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel 
0DE2:  MOVLW  AF
0DE4:  MOVLB  5
0DE6:  MOVWF  x1D
0DE8:  MOVLB  0
0DEA:  RCALL  0C3A
....................    
....................   // set cursor to (0, 0) 
....................   x_pos = 0; 
0DEC:  CLRF   19
....................   y_pos = 0; 
0DEE:  CLRF   1A
....................   // set text size to 1 
....................   text_size = 1; 
0DF0:  MOVLW  01
0DF2:  MOVWF  1B
.................... } 
0DF4:  GOTO   33EA (RETURN)
....................  
.................... void SSD1306_DrawPixel(uint8_t x, uint8_t y, int1 color = TRUE) 
.................... { 
....................   if ((x >= SSD1306_LCDWIDTH) || (y >= SSD1306_LCDHEIGHT)) 
*
1156:  MOVLB  5
1158:  MOVF   x3D,W
115A:  SUBLW  7F
115C:  BNC   1164
115E:  MOVF   x3E,W
1160:  SUBLW  3F
1162:  BC    1166
....................     return; 
1164:  BRA    1242
....................   if (color) 
1166:  MOVF   x3F,F
1168:  BZ    11D6
....................     ssd1306_buffer[x + (uint16_t)(y / 8) * SSD1306_LCDWIDTH] |=  (1 << (y & 7)); 
116A:  RRCF   x3E,W
116C:  MOVWF  00
116E:  RRCF   00,F
1170:  RRCF   00,F
1172:  MOVLW  1F
1174:  ANDWF  00,F
1176:  MOVF   00,W
1178:  CLRF   x41
117A:  MOVWF  x40
117C:  RLCF   x40,W
117E:  MOVWF  02
1180:  RLCF   x41,W
1182:  MOVWF  03
1184:  RLCF   02,F
1186:  RLCF   03,F
1188:  RLCF   02,F
118A:  RLCF   03,F
118C:  RLCF   02,F
118E:  RLCF   03,F
1190:  RLCF   02,F
1192:  RLCF   03,F
1194:  RLCF   02,F
1196:  RLCF   03,F
1198:  RLCF   02,F
119A:  RLCF   03,F
119C:  MOVLW  80
119E:  ANDWF  02,F
11A0:  MOVF   02,W
11A2:  ADDWF  x3D,W
11A4:  MOVWF  x40
11A6:  MOVLW  00
11A8:  ADDWFC 03,W
11AA:  MOVWF  x41
11AC:  MOVLW  1D
11AE:  ADDWF  x40,W
11B0:  MOVWF  FE9
11B2:  MOVLW  00
11B4:  ADDWFC x41,W
11B6:  MOVWF  FEA
11B8:  MOVF   x3E,W
11BA:  ANDLW  07
11BC:  MOVWF  01
11BE:  MOVLW  01
11C0:  MOVWF  00
11C2:  MOVF   01,F
11C4:  BZ    11CE
11C6:  BCF    FD8.0
11C8:  RLCF   00,F
11CA:  DECFSZ 01,F
11CC:  BRA    11C6
11CE:  MOVF   00,W
11D0:  IORWF  FEF,W
11D2:  MOVWF  FEF
....................   else 
11D4:  BRA    1242
....................     ssd1306_buffer[x + (uint16_t)(y / 8) * SSD1306_LCDWIDTH] &=  ~(1 << (y & 7)); 
11D6:  RRCF   x3E,W
11D8:  MOVWF  00
11DA:  RRCF   00,F
11DC:  RRCF   00,F
11DE:  MOVLW  1F
11E0:  ANDWF  00,F
11E2:  MOVF   00,W
11E4:  CLRF   x41
11E6:  MOVWF  x40
11E8:  RLCF   x40,W
11EA:  MOVWF  02
11EC:  RLCF   x41,W
11EE:  MOVWF  03
11F0:  RLCF   02,F
11F2:  RLCF   03,F
11F4:  RLCF   02,F
11F6:  RLCF   03,F
11F8:  RLCF   02,F
11FA:  RLCF   03,F
11FC:  RLCF   02,F
11FE:  RLCF   03,F
1200:  RLCF   02,F
1202:  RLCF   03,F
1204:  RLCF   02,F
1206:  RLCF   03,F
1208:  MOVLW  80
120A:  ANDWF  02,F
120C:  MOVF   02,W
120E:  ADDWF  x3D,W
1210:  MOVWF  x40
1212:  MOVLW  00
1214:  ADDWFC 03,W
1216:  MOVWF  x41
1218:  MOVLW  1D
121A:  ADDWF  x40,W
121C:  MOVWF  FE9
121E:  MOVLW  00
1220:  ADDWFC x41,W
1222:  MOVWF  FEA
1224:  MOVF   x3E,W
1226:  ANDLW  07
1228:  MOVWF  01
122A:  MOVLW  01
122C:  MOVWF  00
122E:  MOVF   01,F
1230:  BZ    123A
1232:  BCF    FD8.0
1234:  RLCF   00,F
1236:  DECFSZ 01,F
1238:  BRA    1232
123A:  MOVF   00,W
123C:  XORLW  FF
123E:  ANDWF  FEF,W
1240:  MOVWF  FEF
.................... } 
1242:  MOVLB  0
1244:  RETLW  00
....................  
.................... void SSD1306_StartScrollRight(uint8_t start, uint8_t stop) 
.................... { 
....................   ssd1306_command(SSD1306_RIGHT_HORIZONTAL_SCROLL); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(start); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(stop); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(0XFF); 
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL); 
.................... } 
....................  
.................... void SSD1306_StartScrollLeft(uint8_t start, uint8_t stop) 
.................... { 
....................   ssd1306_command(SSD1306_LEFT_HORIZONTAL_SCROLL); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(start); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(stop); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(0XFF); 
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL); 
.................... } 
....................  
.................... void SSD1306_StartScrollDiagRight(uint8_t start, uint8_t stop) 
.................... { 
....................   ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(SSD1306_LCDHEIGHT); 
....................   ssd1306_command(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(start); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(stop); 
....................   ssd1306_command(0X01); 
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL); 
.................... } 
....................  
.................... void SSD1306_StartScrollDiagLeft(uint8_t start, uint8_t stop) 
.................... { 
....................   ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(SSD1306_LCDHEIGHT); 
....................   ssd1306_command(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(start); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(stop); 
....................   ssd1306_command(0X01); 
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL); 
.................... } 
....................  
.................... void SSD1306_StopScroll(void) 
.................... { 
....................   ssd1306_command(SSD1306_DEACTIVATE_SCROLL); 
.................... } 
....................  
.................... void SSD1306_Dim(int1 dim) 
.................... { 
....................   uint8_t contrast; 
....................   if (dim) 
....................     contrast = 0; // Dimmed display 
....................   else { 
....................     if (_vccstate == SSD1306_EXTERNALVCC) 
....................       contrast = 0x9F; 
....................     else 
....................       contrast = 0xCF; 
....................   } 
....................   // the range of contrast to too small to be really useful 
....................   // it is useful to dim the display 
....................   ssd1306_command(SSD1306_SETCONTRAST); 
....................   ssd1306_command(contrast); 
.................... } 
....................  
.................... void SSD1306_Display(void) 
.................... { 
*
0E18:  MOVLB  5
0E1A:  CLRF   x0D
0E1C:  CLRF   x0C
....................    uint16_t n2=0, p; 
....................    rom uint8_t Page[8]={0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7}; 
....................    ssd1306_command(SSD1306_COLUMNADDR); 
0E1E:  MOVLW  21
0E20:  MOVWF  x1D
0E22:  MOVLB  0
0E24:  RCALL  0C3A
....................    ssd1306_command(0);   // Column start address (0 = reset) 
0E26:  MOVLB  5
0E28:  CLRF   x1D
0E2A:  MOVLB  0
0E2C:  RCALL  0C3A
....................    ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset) 
0E2E:  MOVLW  7F
0E30:  MOVLB  5
0E32:  MOVWF  x1D
0E34:  MOVLB  0
0E36:  RCALL  0C3A
....................  
....................    ssd1306_command(SSD1306_PAGEADDR); 
0E38:  MOVLW  22
0E3A:  MOVLB  5
0E3C:  MOVWF  x1D
0E3E:  MOVLB  0
0E40:  RCALL  0C3A
....................    ssd1306_command(0); // Page start address (0 = reset) 
0E42:  MOVLB  5
0E44:  CLRF   x1D
0E46:  MOVLB  0
0E48:  RCALL  0C3A
....................     for (p=1; p<=SSD1306_LCDHEIGHT/8; ++p) 
0E4A:  MOVLB  5
0E4C:  CLRF   x0F
0E4E:  MOVLW  01
0E50:  MOVWF  x0E
0E52:  MOVF   x0F,F
0E54:  BTFSS  FD8.2
0E56:  BRA    0F46
0E58:  MOVF   x0E,W
0E5A:  SUBLW  08
0E5C:  BNC   0F46
....................    {  
....................       ssd1306_command(0x01);//Set Lower Column Address (1)  
0E5E:  MOVLW  01
0E60:  MOVWF  x1D
0E62:  MOVLB  0
0E64:  RCALL  0C3A
....................       ssd1306_command(0x10);//Set Higher Column Address (2)  
0E66:  MOVLW  10
0E68:  MOVLB  5
0E6A:  MOVWF  x1D
0E6C:  MOVLB  0
0E6E:  RCALL  0C3A
....................       ssd1306_command(Page[p-1]);//Set Page Address(12) 
0E70:  MOVLW  01
0E72:  MOVLB  5
0E74:  SUBWF  x0E,W
0E76:  MOVWF  x11
0E78:  MOVLW  00
0E7A:  SUBWFB x0F,W
0E7C:  MOVWF  x12
0E7E:  MOVLW  F8
0E80:  ADDWF  x11,F
0E82:  MOVLW  7F
0E84:  ADDWFC x12,F
0E86:  CLRF   FF8
0E88:  MOVFF  512,FF7
0E8C:  MOVFF  511,FF6
0E90:  MOVLW  05
0E92:  MOVWF  FEA
0E94:  MOVLW  13
0E96:  MOVWF  FE9
0E98:  CLRF   x1E
0E9A:  MOVLW  01
0E9C:  MOVWF  x1D
0E9E:  MOVLB  0
0EA0:  BRA    0DF8
0EA2:  MOVFF  513,51D
0EA6:  RCALL  0C3A
....................       // send a bunch of data in one xmission 
....................       I2C_Start(SSD1306_STREAM); 
0EA8:  BSF    F93.0
0EAA:  NOP   
0EAC:  BSF    F93.1
0EAE:  NOP   
0EB0:  BCF    F8A.0
0EB2:  BCF    F93.0
0EB4:  NOP   
0EB6:  BCF    F8A.1
0EB8:  BCF    F93.1
0EBA:  CLRF   16
0EBC:  BTFSC  FF2.7
0EBE:  BSF    16.7
0EC0:  BCF    FF2.7
....................       I2C_Write(SSD1306_STREAM, _i2caddr); 
0EC2:  MOVFF  17,549
0EC6:  CALL   02D2
0ECA:  BTFSC  16.7
0ECC:  BSF    FF2.7
0ECE:  CLRF   16
0ED0:  BTFSC  FF2.7
0ED2:  BSF    16.7
0ED4:  BCF    FF2.7
....................       I2C_Write(SSD1306_STREAM, 0x40); 
0ED6:  MOVLW  40
0ED8:  MOVLB  5
0EDA:  MOVWF  x49
0EDC:  MOVLB  0
0EDE:  CALL   02D2
0EE2:  BTFSC  16.7
0EE4:  BSF    FF2.7
....................       uint8_t x; 
....................       for (x = 0; x < 16; x++) { 
0EE6:  MOVLB  5
0EE8:  CLRF   x10
0EEA:  MOVF   x10,W
0EEC:  SUBLW  0F
0EEE:  BNC   0F22
....................         I2C_Write(SSD1306_STREAM, ssd1306_buffer[n2]); 
0EF0:  MOVLW  1D
0EF2:  ADDWF  x0C,W
0EF4:  MOVWF  FE9
0EF6:  MOVLW  00
0EF8:  ADDWFC x0D,W
0EFA:  MOVWF  FEA
0EFC:  MOVFF  FEF,511
0F00:  CLRF   16
0F02:  BTFSC  FF2.7
0F04:  BSF    16.7
0F06:  BCF    FF2.7
0F08:  MOVFF  511,549
0F0C:  MOVLB  0
0F0E:  CALL   02D2
0F12:  BTFSC  16.7
0F14:  BSF    FF2.7
....................         n2++; 
0F16:  MOVLB  5
0F18:  INCF   x0C,F
0F1A:  BTFSC  FD8.2
0F1C:  INCF   x0D,F
....................       } 
0F1E:  INCF   x10,F
0F20:  BRA    0EEA
....................       n2--; 
0F22:  MOVF   x0C,W
0F24:  BTFSC  FD8.2
0F26:  DECF   x0D,F
0F28:  DECF   x0C,F
....................       I2C_Stop(SSD1306_STREAM); 
0F2A:  BCF    F93.0
0F2C:  NOP   
0F2E:  BSF    F93.1
0F30:  BTFSS  F81.1
0F32:  BRA    0F30
0F34:  NOP   
0F36:  BRA    0F38
0F38:  NOP   
0F3A:  BSF    F93.0
0F3C:  NOP   
....................     } 
0F3E:  INCF   x0E,F
0F40:  BTFSC  FD8.2
0F42:  INCF   x0F,F
0F44:  BRA    0E52
.................... } 
0F46:  MOVLB  0
0F48:  RETLW  00
....................  
.................... void SSD1306_ClearDisplay(void) 
.................... { 
....................   uint16_t i; 
....................   for ( i = 0; i < (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT / 8); i++) 
0F4A:  MOVLB  5
0F4C:  CLRF   x0D
0F4E:  CLRF   x0C
0F50:  MOVF   x0D,W
0F52:  SUBLW  03
0F54:  BNC   0F6C
....................     ssd1306_buffer[i] = 0; 
0F56:  MOVLW  1D
0F58:  ADDWF  x0C,W
0F5A:  MOVWF  FE9
0F5C:  MOVLW  00
0F5E:  ADDWFC x0D,W
0F60:  MOVWF  FEA
0F62:  CLRF   FEF
0F64:  INCF   x0C,F
0F66:  BTFSC  FD8.2
0F68:  INCF   x0D,F
0F6A:  BRA    0F50
.................... } 
0F6C:  MOVLB  0
0F6E:  RETLW  00
....................  
.................... void SSD1306_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int1 color = TRUE) 
.................... { 
....................   int1 steep; 
....................   int8_t ystep; 
....................   uint8_t dx, dy; 
....................   int16_t err; 
....................   steep = abs(y1 - y0) > abs(x1 - x0); 
*
1246:  MOVLB  5
1248:  BCF    x2F.0
124A:  MOVF   x28,W
124C:  SUBWF  x2C,W
124E:  MOVWF  x3D
1250:  MOVF   x29,W
1252:  SUBWFB x2D,W
1254:  MOVWF  x3E
1256:  MOVWF  03
1258:  MOVF   x3D,W
125A:  BTFSS  x3E.7
125C:  BRA    126E
125E:  MOVLW  00
1260:  BSF    FD8.0
1262:  SUBFWB x3D,W
1264:  MOVWF  00
1266:  MOVLW  00
1268:  SUBFWB x3E,W
126A:  MOVWF  03
126C:  MOVF   00,W
126E:  MOVWF  x3D
1270:  MOVFF  03,53E
1274:  MOVF   x26,W
1276:  SUBWF  x2A,W
1278:  MOVWF  x3F
127A:  MOVF   x27,W
127C:  SUBWFB x2B,W
127E:  MOVWF  x40
1280:  MOVWF  03
1282:  MOVF   x3F,W
1284:  BTFSS  x40.7
1286:  BRA    1298
1288:  MOVLW  00
128A:  BSF    FD8.0
128C:  SUBFWB x3F,W
128E:  MOVWF  00
1290:  MOVLW  00
1292:  SUBFWB x40,W
1294:  MOVWF  03
1296:  MOVF   00,W
1298:  MOVWF  01
129A:  BTFSS  03.7
129C:  BRA    12A4
129E:  BTFSS  x3E.7
12A0:  BRA    12B6
12A2:  BRA    12A8
12A4:  BTFSC  x3E.7
12A6:  BRA    12B8
12A8:  MOVF   03,W
12AA:  SUBWF  x3E,W
12AC:  BNC   12B8
12AE:  BNZ   12B6
12B0:  MOVF   x3D,W
12B2:  SUBWF  01,W
12B4:  BC    12B8
12B6:  BSF    x2F.0
....................   if (steep) { 
12B8:  BTFSS  x2F.0
12BA:  BRA    12EC
....................     ssd1306_swap(x0, y0); 
12BC:  MOVFF  527,536
12C0:  MOVFF  526,535
12C4:  MOVFF  529,527
12C8:  MOVFF  528,526
12CC:  MOVFF  536,529
12D0:  MOVFF  535,528
....................     ssd1306_swap(x1, y1); 
12D4:  MOVFF  52B,538
12D8:  MOVFF  52A,537
12DC:  MOVFF  52D,52B
12E0:  MOVFF  52C,52A
12E4:  MOVFF  538,52D
12E8:  MOVFF  537,52C
....................   } 
....................   if (x0 > x1) { 
12EC:  BTFSS  x2B.7
12EE:  BRA    12F6
12F0:  BTFSS  x27.7
12F2:  BRA    1308
12F4:  BRA    12FA
12F6:  BTFSC  x27.7
12F8:  BRA    1338
12FA:  MOVF   x2B,W
12FC:  SUBWF  x27,W
12FE:  BNC   1338
1300:  BNZ   1308
1302:  MOVF   x26,W
1304:  SUBWF  x2A,W
1306:  BC    1338
....................     ssd1306_swap(x0, x1); 
1308:  MOVFF  527,53A
130C:  MOVFF  526,539
1310:  MOVFF  52B,527
1314:  MOVFF  52A,526
1318:  MOVFF  53A,52B
131C:  MOVFF  539,52A
....................     ssd1306_swap(y0, y1); 
1320:  MOVFF  529,53C
1324:  MOVFF  528,53B
1328:  MOVFF  52D,529
132C:  MOVFF  52C,528
1330:  MOVFF  53C,52D
1334:  MOVFF  53B,52C
....................   } 
....................   dx = x1 - x0; 
1338:  MOVF   x26,W
133A:  SUBWF  x2A,W
133C:  MOVWF  00
133E:  MOVF   x27,W
1340:  SUBWFB x2B,W
1342:  MOVFF  00,531
....................   dy = abs(y1 - y0); 
1346:  MOVF   x28,W
1348:  SUBWF  x2C,W
134A:  MOVWF  x3D
134C:  MOVF   x29,W
134E:  SUBWFB x2D,W
1350:  MOVWF  x3E
1352:  MOVWF  03
1354:  MOVF   x3D,W
1356:  BTFSS  x3E.7
1358:  BRA    136A
135A:  MOVLW  00
135C:  BSF    FD8.0
135E:  SUBFWB x3D,W
1360:  MOVWF  00
1362:  MOVLW  00
1364:  SUBFWB x3E,W
1366:  MOVWF  03
1368:  MOVF   00,W
136A:  MOVWF  x32
....................  
....................   err = dx / 2; 
136C:  BCF    FD8.0
136E:  RRCF   x31,W
1370:  CLRF   03
1372:  MOVWF  x33
1374:  MOVFF  03,534
....................   if (y0 < y1) 
1378:  BTFSS  x29.7
137A:  BRA    1382
137C:  BTFSS  x2D.7
137E:  BRA    1394
1380:  BRA    1386
1382:  BTFSC  x2D.7
1384:  BRA    139A
1386:  MOVF   x29,W
1388:  SUBWF  x2D,W
138A:  BNC   139A
138C:  BNZ   1394
138E:  MOVF   x2C,W
1390:  SUBWF  x28,W
1392:  BC    139A
....................     ystep = 1; 
1394:  MOVLW  01
1396:  MOVWF  x30
....................   else 
1398:  BRA    139E
....................     ystep = -1; 
139A:  MOVLW  FF
139C:  MOVWF  x30
....................  
....................   for (; x0 <= x1; x0++) { 
139E:  BTFSS  x27.7
13A0:  BRA    13A8
13A2:  BTFSS  x2B.7
13A4:  BRA    13BA
13A6:  BRA    13AC
13A8:  BTFSC  x2B.7
13AA:  BRA    143C
13AC:  MOVF   x27,W
13AE:  SUBWF  x2B,W
13B0:  BNC   143C
13B2:  BNZ   13BA
13B4:  MOVF   x26,W
13B6:  SUBWF  x2A,W
13B8:  BNC   143C
....................     if (steep) { 
13BA:  BTFSS  x2F.0
13BC:  BRA    13E8
....................       if(color) SSD1306_DrawPixel(y0, x0); 
13BE:  MOVF   x2E,F
13C0:  BZ    13D6
13C2:  MOVFF  528,53D
13C6:  MOVFF  526,53E
13CA:  MOVLW  01
13CC:  MOVWF  x3F
13CE:  MOVLB  0
13D0:  RCALL  1156
....................       else      SSD1306_DrawPixel(y0, x0, FALSE); 
13D2:  BRA    13E4
13D4:  MOVLB  5
13D6:  MOVFF  528,53D
13DA:  MOVFF  526,53E
13DE:  CLRF   x3F
13E0:  MOVLB  0
13E2:  RCALL  1156
....................     } 
....................     else { 
13E4:  BRA    140E
13E6:  MOVLB  5
....................       if(color) SSD1306_DrawPixel(x0, y0); 
13E8:  MOVF   x2E,F
13EA:  BZ    1400
13EC:  MOVFF  526,53D
13F0:  MOVFF  528,53E
13F4:  MOVLW  01
13F6:  MOVWF  x3F
13F8:  MOVLB  0
13FA:  RCALL  1156
....................       else      SSD1306_DrawPixel(x0, y0, FALSE); 
13FC:  BRA    140E
13FE:  MOVLB  5
1400:  MOVFF  526,53D
1404:  MOVFF  528,53E
1408:  CLRF   x3F
140A:  MOVLB  0
140C:  RCALL  1156
....................     } 
....................     err -= dy; 
140E:  MOVLB  5
1410:  MOVF   x32,W
1412:  SUBWF  x33,F
1414:  MOVLW  00
1416:  SUBWFB x34,F
....................     if (err < 0) { 
1418:  BTFSC  x34.7
141A:  BRA    141E
141C:  BRA    1434
....................       y0  += ystep; 
141E:  CLRF   03
1420:  MOVF   x30,W
1422:  BTFSC  FE8.7
1424:  DECF   03,F
1426:  ADDWF  x28,F
1428:  MOVF   03,W
142A:  ADDWFC x29,F
....................       err += dx; 
142C:  MOVF   x31,W
142E:  ADDWF  x33,F
1430:  MOVLW  00
1432:  ADDWFC x34,F
....................     } 
....................   } 
1434:  INCF   x26,F
1436:  BTFSC  FD8.2
1438:  INCF   x27,F
143A:  BRA    139E
.................... } 
143C:  MOVLB  0
143E:  RETLW  00
....................  
.................... void SSD1306_DrawFastHLine(uint8_t x, uint8_t y, uint8_t w, int1 color = TRUE) 
.................... { 
....................    SSD1306_DrawLine(x, y, x + w - 1, y, color); 
*
1B50:  MOVLB  5
1B52:  MOVF   x13,W
1B54:  ADDWF  x11,W
1B56:  ADDLW  FF
1B58:  MOVWF  x15
1B5A:  CLRF   x27
1B5C:  MOVFF  511,526
1B60:  CLRF   x29
1B62:  MOVFF  512,528
1B66:  CLRF   x2B
1B68:  MOVWF  x2A
1B6A:  CLRF   x2D
1B6C:  MOVFF  512,52C
1B70:  MOVFF  514,52E
1B74:  MOVLB  0
1B76:  CALL   1246
.................... } 
1B7A:  RETLW  00
....................  
.................... void SSD1306_DrawFastVLine(uint8_t x, uint8_t y, uint8_t h, int1 color = TRUE) 
.................... { 
....................   SSD1306_DrawLine(x, y, x, y + h - 1, color); 
*
1440:  MOVLB  5
1442:  MOVF   x23,W
1444:  ADDWF  x22,W
1446:  ADDLW  FF
1448:  MOVWF  x25
144A:  CLRF   x27
144C:  MOVFF  521,526
1450:  CLRF   x29
1452:  MOVFF  522,528
1456:  CLRF   x2B
1458:  MOVFF  521,52A
145C:  CLRF   x2D
145E:  MOVWF  x2C
1460:  MOVFF  524,52E
1464:  MOVLB  0
1466:  RCALL  1246
.................... } 
1468:  RETLW  00
....................  
.................... void SSD1306_FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, int1 color = TRUE) 
.................... { 
....................   int16_t i; 
....................   for (i = x; i < x + w; i++) 
146A:  CLRF   03
146C:  MOVLB  5
146E:  MOVFF  51A,51F
1472:  MOVFF  03,520
1476:  MOVF   x1C,W
1478:  ADDWF  x1A,W
147A:  BTFSC  x20.7
147C:  BRA    1486
147E:  MOVF   x20,F
1480:  BNZ   14A4
1482:  SUBWF  x1F,W
1484:  BC    14A4
....................     SSD1306_DrawFastVLine(i, y, h, color); 
1486:  MOVFF  51F,521
148A:  MOVFF  51B,522
148E:  MOVFF  51D,523
1492:  MOVFF  51E,524
1496:  MOVLB  0
1498:  RCALL  1440
149A:  MOVLB  5
149C:  INCF   x1F,F
149E:  BTFSC  FD8.2
14A0:  INCF   x20,F
14A2:  BRA    1476
.................... } 
14A4:  MOVLB  0
14A6:  RETLW  00
....................  
.................... void SSD1306_FillScreen(int1 color = TRUE) { 
....................   SSD1306_FillRect(0, 0, SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT, color); 
.................... } 
....................  
.................... void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r) 
.................... { 
....................   int16_t f = 1 - r; 
....................   int16_t ddF_x = 1; 
....................   int16_t ddF_y = -2 * r; 
....................   int16_t x = 0; 
....................   int16_t y = r; 
....................  
....................   SSD1306_DrawPixel(x0  , y0 + r); 
....................   SSD1306_DrawPixel(x0  , y0 - r); 
....................   SSD1306_DrawPixel(x0 + r, y0); 
....................   SSD1306_DrawPixel(x0 - r, y0); 
....................  
....................   while (x < y) { 
....................     if (f >= 0) { 
....................       y--; 
....................       ddF_y += 2; 
....................       f += ddF_y; 
....................     } 
....................     x++; 
....................     ddF_x += 2; 
....................     f += ddF_x; 
....................  
....................     SSD1306_DrawPixel(x0 + x, y0 + y); 
....................     SSD1306_DrawPixel(x0 - x, y0 + y); 
....................     SSD1306_DrawPixel(x0 + x, y0 - y); 
....................     SSD1306_DrawPixel(x0 - x, y0 - y); 
....................     SSD1306_DrawPixel(x0 + y, y0 + x); 
....................     SSD1306_DrawPixel(x0 - y, y0 + x); 
....................     SSD1306_DrawPixel(x0 + y, y0 - x); 
....................     SSD1306_DrawPixel(x0 - y, y0 - x); 
....................   } 
....................  
.................... } 
....................  
.................... void SSD1306_DrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername) 
.................... { 
....................   int16_t f     = 1 - r; 
....................   int16_t ddF_x = 1; 
....................   int16_t ddF_y = -2 * r; 
....................   int16_t x     = 0; 
....................   int16_t y     = r; 
....................  
....................   while (x < y) { 
....................     if (f >= 0) { 
....................       y--; 
....................       ddF_y += 2; 
....................       f     += ddF_y; 
....................     } 
....................     x++; 
....................     ddF_x += 2; 
....................     f     += ddF_x; 
....................     if (cornername & 0x4) { 
....................       SSD1306_DrawPixel(x0 + x, y0 + y); 
....................       SSD1306_DrawPixel(x0 + y, y0 + x); 
....................     } 
....................     if (cornername & 0x2) { 
....................       SSD1306_DrawPixel(x0 + x, y0 - y); 
....................       SSD1306_DrawPixel(x0 + y, y0 - x); 
....................     } 
....................     if (cornername & 0x8) { 
....................       SSD1306_DrawPixel(x0 - y, y0 + x); 
....................       SSD1306_DrawPixel(x0 - x, y0 + y); 
....................     } 
....................     if (cornername & 0x1) { 
....................       SSD1306_DrawPixel(x0 - y, y0 - x); 
....................       SSD1306_DrawPixel(x0 - x, y0 - y); 
....................     } 
....................   } 
....................  
.................... } 
....................  
.................... void SSD1306_FillCircle(int16_t x0, int16_t y0, int16_t r, int1 color = TRUE) 
.................... { 
....................   SSD1306_DrawFastVLine(x0, y0 - r, 2 * r + 1, color); 
....................   SSD1306_FillCircleHelper(x0, y0, r, 3, 0, color); 
.................... } 
....................  
.................... // Used to do circles and roundrects 
.................... void SSD1306_FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, int1 color = TRUE) { 
....................   int16_t f     = 1 - r; 
....................   int16_t ddF_x = 1; 
....................   int16_t ddF_y = -2 * r; 
....................   int16_t x     = 0; 
....................   int16_t y     = r; 
....................  
....................   while (x < y) { 
....................     if (f >= 0) { 
....................       y--; 
....................       ddF_y += 2; 
....................       f     += ddF_y; 
....................     } 
....................     x++; 
....................     ddF_x += 2; 
....................     f     += ddF_x; 
....................  
....................     if (cornername & 0x01) { 
....................       SSD1306_DrawFastVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color); 
....................       SSD1306_DrawFastVLine(x0 + y, y0 - x, 2 * x + 1 + delta, color); 
....................     } 
....................     if (cornername & 0x02) { 
....................       SSD1306_DrawFastVLine(x0 - x, y0 - y, 2 * y + 1 + delta, color); 
....................       SSD1306_DrawFastVLine(x0 - y, y0 - x, 2 * x + 1 + delta, color); 
....................     } 
....................   } 
....................  
.................... } 
....................  
.................... // Draw a rectangle 
.................... void SSD1306_DrawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h) 
.................... { 
....................   SSD1306_DrawFastHLine(x, y, w); 
*
1B7C:  MOVFF  50C,511
1B80:  MOVFF  50D,512
1B84:  MOVFF  50E,513
1B88:  MOVLW  01
1B8A:  MOVLB  5
1B8C:  MOVWF  x14
1B8E:  MOVLB  0
1B90:  RCALL  1B50
....................   SSD1306_DrawFastHLine(x, y + h - 1, w); 
1B92:  MOVLB  5
1B94:  MOVF   x0F,W
1B96:  ADDWF  x0D,W
1B98:  ADDLW  FF
1B9A:  MOVWF  x10
1B9C:  MOVFF  50C,511
1BA0:  MOVWF  x12
1BA2:  MOVFF  50E,513
1BA6:  MOVLW  01
1BA8:  MOVWF  x14
1BAA:  MOVLB  0
1BAC:  RCALL  1B50
....................   SSD1306_DrawFastVLine(x, y, h); 
1BAE:  MOVFF  50C,521
1BB2:  MOVFF  50D,522
1BB6:  MOVFF  50F,523
1BBA:  MOVLW  01
1BBC:  MOVLB  5
1BBE:  MOVWF  x24
1BC0:  MOVLB  0
1BC2:  RCALL  1440
....................   SSD1306_DrawFastVLine(x + w - 1, y, h); 
1BC4:  MOVLB  5
1BC6:  MOVF   x0E,W
1BC8:  ADDWF  x0C,W
1BCA:  ADDLW  FF
1BCC:  MOVWF  x10
1BCE:  MOVWF  x21
1BD0:  MOVFF  50D,522
1BD4:  MOVFF  50F,523
1BD8:  MOVLW  01
1BDA:  MOVWF  x24
1BDC:  MOVLB  0
1BDE:  RCALL  1440
.................... } 
1BE0:  RETLW  00
....................  
.................... // Draw a rounded rectangle 
.................... void SSD1306_DrawRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r) 
.................... { 
....................   // smarter version 
....................   SSD1306_DrawFastHLine(x + r, y, w - 2 * r); // Top 
....................   SSD1306_DrawFastHLine(x + r, y + h - 1, w - 2 * r); // Bottom 
....................   SSD1306_DrawFastVLine(x, y + r, h - 2 * r); // Left 
....................   SSD1306_DrawFastVLine(x + w - 1, y + r, h - 2 * r); // Right 
....................   // draw four corners 
....................   SSD1306_DrawCircleHelper(x + r, y + r, r, 1); 
....................   SSD1306_DrawCircleHelper(x + w - r - 1, y + r, r, 2); 
....................   SSD1306_DrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4); 
....................   SSD1306_DrawCircleHelper(x + r, y + h - r - 1, r, 8); 
.................... } 
....................  
.................... // Fill a rounded rectangle 
.................... void SSD1306_FillRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r, int1 color = TRUE) 
.................... { 
....................   // smarter version 
....................   SSD1306_FillRect(x + r, y, w - 2 * r, h, color); 
....................   // draw four corners 
....................   SSD1306_FillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color); 
....................   SSD1306_FillCircleHelper(x + r        , y + r, r, 2, h - 2 * r - 1, color); 
.................... } 
....................  
.................... // Draw a triangle 
.................... void SSD1306_DrawTriangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) 
.................... { 
....................   SSD1306_DrawLine(x0, y0, x1, y1); 
....................   SSD1306_DrawLine(x1, y1, x2, y2); 
....................   SSD1306_DrawLine(x2, y2, x0, y0); 
.................... } 
....................  
.................... // Fill a triangle 
.................... void SSD1306_FillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, int1 color = TRUE) 
.................... { 
....................   int16_t a, b, y, last; 
....................   // Sort coordinates by Y order (y2 >= y1 >= y0) 
....................   if (y0 > y1) { 
....................     ssd1306_swap(y0, y1); ssd1306_swap(x0, x1); 
....................   } 
....................   if (y1 > y2) { 
....................     ssd1306_swap(y2, y1); ssd1306_swap(x2, x1); 
....................   } 
....................   if (y0 > y1) { 
....................     ssd1306_swap(y0, y1); ssd1306_swap(x0, x1); 
....................   } 
....................  
....................   if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing 
....................     a = b = x0; 
....................     if(x1 < a)      a = x1; 
....................     else if(x1 > b) b = x1; 
....................     if(x2 < a)      a = x2; 
....................     else if(x2 > b) b = x2; 
....................     SSD1306_DrawFastHLine(a, y0, b - a + 1, color); 
....................     return; 
....................   } 
....................  
....................   int16_t 
....................   dx01 = x1 - x0, 
....................   dy01 = y1 - y0, 
....................   dx02 = x2 - x0, 
....................   dy02 = y2 - y0, 
....................   dx12 = x2 - x1, 
....................   dy12 = y2 - y1; 
....................   int32_t  sa   = 0, sb   = 0; 
....................  
....................   // For upper part of triangle, find scanline crossings for segments 
....................   // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1 
....................   // is included here (and second loop will be skipped, avoiding a /0 
....................   // error there), otherwise scanline y1 is skipped here and handled 
....................   // in the second loop...which also avoids a /0 error here if y0=y1 
....................   // (flat-topped triangle). 
....................   if(y1 == y2) last = y1;   // Include y1 scanline 
....................   else         last = y1 - 1; // Skip it 
....................  
....................   for(y = y0; y <= last; y++) { 
....................     a   = x0 + sa / dy01; 
....................     b   = x0 + sb / dy02; 
....................     sa += dx01; 
....................     sb += dx02; 
....................     /* longhand: 
....................     a = x0 + (x1 - x0) * (y - y0) / (y1 - y0); 
....................     b = x0 + (x2 - x0) * (y - y0) / (y2 - y0); 
....................     */ 
....................     if(a > b) ssd1306_swap(a, b); 
....................     SSD1306_DrawFastHLine(a, y, b - a + 1, color); 
....................   } 
....................  
....................   // For lower part of triangle, find scanline crossings for segments 
....................   // 0-2 and 1-2.  This loop is skipped if y1=y2. 
....................   sa = dx12 * (y - y1); 
....................   sb = dx02 * (y - y0); 
....................   for(; y <= y2; y++) { 
....................     a   = x1 + sa / dy12; 
....................     b   = x0 + sb / dy02; 
....................     sa += dx12; 
....................     sb += dx02; 
....................     /* longhand: 
....................     a = x1 + (x2 - x1) * (y - y1) / (y2 - y1); 
....................     b = x0 + (x2 - x0) * (y - y0) / (y2 - y0); 
....................     */ 
....................     if(a > b) ssd1306_swap(a, b); 
....................     SSD1306_DrawFastHLine(a, y, b - a + 1, color); 
....................   } 
.................... } 
....................  
.................... // invert the display 
.................... void SSD1306_InvertDisplay(int1 i) 
.................... { 
....................   if (i) 
....................     ssd1306_command(SSD1306_INVERTDISPLAY_); 
....................   else 
....................     ssd1306_command(SSD1306_NORMALDISPLAY); 
.................... } 
....................  
.................... void SSD1306_SetTextWrap(int1 w) 
.................... { 
....................   wrap = w; 
.................... } 
....................  
.................... void SSD1306_DrawChar(uint8_t x, uint8_t y, uint8_t c, uint8_t size = 1) 
.................... { 
....................   SSD1306_GotoXY(x, y); 
....................   SSD1306_TextSize(size); 
....................   SSD1306_Print(c); 
.................... } 
....................  
.................... void SSD1306_DrawText(uint8_t x, uint8_t y, char *_text, uint8_t size = 1) 
.................... { 
....................   SSD1306_GotoXY(x, y); 
*
1656:  MOVFF  50C,511
165A:  MOVFF  50D,512
165E:  BRA    1124
....................   SSD1306_TextSize(size); 
1660:  MOVFF  510,511
1664:  BRA    1142
....................   while(*_text != '\0') 
....................     SSD1306_Print(*_text++); 
1666:  MOVFF  50F,03
166A:  MOVLB  5
166C:  MOVFF  50E,FE9
1670:  MOVFF  50F,FEA
1674:  MOVF   FEF,F
1676:  BZ    169C
1678:  MOVFF  50F,03
167C:  MOVF   x0E,W
167E:  INCF   x0E,F
1680:  BTFSC  FD8.2
1682:  INCF   x0F,F
1684:  MOVWF  FE9
1686:  MOVFF  03,FEA
168A:  MOVFF  FEF,511
168E:  MOVFF  511,512
1692:  MOVLB  0
1694:  BRA    14A8
1696:  MOVLB  0
1698:  BRA    1666
169A:  MOVLB  5
....................  
.................... } 
169C:  MOVLB  0
169E:  RETLW  00
....................  
.................... // move cursor to position (x, y) 
.................... void SSD1306_GotoXY(uint8_t x, uint8_t y) 
.................... { 
....................   if((x >= SSD1306_LCDWIDTH) || (y >= SSD1306_LCDHEIGHT)) 
*
1124:  MOVLB  5
1126:  MOVF   x11,W
1128:  SUBLW  7F
112A:  BNC   1132
112C:  MOVF   x12,W
112E:  SUBLW  3F
1130:  BC    1134
....................     return; 
1132:  BRA    113C
....................   x_pos = x; 
1134:  MOVFF  511,19
....................   y_pos = y; 
1138:  MOVFF  512,1A
.................... } 
113C:  MOVLB  0
113E:  GOTO   1660 (RETURN)
....................  
.................... // set text size 
.................... void SSD1306_TextSize(uint8_t t_size) 
.................... { 
....................   if(t_size < 1) 
1142:  MOVLB  5
1144:  MOVF   x11,F
1146:  BNZ   114C
....................     t_size = 1; 
1148:  MOVLW  01
114A:  MOVWF  x11
....................   text_size = t_size; 
114C:  MOVFF  511,1B
.................... } 
1150:  MOVLB  0
1152:  GOTO   1666 (RETURN)
....................  
.................... /* print single char 
....................     \a  Set cursor position to upper left (0, 0) 
....................     \b  Move back one position 
....................     \n  Go to start of current line 
....................     \r  Go to line below 
.................... */ 
.................... void SSD1306_Print(uint8_t c) 
.................... { 
....................   int1 _color; 
....................   uint8_t i, j, line; 
....................    
....................   if (c == ' ' && x_pos == 0 && wrap) 
*
14A8:  MOVLB  5
14AA:  MOVF   x12,W
14AC:  SUBLW  20
14AE:  BNZ   14BA
14B0:  MOVF   19,F
14B2:  BNZ   14BA
14B4:  BTFSS  1C.0
14B6:  BRA    14BA
....................     return; 
14B8:  BRA    1650
....................   if(c == '\a') { 
14BA:  MOVF   x12,W
14BC:  SUBLW  07
14BE:  BNZ   14C8
....................     x_pos = y_pos = 0; 
14C0:  CLRF   1A
14C2:  MOVFF  1A,19
....................     return; 
14C6:  BRA    1650
....................   } 
....................   if( (c == '\b') && (x_pos >= text_size * 6) ) { 
14C8:  MOVF   x12,W
14CA:  SUBLW  08
14CC:  BNZ   14E2
14CE:  MOVF   1B,W
14D0:  MULLW  06
14D2:  MOVF   FF3,W
14D4:  SUBWF  19,W
14D6:  BNC   14E2
....................     x_pos -= text_size * 6; 
14D8:  MOVF   1B,W
14DA:  MULLW  06
14DC:  MOVF   FF3,W
14DE:  SUBWF  19,F
....................     return; 
14E0:  BRA    1650
....................   } 
....................   if(c == '\r') { 
14E2:  MOVF   x12,W
14E4:  SUBLW  0D
14E6:  BNZ   14EC
....................     x_pos = 0; 
14E8:  CLRF   19
....................     return; 
14EA:  BRA    1650
....................   } 
....................   if(c == '\n') { 
14EC:  MOVF   x12,W
14EE:  SUBLW  0A
14F0:  BNZ   150A
....................     y_pos += text_size * 8; 
14F2:  MOVF   1B,W
14F4:  MULLW  08
14F6:  MOVF   FF3,W
14F8:  ADDWF  1A,F
....................     if((y_pos + text_size * 7) > SSD1306_LCDHEIGHT) 
14FA:  MOVF   1B,W
14FC:  MULLW  07
14FE:  MOVF   FF3,W
1500:  ADDWF  1A,W
1502:  SUBLW  40
1504:  BC    1508
....................       y_pos = 0; 
1506:  CLRF   1A
....................     return; 
1508:  BRA    1650
....................   } 
....................  
....................   if((c < ' ') || (c > '~')) 
150A:  MOVF   x12,W
150C:  SUBLW  1F
150E:  BC    1516
1510:  MOVF   x12,W
1512:  SUBLW  7E
1514:  BC    151A
....................     c = '?'; 
1516:  MOVLW  3F
1518:  MOVWF  x12
....................    
....................   for(i = 0; i < 5; i++ ) { 
151A:  CLRF   x14
151C:  MOVF   x14,W
151E:  SUBLW  04
1520:  BNC   15E4
....................     if(c < 'S') 
1522:  MOVF   x12,W
1524:  SUBLW  52
1526:  BNC   154A
....................       line = font[(c - ' ') * 5 + i]; 
1528:  MOVLW  20
152A:  SUBWF  x12,W
152C:  MULLW  05
152E:  MOVF   FF3,W
1530:  ADDWF  x14,W
1532:  CLRF   03
1534:  MOVFF  FF2,517
1538:  BCF    FF2.7
153A:  MOVLB  0
153C:  CALL   0096
1540:  MOVLB  5
1542:  BTFSC  x17.7
1544:  BSF    FF2.7
1546:  MOVWF  x16
....................     else 
1548:  BRA    156A
....................       line = font2[(c - 'S') * 5 + i]; 
154A:  MOVLW  53
154C:  SUBWF  x12,W
154E:  MULLW  05
1550:  MOVF   FF3,W
1552:  ADDWF  x14,W
1554:  CLRF   03
1556:  MOVFF  FF2,517
155A:  BCF    FF2.7
155C:  MOVLB  0
155E:  CALL   01B0
1562:  MOVLB  5
1564:  BTFSC  x17.7
1566:  BSF    FF2.7
1568:  MOVWF  x16
....................      
....................     for(j = 0; j < 7; j++, line >>= 1) { 
156A:  CLRF   x15
156C:  MOVF   x15,W
156E:  SUBLW  06
1570:  BNC   15E0
....................       if(line & 0x01) 
1572:  BTFSS  x16.0
1574:  BRA    157A
....................         _color = TRUE; 
1576:  BSF    x13.0
....................       else 
1578:  BRA    157C
....................         _color = FALSE; 
157A:  BCF    x13.0
....................       if(text_size == 1) SSD1306_DrawPixel(x_pos + i, y_pos + j, _color); 
157C:  DECFSZ 1B,W
157E:  BRA    15A4
1580:  MOVF   x14,W
1582:  ADDWF  19,W
1584:  MOVWF  x17
1586:  MOVF   x15,W
1588:  ADDWF  1A,W
158A:  MOVWF  x18
158C:  MOVLW  00
158E:  BTFSC  x13.0
1590:  MOVLW  01
1592:  MOVFF  517,53D
1596:  MOVFF  518,53E
159A:  MOVWF  x3F
159C:  MOVLB  0
159E:  RCALL  1156
....................       else               SSD1306_FillRect(x_pos + (i * text_size), y_pos + (j * text_size), text_size, text_size, _color); 
15A0:  BRA    15D4
15A2:  MOVLB  5
15A4:  MOVF   x14,W
15A6:  MULWF  1B
15A8:  MOVF   FF3,W
15AA:  ADDWF  19,W
15AC:  MOVWF  x17
15AE:  MOVF   x15,W
15B0:  MULWF  1B
15B2:  MOVF   FF3,W
15B4:  ADDWF  1A,W
15B6:  MOVWF  x18
15B8:  MOVLW  00
15BA:  BTFSC  x13.0
15BC:  MOVLW  01
15BE:  MOVFF  517,51A
15C2:  MOVFF  518,51B
15C6:  MOVFF  1B,51C
15CA:  MOVFF  1B,51D
15CE:  MOVWF  x1E
15D0:  MOVLB  0
15D2:  RCALL  146A
....................     } 
15D4:  MOVLB  5
15D6:  MOVF   x15,W
15D8:  INCF   x15,F
15DA:  BCF    FD8.0
15DC:  RRCF   x16,F
15DE:  BRA    156C
....................   } 
15E0:  INCF   x14,F
15E2:  BRA    151C
....................  
....................   SSD1306_FillRect(x_pos + (5 * text_size), y_pos, text_size, 7 * text_size, FALSE); 
15E4:  MOVF   1B,W
15E6:  MULLW  05
15E8:  MOVF   FF3,W
15EA:  ADDWF  19,W
15EC:  MOVWF  x17
15EE:  MOVF   1B,W
15F0:  MULLW  07
15F2:  MOVFF  FF3,518
15F6:  MOVFF  517,51A
15FA:  MOVFF  1A,51B
15FE:  MOVFF  1B,51C
1602:  MOVFF  518,51D
1606:  CLRF   x1E
1608:  MOVLB  0
160A:  RCALL  146A
....................    
....................   x_pos += text_size * 6; 
160C:  MOVF   1B,W
160E:  MULLW  06
1610:  MOVF   FF3,W
1612:  ADDWF  19,F
....................  
....................   if( x_pos > (SSD1306_LCDWIDTH + text_size * 6) ) 
1614:  MOVF   1B,W
1616:  MULLW  06
1618:  MOVF   FF3,W
161A:  ADDLW  80
161C:  SUBWF  19,W
161E:  BZ    1626
1620:  BNC   1626
....................     x_pos = SSD1306_LCDWIDTH; 
1622:  MOVLW  80
1624:  MOVWF  19
....................  
....................   if (wrap && (x_pos + (text_size * 5)) > SSD1306_LCDWIDTH) 
1626:  BTFSS  1C.0
1628:  BRA    164E
162A:  MOVF   1B,W
162C:  MULLW  05
162E:  MOVF   FF3,W
1630:  ADDWF  19,W
1632:  SUBLW  80
1634:  BC    164E
....................   { 
....................     x_pos = 0; 
1636:  CLRF   19
....................     y_pos += text_size * 8; 
1638:  MOVF   1B,W
163A:  MULLW  08
163C:  MOVF   FF3,W
163E:  ADDWF  1A,F
....................     if((y_pos + text_size * 7) > SSD1306_LCDHEIGHT) 
1640:  MOVF   1B,W
1642:  MULLW  07
1644:  MOVF   FF3,W
1646:  ADDWF  1A,W
1648:  SUBLW  40
164A:  BC    164E
....................       y_pos = 0; 
164C:  CLRF   1A
164E:  MOVLB  5
....................   } 
.................... } 
1650:  MOVLB  0
1652:  GOTO   1666 (RETURN)
....................  
.................... // print custom char (dimension: 7x5 pixel) 
.................... void SSD1306_PutCustomC(rom uint8_t *c) 
.................... { 
....................   int1 _color; 
....................   uint8_t i, j, line; 
....................    
....................   for(i = 0; i < 5; i++ ) { 
....................     line = c[i]; 
....................  
....................     for(j = 0; j < 7; j++, line >>= 1) { 
....................       if(line & 0x01) 
....................         _color = TRUE; 
....................       else 
....................         _color = FALSE; 
....................       if(text_size == 1) SSD1306_DrawPixel(x_pos + i, y_pos + j, _color); 
....................       else               SSD1306_FillRect(x_pos + (i * text_size), y_pos + (j * text_size), text_size, text_size, _color); 
....................     } 
....................   } 
....................  
....................   SSD1306_FillRect(x_pos + (5 * text_size), y_pos, text_size, 7 * text_size, FALSE); 
....................  
....................   x_pos += (text_size * 6); 
....................  
....................   if( x_pos > (SSD1306_LCDWIDTH + text_size * 6) ) 
....................     x_pos = SSD1306_LCDWIDTH; 
....................  
....................   if (wrap && (x_pos + (text_size * 5)) > SSD1306_LCDWIDTH) 
....................   { 
....................     x_pos = 0; 
....................     y_pos += text_size * 8; 
....................     if((y_pos + text_size * 7) > SSD1306_LCDHEIGHT) 
....................       y_pos = 0; 
....................   } 
.................... } 
....................  
.................... // draw BMP stored in ROM 
.................... void SSD1306_ROMBMP(uint8_t x, uint8_t y, rom uint8_t *bitmap, uint8_t w, uint8_t h) 
.................... { 
....................   uint16_t i; 
....................   for( i = 0; i < h/8; i++ ) 
....................   { 
....................     uint16_t j; 
....................     for( j = 0; j < (uint16_t)w * 8; j++ ) 
....................     {       
....................       if( bit_test(bitmap[j/8 + i*w], j % 8) == 1 ) 
....................         SSD1306_DrawPixel(x + j/8, y + i*8 + (j % 8)); 
....................       else 
....................         SSD1306_DrawPixel(x + j/8, y + i*8 + (j % 8), 0);   
....................     } 
....................   } 
.................... } 
....................  
.................... // end of driver code. 
....................  
....................  
.................... //#include <18F4550.h> 
....................  
.................... #define SH1106_128_64 
....................  
.................... #define LED_ON                   0 
.................... #define LED_OFF                  1 
.................... #define HR_START                 0x50 
.................... #define TP_START                 0x56 
....................  
.................... #define LED     PIN_C0   // OUT = 0 
.................... #define bot2    PIN_D1   //OUT 
.................... #define bot1    PIN_D3   //OUT     
.................... #define bot3    PIN_D2   //OUT 
.................... #define bot4    PIN_D0   //OUT 
....................  
.................... /*------------VARIAVEIS----------*/ 
....................  
.................... // Variables declaration 
....................  
.................... /*---STRINGS---*/ 
....................    char horas[]   = "  :  "; 
....................    char data[]    = "  /  /20  "; 
....................    char hori[]    = "H:00000:00 "; 
....................    char tmr[]     = "T:00000:00 "; 
....................    char txt1[]    = "Relogio"; 
....................    char txt2[]    = "Data"; 
....................    char txt3[]    = "Timer"; 
....................    char txt4[]    = "Sobre"; 
....................    char txt5[]    = "Horas"; 
....................    char txt6[]    = "Minutos"; 
....................    char txt7[]    = "Mes"; 
....................    char txt8[]    = "Dia"; 
....................    char txt9[]    = "Ano"; 
....................    char txt10[]   = "Init  temp"; 
....................    char txt11[]   = "Stop  temp"; 
....................    char txt12[]   = "Reset temp"; 
....................    char txt13[]   = "Dia sem"; 
....................    char seg1[] = "SEGUNDA", ter[] = "TERCA", qua[] = "QUARTA", qui[] = "QUINTA", sex[] = "SEXTA", sab[] = "SABADO", dom[] ="DOMINGO"; 
....................     
....................     
.................... int1 init = 0, readm = 0, flag1, flag2, flag3, flag4, flag28, flag30, flagi=0, flags=0, flagr=0; 
.................... int8 i, position_count, seg, min, hr, s_dia, dia, mes, ano; 
.................... int16 debouncing = 0, register_cont = 0, register_cont1 = 0, aux = 0, aux1; 
....................  
....................  
.................... struct flag{ 
....................     int8 flagaux; 
....................     int8 flagtrava; 
....................     int8 flagmenu; 
.................... }; 
.................... struct flag menu1, menu2, menu3, menu4, menu5, sub2, sub3, sub4; 
....................  
.................... struct aux{ 
....................    int8 hor; 
....................    int16 hmin; 
....................    int32 hhr; 
....................    int16 tmin; 
....................    int16 thr; 
.................... }; 
.................... struct aux horimetro; 
....................  
....................    /*DEFININDO CLOCK*/ 
....................     
.................... void inicializar_flags(void){ 
....................    menu1.flagmenu =  0x00; 
*
0F70:  MOVLB  4
0F72:  CLRF   xEB
....................    menu1.flagtrava = 0x00; 
0F74:  CLRF   xEA
....................    menu2.flagmenu =  0x00; 
0F76:  CLRF   xEE
....................    menu2.flagtrava = 0x00; 
0F78:  CLRF   xED
....................    menu3.flagmenu =  0x00; 
0F7A:  CLRF   xF1
....................    menu3.flagtrava = 0x00; 
0F7C:  CLRF   xF0
....................    menu4.flagmenu =  0x00; 
0F7E:  CLRF   xF4
....................    menu4.flagtrava = 0x00; 
0F80:  CLRF   xF3
....................    menu4.flagaux =   0x00; 
0F82:  CLRF   xF2
....................    //horimetro.hmin =  0x00; 
....................    //horimetro.hhr  =  0x00; 
....................    horimetro.tmin =  0x00; 
0F84:  MOVLB  5
0F86:  CLRF   x09
0F88:  CLRF   x08
....................    horimetro.thr  =  0x00; 
0F8A:  CLRF   x0B
0F8C:  CLRF   x0A
....................    init = 0x00; 
0F8E:  BCF    1C.1
....................    flag1 = 0x00; 
0F90:  BCF    1C.3
....................    flag2 = 0x00; 
0F92:  BCF    1C.4
....................    flag3 = 0x00; 
0F94:  BCF    1C.5
....................    flag4 = 0x00; 
0F96:  BCF    1C.6
....................    flag28 = 0x00; 
0F98:  BCF    1C.7
....................    flag30 = 0x00; 
0F9A:  MOVLB  4
0F9C:  BCF    xD5.0
.................... } 
0F9E:  MOVLB  0
0FA0:  GOTO   33F6 (RETURN)
....................  
.................... #use delay(clock = 20000000)//20MHz 
*
0324:  MOVLW  05
0326:  MOVWF  FEA
0328:  MOVLW  49
032A:  MOVWF  FE9
032C:  MOVF   FEF,W
032E:  BZ    034A
0330:  MOVLW  06
0332:  MOVWF  01
0334:  CLRF   00
0336:  DECFSZ 00,F
0338:  BRA    0336
033A:  DECFSZ 01,F
033C:  BRA    0334
033E:  MOVLW  7B
0340:  MOVWF  00
0342:  DECFSZ 00,F
0344:  BRA    0342
0346:  DECFSZ FEF,F
0348:  BRA    0330
034A:  RETLW  00
....................  
.................... //#use delay(clock = 8000000)//8MHz 
....................  
.................... /*-----PROTOTIPOS DE FUNC-----*/ 
.................... void display_dia(); 
.................... void DS1307_display(); 
.................... void escreve_ds(int8 hr, int8 min, int8 s_dia, int8 dia, int8 mes, int8 ano); 
.................... void le_DS1307(void); 
.................... void trata_teclas(void); 
.................... void atualiza_menu(void); 
.................... void conv_valor(char buff[],int16 aux); 
.................... void atualiza_disp(void); 
....................          /*VOID TRATA INTERRUPÇÃO TIMER0*/ 
.................... #INT_TIMER0 
.................... void timer_0(void){ 
....................    register_cont++; 
*
0A8A:  MOVLB  4
0A8C:  INCF   xE1,F
0A8E:  BTFSC  FD8.2
0A90:  INCF   xE2,F
....................    if(init == 1)aux++; 
0A92:  BTFSS  1C.1
0A94:  BRA    0A9C
0A96:  INCF   xE5,F
0A98:  BTFSC  FD8.2
0A9A:  INCF   xE6,F
....................    if(aux == 1500){ 
0A9C:  MOVF   xE5,W
0A9E:  SUBLW  DC
0AA0:  BNZ   0AAC
0AA2:  MOVF   xE6,W
0AA4:  SUBLW  05
0AA6:  BNZ   0AAC
....................       output_bit(LED, LED_ON); 
0AA8:  BCF    F8B.0
0AAA:  BCF    F94.0
....................    } 
....................    if(aux == 3500){ 
0AAC:  MOVF   xE5,W
0AAE:  SUBLW  AC
0AB0:  BNZ   0AC6
0AB2:  MOVF   xE6,W
0AB4:  SUBLW  0D
0AB6:  BNZ   0AC6
....................       output_bit(LED, LED_OFF); 
0AB8:  BSF    F8B.0
0ABA:  BCF    F94.0
....................       aux = 0; 
0ABC:  CLRF   xE6
0ABE:  CLRF   xE5
....................       aux1++; 
0AC0:  INCF   xE7,F
0AC2:  BTFSC  FD8.2
0AC4:  INCF   xE8,F
....................    } 
....................    if(register_cont == 30){ 
0AC6:  MOVF   xE1,W
0AC8:  SUBLW  1E
0ACA:  BNZ   0ADA
0ACC:  MOVF   xE2,F
0ACE:  BNZ   0ADA
....................       //output_bit(LED, LED_ON); 
....................       trata_teclas(); 
0AD0:  MOVLB  0
0AD2:  BRA    048E
....................       //atualiza_menu(); 
....................       register_cont = 0; 
0AD4:  MOVLB  4
0AD6:  CLRF   xE2
0AD8:  CLRF   xE1
....................    } 
....................    if(aux1==10 && readm ==1){ 
0ADA:  MOVF   xE7,W
0ADC:  SUBLW  0A
0ADE:  BTFSS  FD8.2
0AE0:  BRA    0C08
0AE2:  MOVF   xE8,F
0AE4:  BTFSS  FD8.2
0AE6:  BRA    0C08
0AE8:  BTFSS  1C.2
0AEA:  BRA    0C08
....................        
....................       write_eeprom(HR_START + 0, (horimetro.hhr >> 16) & 0xFF);//(horimetro.hhr >> 16) --> Quebrando a variavel em partes de 8 bits pra salvar na eeprom 
0AEC:  MOVFF  506,544
0AF0:  MOVFF  507,545
0AF4:  MOVLB  5
0AF6:  CLRF   x46
0AF8:  CLRF   x47
0AFA:  CLRF   x45
0AFC:  CLRF   x46
0AFE:  CLRF   x47
0B00:  MOVLW  50
0B02:  MOVWF  FA9
0B04:  MOVFF  544,FA8
0B08:  BCF    FA6.6
0B0A:  BCF    FA6.7
0B0C:  BSF    FA6.2
0B0E:  MOVF   FF2,W
0B10:  MOVWF  00
0B12:  BCF    FF2.7
0B14:  MOVLB  F
0B16:  MOVLW  55
0B18:  MOVWF  FA7
0B1A:  MOVLW  AA
0B1C:  MOVWF  FA7
0B1E:  BSF    FA6.1
0B20:  BTFSC  FA6.1
0B22:  BRA    0B20
0B24:  BCF    FA6.2
0B26:  MOVF   00,W
0B28:  IORWF  FF2,F
....................                                                                //descola a variavel de 32 bits(usamos apenas 24) 16 vezes, alocando o primeiro octeto da var na posição(0x50) da memoria (8bits) 
....................       write_eeprom(HR_START + 1, (horimetro.hhr >>  8) & 0xFF);//MASCARA -> & 0XFF SOMANDO ESSE VALOR A VARIAVEL GARANTIMOS APENAS OS 8 BITS E DESCARTAMOS O RESTANTE 
0B2A:  MOVFF  505,544
0B2E:  MOVFF  506,545
0B32:  MOVFF  507,546
0B36:  MOVLB  5
0B38:  CLRF   x47
0B3A:  CLRF   x45
0B3C:  CLRF   x46
0B3E:  CLRF   x47
0B40:  MOVLW  51
0B42:  MOVWF  FA9
0B44:  MOVFF  544,FA8
0B48:  BCF    FA6.6
0B4A:  BCF    FA6.7
0B4C:  BSF    FA6.2
0B4E:  MOVF   FF2,W
0B50:  MOVWF  00
0B52:  BCF    FF2.7
0B54:  MOVLB  F
0B56:  MOVLW  55
0B58:  MOVWF  FA7
0B5A:  MOVLW  AA
0B5C:  MOVWF  FA7
0B5E:  BSF    FA6.1
0B60:  BTFSC  FA6.1
0B62:  BRA    0B60
0B64:  BCF    FA6.2
0B66:  MOVF   00,W
0B68:  IORWF  FF2,F
....................                                                                //desloca a veriavel de 32 bits(usamos apenas 24) 8 vezes, alocando o segundo octeto da var na posição(0x51) de memoria (8bits) 
....................       write_eeprom(HR_START + 2, (horimetro.hhr) & 0xFF);      //desloca a veriavel de 32 bits(usamos apenas 24) 8 vezes, alocando o terceiro octeto da var na posição(0x52) de memoria  
0B6A:  MOVLB  5
0B6C:  MOVF   x04,W
0B6E:  MOVWF  x43
0B70:  CLRF   x44
0B72:  CLRF   x45
0B74:  CLRF   x46
0B76:  MOVLW  52
0B78:  MOVWF  FA9
0B7A:  MOVFF  543,FA8
0B7E:  BCF    FA6.6
0B80:  BCF    FA6.7
0B82:  BSF    FA6.2
0B84:  MOVF   FF2,W
0B86:  MOVWF  00
0B88:  BCF    FF2.7
0B8A:  MOVLB  F
0B8C:  MOVLW  55
0B8E:  MOVWF  FA7
0B90:  MOVLW  AA
0B92:  MOVWF  FA7
0B94:  BSF    FA6.1
0B96:  BTFSC  FA6.1
0B98:  BRA    0B96
0B9A:  BCF    FA6.2
0B9C:  MOVF   00,W
0B9E:  IORWF  FF2,F
....................     
....................       write_eeprom(TP_START + 0, (horimetro.hmin >> 8) & 0xFF);//(horimetro.hhr >> 16) --> Quebrando a variavel em partes de 8 bits pra salvar na eeprom 
0BA0:  MOVFF  503,543
0BA4:  MOVLB  5
0BA6:  CLRF   x44
0BA8:  CLRF   x44
0BAA:  MOVLW  56
0BAC:  MOVWF  FA9
0BAE:  MOVFF  543,FA8
0BB2:  BCF    FA6.6
0BB4:  BCF    FA6.7
0BB6:  BSF    FA6.2
0BB8:  MOVF   FF2,W
0BBA:  MOVWF  00
0BBC:  BCF    FF2.7
0BBE:  MOVLB  F
0BC0:  MOVLW  55
0BC2:  MOVWF  FA7
0BC4:  MOVLW  AA
0BC6:  MOVWF  FA7
0BC8:  BSF    FA6.1
0BCA:  BTFSC  FA6.1
0BCC:  BRA    0BCA
0BCE:  BCF    FA6.2
0BD0:  MOVF   00,W
0BD2:  IORWF  FF2,F
....................     
....................       write_eeprom(TP_START + 1, (horimetro.hmin) & 0xFF); 
0BD4:  MOVLB  5
0BD6:  MOVF   x02,W
0BD8:  MOVWF  x43
0BDA:  CLRF   x44
0BDC:  MOVLW  57
0BDE:  MOVWF  FA9
0BE0:  MOVFF  543,FA8
0BE4:  BCF    FA6.6
0BE6:  BCF    FA6.7
0BE8:  BSF    FA6.2
0BEA:  MOVF   FF2,W
0BEC:  MOVWF  00
0BEE:  BCF    FF2.7
0BF0:  MOVLB  F
0BF2:  MOVLW  55
0BF4:  MOVWF  FA7
0BF6:  MOVLW  AA
0BF8:  MOVWF  FA7
0BFA:  BSF    FA6.1
0BFC:  BTFSC  FA6.1
0BFE:  BRA    0BFC
0C00:  BCF    FA6.2
0C02:  MOVF   00,W
0C04:  IORWF  FF2,F
0C06:  MOVLB  4
....................    } 
.................... } 
....................  
0C08:  BCF    FF2.2
0C0A:  MOVLB  0
0C0C:  GOTO   0054
.................... void main() 
.................... { 
*
26BE:  CLRF   FF8
26C0:  BCF    FD0.7
26C2:  BSF    07.7
26C4:  CLRF   FEA
26C6:  CLRF   FE9
26C8:  BSF    FB8.3
26CA:  MOVLW  08
26CC:  MOVWF  FAF
26CE:  MOVLW  02
26D0:  MOVWF  FB0
26D2:  MOVLW  A6
26D4:  MOVWF  FAC
26D6:  MOVLW  90
26D8:  MOVWF  FAB
26DA:  BSF    1C.0
26DC:  MOVLW  02
26DE:  MOVLB  4
26E0:  MOVWF  x1D
26E2:  MOVLW  78
26E4:  MOVWF  x1E
26E6:  BCF    1C.1
26E8:  BCF    1C.2
26EA:  BCF    xD5.1
26EC:  BCF    xD5.2
26EE:  BCF    xD5.3
26F0:  CLRF   xE0
26F2:  CLRF   xDF
26F4:  CLRF   xE2
26F6:  CLRF   xE1
26F8:  CLRF   xE4
26FA:  CLRF   xE3
26FC:  CLRF   xE6
26FE:  CLRF   xE5
2700:  MOVF   FC1,W
2702:  ANDLW  C0
2704:  IORLW  0F
2706:  MOVWF  FC1
2708:  MOVLW  07
270A:  MOVWF  FB4
270C:  CLRF   1D
270E:  CLRF   1E
2710:  CLRF   1F
2712:  CLRF   20
2714:  CLRF   21
2716:  CLRF   22
2718:  CLRF   23
271A:  CLRF   24
271C:  CLRF   25
271E:  CLRF   26
2720:  CLRF   27
2722:  CLRF   28
2724:  CLRF   29
2726:  CLRF   2A
2728:  CLRF   2B
272A:  CLRF   2C
272C:  CLRF   2D
272E:  CLRF   2E
2730:  CLRF   2F
2732:  CLRF   30
2734:  CLRF   31
2736:  CLRF   32
2738:  CLRF   33
273A:  CLRF   34
273C:  CLRF   35
273E:  CLRF   36
2740:  CLRF   37
2742:  CLRF   38
2744:  CLRF   39
2746:  CLRF   3A
2748:  CLRF   3B
274A:  CLRF   3C
274C:  CLRF   3D
274E:  CLRF   3E
2750:  CLRF   3F
2752:  CLRF   40
2754:  CLRF   41
2756:  CLRF   42
2758:  CLRF   43
275A:  CLRF   44
275C:  CLRF   45
275E:  CLRF   46
2760:  CLRF   47
2762:  CLRF   48
2764:  CLRF   49
2766:  CLRF   4A
2768:  CLRF   4B
276A:  CLRF   4C
276C:  CLRF   4D
276E:  CLRF   4E
2770:  CLRF   4F
2772:  CLRF   50
2774:  CLRF   51
2776:  CLRF   52
2778:  CLRF   53
277A:  CLRF   54
277C:  CLRF   55
277E:  CLRF   56
2780:  CLRF   57
2782:  CLRF   58
2784:  CLRF   59
2786:  CLRF   5A
2788:  CLRF   5B
278A:  MOVLW  80
278C:  MOVWF  5C
278E:  MOVWF  5D
2790:  MOVWF  5E
2792:  CLRF   5F
2794:  MOVLB  0
2796:  CLRF   x60
2798:  CLRF   x61
279A:  CLRF   x62
279C:  CLRF   x63
279E:  CLRF   x64
27A0:  CLRF   x65
27A2:  CLRF   x66
27A4:  CLRF   x67
27A6:  CLRF   x68
27A8:  CLRF   x69
27AA:  CLRF   x6A
27AC:  CLRF   x6B
27AE:  CLRF   x6C
27B0:  CLRF   x6D
27B2:  MOVWF  x6E
27B4:  MOVWF  x6F
27B6:  MOVLW  C0
27B8:  MOVWF  x70
27BA:  MOVWF  x71
27BC:  CLRF   x72
27BE:  CLRF   x73
27C0:  CLRF   x74
27C2:  CLRF   x75
27C4:  CLRF   x76
27C6:  CLRF   x77
27C8:  CLRF   x78
27CA:  CLRF   x79
27CC:  CLRF   x7A
27CE:  CLRF   x7B
27D0:  CLRF   x7C
27D2:  CLRF   x7D
27D4:  CLRF   x7E
27D6:  CLRF   x7F
27D8:  CLRF   x80
27DA:  CLRF   x81
27DC:  CLRF   x82
27DE:  CLRF   x83
27E0:  CLRF   x84
27E2:  CLRF   x85
27E4:  CLRF   x86
27E6:  CLRF   x87
27E8:  CLRF   x88
27EA:  CLRF   x89
27EC:  CLRF   x8A
27EE:  CLRF   x8B
27F0:  CLRF   x8C
27F2:  CLRF   x8D
27F4:  CLRF   x8E
27F6:  CLRF   x8F
27F8:  CLRF   x90
27FA:  CLRF   x91
27FC:  CLRF   x92
27FE:  CLRF   x93
2800:  CLRF   x94
2802:  CLRF   x95
2804:  CLRF   x96
2806:  CLRF   x97
2808:  CLRF   x98
280A:  CLRF   x99
280C:  CLRF   x9A
280E:  CLRF   x9B
2810:  CLRF   x9C
2812:  CLRF   x9D
2814:  CLRF   x9E
2816:  CLRF   x9F
2818:  CLRF   xA0
281A:  CLRF   xA1
281C:  CLRF   xA2
281E:  CLRF   xA3
2820:  CLRF   xA4
2822:  CLRF   xA5
2824:  CLRF   xA6
2826:  CLRF   xA7
2828:  CLRF   xA8
282A:  CLRF   xA9
282C:  CLRF   xAA
282E:  CLRF   xAB
2830:  CLRF   xAC
2832:  CLRF   xAD
2834:  CLRF   xAE
2836:  CLRF   xAF
2838:  CLRF   xB0
283A:  MOVLW  80
283C:  MOVWF  xB1
283E:  MOVLW  C0
2840:  MOVWF  xB2
2842:  MOVLW  E0
2844:  MOVWF  xB3
2846:  MOVLW  F0
2848:  MOVWF  xB4
284A:  MOVLW  F8
284C:  MOVWF  xB5
284E:  MOVLW  FC
2850:  MOVWF  xB6
2852:  MOVLW  F8
2854:  MOVWF  xB7
2856:  MOVLW  E0
2858:  MOVWF  xB8
285A:  CLRF   xB9
285C:  CLRF   xBA
285E:  CLRF   xBB
2860:  CLRF   xBC
2862:  CLRF   xBD
2864:  CLRF   xBE
2866:  CLRF   xBF
2868:  CLRF   xC0
286A:  CLRF   xC1
286C:  CLRF   xC2
286E:  CLRF   xC3
2870:  CLRF   xC4
2872:  CLRF   xC5
2874:  CLRF   xC6
2876:  CLRF   xC7
2878:  CLRF   xC8
287A:  CLRF   xC9
287C:  MOVLW  80
287E:  MOVWF  xCA
2880:  MOVWF  xCB
2882:  MOVWF  xCC
2884:  MOVWF  xCD
2886:  MOVWF  xCE
2888:  CLRF   xCF
288A:  MOVWF  xD0
288C:  MOVWF  xD1
288E:  CLRF   xD2
2890:  CLRF   xD3
2892:  CLRF   xD4
2894:  CLRF   xD5
2896:  MOVWF  xD6
2898:  MOVWF  xD7
289A:  MOVWF  xD8
289C:  MOVWF  xD9
289E:  MOVWF  xDA
28A0:  CLRF   xDB
28A2:  MOVLW  FF
28A4:  MOVWF  xDC
28A6:  MOVWF  xDD
28A8:  MOVWF  xDE
28AA:  CLRF   xDF
28AC:  CLRF   xE0
28AE:  CLRF   xE1
28B0:  CLRF   xE2
28B2:  MOVLW  80
28B4:  MOVWF  xE3
28B6:  MOVWF  xE4
28B8:  MOVWF  xE5
28BA:  MOVWF  xE6
28BC:  CLRF   xE7
28BE:  CLRF   xE8
28C0:  MOVWF  xE9
28C2:  MOVWF  xEA
28C4:  CLRF   xEB
28C6:  CLRF   xEC
28C8:  MOVWF  xED
28CA:  MOVLW  FF
28CC:  MOVWF  xEE
28CE:  MOVWF  xEF
28D0:  MOVLW  80
28D2:  MOVWF  xF0
28D4:  MOVWF  xF1
28D6:  CLRF   xF2
28D8:  MOVWF  xF3
28DA:  MOVWF  xF4
28DC:  CLRF   xF5
28DE:  MOVWF  xF6
28E0:  MOVWF  xF7
28E2:  MOVWF  xF8
28E4:  MOVWF  xF9
28E6:  CLRF   xFA
28E8:  MOVWF  xFB
28EA:  MOVWF  xFC
28EC:  CLRF   xFD
28EE:  CLRF   xFE
28F0:  CLRF   xFF
28F2:  MOVLB  1
28F4:  CLRF   x00
28F6:  CLRF   x01
28F8:  MOVWF  x02
28FA:  MOVWF  x03
28FC:  CLRF   x04
28FE:  CLRF   x05
2900:  MOVLW  8C
2902:  MOVWF  x06
2904:  MOVLW  8E
2906:  MOVWF  x07
2908:  MOVLW  84
290A:  MOVWF  x08
290C:  CLRF   x09
290E:  CLRF   x0A
2910:  MOVLW  80
2912:  MOVWF  x0B
2914:  MOVLW  F8
2916:  MOVWF  x0C
2918:  MOVWF  x0D
291A:  MOVWF  x0E
291C:  MOVLW  80
291E:  MOVWF  x0F
2920:  CLRF   x10
2922:  CLRF   x11
2924:  CLRF   x12
2926:  CLRF   x13
2928:  CLRF   x14
292A:  CLRF   x15
292C:  CLRF   x16
292E:  CLRF   x17
2930:  CLRF   x18
2932:  CLRF   x19
2934:  CLRF   x1A
2936:  CLRF   x1B
2938:  CLRF   x1C
293A:  MOVLW  F0
293C:  MOVWF  x1D
293E:  MOVWF  x1E
2940:  MOVWF  x1F
2942:  MOVWF  x20
2944:  MOVWF  x21
2946:  MOVWF  x22
2948:  MOVWF  x23
294A:  MOVWF  x24
294C:  MOVWF  x25
294E:  MOVWF  x26
2950:  MOVWF  x27
2952:  MOVWF  x28
2954:  MOVLW  E0
2956:  MOVWF  x29
2958:  MOVWF  x2A
295A:  MOVLW  C0
295C:  MOVWF  x2B
295E:  MOVLW  80
2960:  MOVWF  x2C
2962:  CLRF   x2D
2964:  MOVLW  E0
2966:  MOVWF  x2E
2968:  MOVLW  FC
296A:  MOVWF  x2F
296C:  MOVLW  FE
296E:  MOVWF  x30
2970:  MOVLW  FF
2972:  MOVWF  x31
2974:  MOVWF  x32
2976:  MOVWF  x33
2978:  MOVLW  7F
297A:  MOVWF  x34
297C:  MOVLW  FF
297E:  MOVWF  x35
2980:  MOVWF  x36
2982:  MOVWF  x37
2984:  MOVWF  x38
2986:  MOVWF  x39
2988:  CLRF   x3A
298A:  CLRF   x3B
298C:  CLRF   x3C
298E:  CLRF   x3D
2990:  CLRF   x3E
2992:  CLRF   x3F
2994:  CLRF   x40
2996:  CLRF   x41
2998:  CLRF   x42
299A:  CLRF   x43
299C:  CLRF   x44
299E:  CLRF   x45
29A0:  CLRF   x46
29A2:  CLRF   x47
29A4:  MOVLW  FE
29A6:  MOVWF  x48
29A8:  MOVLW  FF
29AA:  MOVWF  x49
29AC:  MOVLW  C7
29AE:  MOVWF  x4A
29B0:  MOVLW  01
29B2:  MOVWF  x4B
29B4:  MOVWF  x4C
29B6:  MOVWF  x4D
29B8:  MOVWF  x4E
29BA:  MOVLW  83
29BC:  MOVWF  x4F
29BE:  MOVLW  FF
29C0:  MOVWF  x50
29C2:  MOVWF  x51
29C4:  CLRF   x52
29C6:  CLRF   x53
29C8:  MOVLW  7C
29CA:  MOVWF  x54
29CC:  MOVLW  FE
29CE:  MOVWF  x55
29D0:  MOVLW  C7
29D2:  MOVWF  x56
29D4:  MOVLW  01
29D6:  MOVWF  x57
29D8:  MOVWF  x58
29DA:  MOVWF  x59
29DC:  MOVWF  x5A
29DE:  MOVLW  83
29E0:  MOVWF  x5B
29E2:  MOVLW  FF
29E4:  MOVWF  x5C
29E6:  MOVWF  x5D
29E8:  MOVWF  x5E
29EA:  CLRF   x5F
29EC:  MOVLW  38
29EE:  MOVWF  x60
29F0:  MOVLW  FE
29F2:  MOVWF  x61
29F4:  MOVLW  C7
29F6:  MOVWF  x62
29F8:  MOVLW  83
29FA:  MOVWF  x63
29FC:  MOVLW  01
29FE:  MOVWF  x64
2A00:  MOVWF  x65
2A02:  MOVWF  x66
2A04:  MOVLW  83
2A06:  MOVWF  x67
2A08:  MOVLW  C7
2A0A:  MOVWF  x68
2A0C:  MOVLW  FF
2A0E:  MOVWF  x69
2A10:  MOVWF  x6A
2A12:  CLRF   x6B
2A14:  CLRF   x6C
2A16:  MOVLW  01
2A18:  MOVWF  x6D
2A1A:  MOVLW  FF
2A1C:  MOVWF  x6E
2A1E:  MOVWF  x6F
2A20:  MOVLW  01
2A22:  MOVWF  x70
2A24:  MOVWF  x71
2A26:  CLRF   x72
2A28:  MOVLW  FF
2A2A:  MOVWF  x73
2A2C:  MOVWF  x74
2A2E:  MOVLW  07
2A30:  MOVWF  x75
2A32:  MOVLW  01
2A34:  MOVWF  x76
2A36:  MOVWF  x77
2A38:  MOVWF  x78
2A3A:  CLRF   x79
2A3C:  CLRF   x7A
2A3E:  MOVLW  7F
2A40:  MOVWF  x7B
2A42:  MOVLW  FF
2A44:  MOVWF  x7C
2A46:  MOVLW  80
2A48:  MOVWF  x7D
2A4A:  CLRF   x7E
2A4C:  CLRF   x7F
2A4E:  CLRF   x80
2A50:  MOVLW  FF
2A52:  MOVWF  x81
2A54:  MOVWF  x82
2A56:  MOVLW  7F
2A58:  MOVWF  x83
2A5A:  CLRF   x84
2A5C:  CLRF   x85
2A5E:  MOVLW  FF
2A60:  MOVWF  x86
2A62:  MOVWF  x87
2A64:  MOVWF  x88
2A66:  CLRF   x89
2A68:  CLRF   x8A
2A6A:  MOVLW  01
2A6C:  MOVWF  x8B
2A6E:  MOVLW  FF
2A70:  MOVWF  x8C
2A72:  MOVWF  x8D
2A74:  MOVWF  x8E
2A76:  MOVLW  01
2A78:  MOVWF  x8F
2A7A:  CLRF   x90
2A7C:  CLRF   x91
2A7E:  CLRF   x92
2A80:  CLRF   x93
2A82:  CLRF   x94
2A84:  CLRF   x95
2A86:  CLRF   x96
2A88:  CLRF   x97
2A8A:  CLRF   x98
2A8C:  CLRF   x99
2A8E:  CLRF   x9A
2A90:  CLRF   x9B
2A92:  CLRF   x9C
2A94:  MOVLW  03
2A96:  MOVWF  x9D
2A98:  MOVLW  0F
2A9A:  MOVWF  x9E
2A9C:  MOVLW  3F
2A9E:  MOVWF  x9F
2AA0:  MOVLW  7F
2AA2:  MOVWF  xA0
2AA4:  MOVWF  xA1
2AA6:  MOVLW  FF
2AA8:  MOVWF  xA2
2AAA:  MOVWF  xA3
2AAC:  MOVWF  xA4
2AAE:  MOVWF  xA5
2AB0:  MOVWF  xA6
2AB2:  MOVWF  xA7
2AB4:  MOVWF  xA8
2AB6:  MOVLW  E7
2AB8:  MOVWF  xA9
2ABA:  MOVLW  C7
2ABC:  MOVWF  xAA
2ABE:  MOVWF  xAB
2AC0:  MOVLW  8F
2AC2:  MOVWF  xAC
2AC4:  MOVWF  xAD
2AC6:  MOVLW  9F
2AC8:  MOVWF  xAE
2ACA:  MOVLW  BF
2ACC:  MOVWF  xAF
2ACE:  MOVLW  FF
2AD0:  MOVWF  xB0
2AD2:  MOVWF  xB1
2AD4:  MOVLW  C3
2AD6:  MOVWF  xB2
2AD8:  MOVLW  C0
2ADA:  MOVWF  xB3
2ADC:  MOVLW  F0
2ADE:  MOVWF  xB4
2AE0:  MOVLW  FF
2AE2:  MOVWF  xB5
2AE4:  MOVWF  xB6
2AE6:  MOVWF  xB7
2AE8:  MOVWF  xB8
2AEA:  MOVWF  xB9
2AEC:  MOVLW  FC
2AEE:  MOVWF  xBA
2AF0:  MOVWF  xBB
2AF2:  MOVWF  xBC
2AF4:  MOVWF  xBD
2AF6:  MOVWF  xBE
2AF8:  MOVWF  xBF
2AFA:  MOVWF  xC0
2AFC:  MOVWF  xC1
2AFE:  MOVLW  F8
2B00:  MOVWF  xC2
2B02:  MOVWF  xC3
2B04:  MOVLW  F0
2B06:  MOVWF  xC4
2B08:  MOVWF  xC5
2B0A:  MOVLW  E0
2B0C:  MOVWF  xC6
2B0E:  MOVLW  C0
2B10:  MOVWF  xC7
2B12:  CLRF   xC8
2B14:  MOVLW  01
2B16:  MOVWF  xC9
2B18:  MOVLW  03
2B1A:  MOVWF  xCA
2B1C:  MOVWF  xCB
2B1E:  MOVWF  xCC
2B20:  MOVWF  xCD
2B22:  MOVWF  xCE
2B24:  MOVLW  01
2B26:  MOVWF  xCF
2B28:  MOVLW  03
2B2A:  MOVWF  xD0
2B2C:  MOVWF  xD1
2B2E:  CLRF   xD2
2B30:  CLRF   xD3
2B32:  CLRF   xD4
2B34:  CLRF   xD5
2B36:  MOVLW  01
2B38:  MOVWF  xD6
2B3A:  MOVLW  03
2B3C:  MOVWF  xD7
2B3E:  MOVWF  xD8
2B40:  MOVWF  xD9
2B42:  MOVWF  xDA
2B44:  MOVLW  01
2B46:  MOVWF  xDB
2B48:  MOVWF  xDC
2B4A:  MOVLW  03
2B4C:  MOVWF  xDD
2B4E:  MOVLW  01
2B50:  MOVWF  xDE
2B52:  CLRF   xDF
2B54:  CLRF   xE0
2B56:  CLRF   xE1
2B58:  MOVWF  xE2
2B5A:  MOVLW  03
2B5C:  MOVWF  xE3
2B5E:  MOVWF  xE4
2B60:  MOVWF  xE5
2B62:  MOVWF  xE6
2B64:  MOVLW  01
2B66:  MOVWF  xE7
2B68:  MOVWF  xE8
2B6A:  MOVLW  03
2B6C:  MOVWF  xE9
2B6E:  MOVWF  xEA
2B70:  CLRF   xEB
2B72:  CLRF   xEC
2B74:  CLRF   xED
2B76:  MOVWF  xEE
2B78:  MOVWF  xEF
2B7A:  CLRF   xF0
2B7C:  CLRF   xF1
2B7E:  CLRF   xF2
2B80:  MOVWF  xF3
2B82:  MOVWF  xF4
2B84:  CLRF   xF5
2B86:  CLRF   xF6
2B88:  CLRF   xF7
2B8A:  CLRF   xF8
2B8C:  CLRF   xF9
2B8E:  CLRF   xFA
2B90:  CLRF   xFB
2B92:  MOVLW  01
2B94:  MOVWF  xFC
2B96:  MOVLW  03
2B98:  MOVWF  xFD
2B9A:  MOVWF  xFE
2B9C:  MOVWF  xFF
2B9E:  MOVLB  2
2BA0:  MOVWF  x00
2BA2:  MOVWF  x01
2BA4:  MOVLW  01
2BA6:  MOVWF  x02
2BA8:  CLRF   x03
2BAA:  CLRF   x04
2BAC:  CLRF   x05
2BAE:  MOVWF  x06
2BB0:  MOVLW  03
2BB2:  MOVWF  x07
2BB4:  MOVLW  01
2BB6:  MOVWF  x08
2BB8:  CLRF   x09
2BBA:  CLRF   x0A
2BBC:  CLRF   x0B
2BBE:  MOVLW  03
2BC0:  MOVWF  x0C
2BC2:  MOVWF  x0D
2BC4:  MOVLW  01
2BC6:  MOVWF  x0E
2BC8:  CLRF   x0F
2BCA:  CLRF   x10
2BCC:  CLRF   x11
2BCE:  CLRF   x12
2BD0:  CLRF   x13
2BD2:  CLRF   x14
2BD4:  CLRF   x15
2BD6:  CLRF   x16
2BD8:  CLRF   x17
2BDA:  CLRF   x18
2BDC:  CLRF   x19
2BDE:  CLRF   x1A
2BE0:  CLRF   x1B
2BE2:  CLRF   x1C
2BE4:  CLRF   x1D
2BE6:  CLRF   x1E
2BE8:  CLRF   x1F
2BEA:  MOVLW  80
2BEC:  MOVWF  x20
2BEE:  MOVLW  C0
2BF0:  MOVWF  x21
2BF2:  MOVLW  E0
2BF4:  MOVWF  x22
2BF6:  MOVLW  F0
2BF8:  MOVWF  x23
2BFA:  MOVLW  F9
2BFC:  MOVWF  x24
2BFE:  MOVLW  FF
2C00:  MOVWF  x25
2C02:  MOVWF  x26
2C04:  MOVWF  x27
2C06:  MOVWF  x28
2C08:  MOVWF  x29
2C0A:  MOVLW  3F
2C0C:  MOVWF  x2A
2C0E:  MOVLW  1F
2C10:  MOVWF  x2B
2C12:  MOVLW  0F
2C14:  MOVWF  x2C
2C16:  MOVLW  87
2C18:  MOVWF  x2D
2C1A:  MOVLW  C7
2C1C:  MOVWF  x2E
2C1E:  MOVLW  F7
2C20:  MOVWF  x2F
2C22:  MOVLW  FF
2C24:  MOVWF  x30
2C26:  MOVWF  x31
2C28:  MOVLW  1F
2C2A:  MOVWF  x32
2C2C:  MOVWF  x33
2C2E:  MOVLW  3D
2C30:  MOVWF  x34
2C32:  MOVLW  FC
2C34:  MOVWF  x35
2C36:  MOVLW  F8
2C38:  MOVWF  x36
2C3A:  MOVWF  x37
2C3C:  MOVWF  x38
2C3E:  MOVWF  x39
2C40:  MOVLW  7C
2C42:  MOVWF  x3A
2C44:  MOVLW  7D
2C46:  MOVWF  x3B
2C48:  MOVLW  FF
2C4A:  MOVWF  x3C
2C4C:  MOVWF  x3D
2C4E:  MOVWF  x3E
2C50:  MOVWF  x3F
2C52:  MOVWF  x40
2C54:  MOVWF  x41
2C56:  MOVWF  x42
2C58:  MOVWF  x43
2C5A:  MOVLW  7F
2C5C:  MOVWF  x44
2C5E:  MOVLW  3F
2C60:  MOVWF  x45
2C62:  MOVLW  0F
2C64:  MOVWF  x46
2C66:  MOVLW  07
2C68:  MOVWF  x47
2C6A:  CLRF   x48
2C6C:  MOVLW  30
2C6E:  MOVWF  x49
2C70:  MOVWF  x4A
2C72:  CLRF   x4B
2C74:  CLRF   x4C
2C76:  CLRF   x4D
2C78:  CLRF   x4E
2C7A:  CLRF   x4F
2C7C:  CLRF   x50
2C7E:  CLRF   x51
2C80:  CLRF   x52
2C82:  CLRF   x53
2C84:  CLRF   x54
2C86:  CLRF   x55
2C88:  CLRF   x56
2C8A:  CLRF   x57
2C8C:  CLRF   x58
2C8E:  CLRF   x59
2C90:  CLRF   x5A
2C92:  CLRF   x5B
2C94:  CLRF   x5C
2C96:  CLRF   x5D
2C98:  CLRF   x5E
2C9A:  CLRF   x5F
2C9C:  CLRF   x60
2C9E:  MOVLW  FE
2CA0:  MOVWF  x61
2CA2:  MOVWF  x62
2CA4:  MOVLW  FC
2CA6:  MOVWF  x63
2CA8:  CLRF   x64
2CAA:  CLRF   x65
2CAC:  CLRF   x66
2CAE:  CLRF   x67
2CB0:  CLRF   x68
2CB2:  CLRF   x69
2CB4:  CLRF   x6A
2CB6:  CLRF   x6B
2CB8:  CLRF   x6C
2CBA:  CLRF   x6D
2CBC:  CLRF   x6E
2CBE:  CLRF   x6F
2CC0:  CLRF   x70
2CC2:  CLRF   x71
2CC4:  CLRF   x72
2CC6:  CLRF   x73
2CC8:  CLRF   x74
2CCA:  CLRF   x75
2CCC:  CLRF   x76
2CCE:  CLRF   x77
2CD0:  CLRF   x78
2CD2:  CLRF   x79
2CD4:  MOVLW  E0
2CD6:  MOVWF  x7A
2CD8:  MOVLW  C0
2CDA:  MOVWF  x7B
2CDC:  CLRF   x7C
2CDE:  CLRF   x7D
2CE0:  CLRF   x7E
2CE2:  CLRF   x7F
2CE4:  CLRF   x80
2CE6:  CLRF   x81
2CE8:  CLRF   x82
2CEA:  CLRF   x83
2CEC:  CLRF   x84
2CEE:  CLRF   x85
2CF0:  CLRF   x86
2CF2:  MOVLW  30
2CF4:  MOVWF  x87
2CF6:  MOVWF  x88
2CF8:  CLRF   x89
2CFA:  CLRF   x8A
2CFC:  CLRF   x8B
2CFE:  CLRF   x8C
2D00:  CLRF   x8D
2D02:  CLRF   x8E
2D04:  CLRF   x8F
2D06:  CLRF   x90
2D08:  CLRF   x91
2D0A:  CLRF   x92
2D0C:  CLRF   x93
2D0E:  CLRF   x94
2D10:  CLRF   x95
2D12:  CLRF   x96
2D14:  CLRF   x97
2D16:  CLRF   x98
2D18:  CLRF   x99
2D1A:  CLRF   x9A
2D1C:  CLRF   x9B
2D1E:  CLRF   x9C
2D20:  CLRF   x9D
2D22:  MOVLW  C0
2D24:  MOVWF  x9E
2D26:  MOVLW  FE
2D28:  MOVWF  x9F
2D2A:  MOVLW  FF
2D2C:  MOVWF  xA0
2D2E:  MOVWF  xA1
2D30:  MOVWF  xA2
2D32:  MOVWF  xA3
2D34:  MOVWF  xA4
2D36:  MOVWF  xA5
2D38:  MOVWF  xA6
2D3A:  MOVWF  xA7
2D3C:  MOVWF  xA8
2D3E:  MOVLW  7F
2D40:  MOVWF  xA9
2D42:  MOVWF  xAA
2D44:  MOVLW  3F
2D46:  MOVWF  xAB
2D48:  MOVLW  1F
2D4A:  MOVWF  xAC
2D4C:  MOVLW  0F
2D4E:  MOVWF  xAD
2D50:  MOVLW  07
2D52:  MOVWF  xAE
2D54:  MOVLW  1F
2D56:  MOVWF  xAF
2D58:  MOVLW  7F
2D5A:  MOVWF  xB0
2D5C:  MOVLW  FF
2D5E:  MOVWF  xB1
2D60:  MOVWF  xB2
2D62:  MOVLW  F8
2D64:  MOVWF  xB3
2D66:  MOVWF  xB4
2D68:  MOVLW  FF
2D6A:  MOVWF  xB5
2D6C:  MOVWF  xB6
2D6E:  MOVWF  xB7
2D70:  MOVWF  xB8
2D72:  MOVWF  xB9
2D74:  MOVLW  FE
2D76:  MOVWF  xBA
2D78:  MOVLW  F8
2D7A:  MOVWF  xBB
2D7C:  MOVLW  E0
2D7E:  MOVWF  xBC
2D80:  CLRF   xBD
2D82:  CLRF   xBE
2D84:  CLRF   xBF
2D86:  MOVLW  01
2D88:  MOVWF  xC0
2D8A:  CLRF   xC1
2D8C:  CLRF   xC2
2D8E:  CLRF   xC3
2D90:  CLRF   xC4
2D92:  CLRF   xC5
2D94:  CLRF   xC6
2D96:  CLRF   xC7
2D98:  CLRF   xC8
2D9A:  MOVLW  FE
2D9C:  MOVWF  xC9
2D9E:  MOVWF  xCA
2DA0:  CLRF   xCB
2DA2:  CLRF   xCC
2DA4:  CLRF   xCD
2DA6:  MOVLW  FC
2DA8:  MOVWF  xCE
2DAA:  MOVLW  FE
2DAC:  MOVWF  xCF
2DAE:  MOVLW  FC
2DB0:  MOVWF  xD0
2DB2:  MOVLW  0C
2DB4:  MOVWF  xD1
2DB6:  MOVLW  06
2DB8:  MOVWF  xD2
2DBA:  MOVWF  xD3
2DBC:  MOVLW  0E
2DBE:  MOVWF  xD4
2DC0:  MOVLW  FC
2DC2:  MOVWF  xD5
2DC4:  MOVLW  F8
2DC6:  MOVWF  xD6
2DC8:  CLRF   xD7
2DCA:  CLRF   xD8
2DCC:  MOVLW  F0
2DCE:  MOVWF  xD9
2DD0:  MOVLW  F8
2DD2:  MOVWF  xDA
2DD4:  MOVLW  1C
2DD6:  MOVWF  xDB
2DD8:  MOVLW  0E
2DDA:  MOVWF  xDC
2DDC:  MOVLW  06
2DDE:  MOVWF  xDD
2DE0:  MOVWF  xDE
2DE2:  MOVWF  xDF
2DE4:  MOVLW  0C
2DE6:  MOVWF  xE0
2DE8:  MOVLW  FF
2DEA:  MOVWF  xE1
2DEC:  MOVWF  xE2
2DEE:  MOVWF  xE3
2DF0:  CLRF   xE4
2DF2:  CLRF   xE5
2DF4:  MOVLW  FE
2DF6:  MOVWF  xE6
2DF8:  MOVWF  xE7
2DFA:  CLRF   xE8
2DFC:  CLRF   xE9
2DFE:  CLRF   xEA
2E00:  CLRF   xEB
2E02:  MOVLW  FC
2E04:  MOVWF  xEC
2E06:  MOVLW  FE
2E08:  MOVWF  xED
2E0A:  MOVLW  FC
2E0C:  MOVWF  xEE
2E0E:  CLRF   xEF
2E10:  MOVLW  18
2E12:  MOVWF  xF0
2E14:  MOVLW  3C
2E16:  MOVWF  xF1
2E18:  MOVLW  7E
2E1A:  MOVWF  xF2
2E1C:  MOVLW  66
2E1E:  MOVWF  xF3
2E20:  MOVLW  E6
2E22:  MOVWF  xF4
2E24:  MOVLW  CE
2E26:  MOVWF  xF5
2E28:  MOVLW  84
2E2A:  MOVWF  xF6
2E2C:  CLRF   xF7
2E2E:  CLRF   xF8
2E30:  MOVLW  06
2E32:  MOVWF  xF9
2E34:  MOVLW  FF
2E36:  MOVWF  xFA
2E38:  MOVWF  xFB
2E3A:  MOVLW  06
2E3C:  MOVWF  xFC
2E3E:  MOVWF  xFD
2E40:  MOVLW  FC
2E42:  MOVWF  xFE
2E44:  MOVLW  FE
2E46:  MOVWF  xFF
2E48:  MOVLW  FC
2E4A:  MOVLB  3
2E4C:  MOVWF  x00
2E4E:  MOVLW  0C
2E50:  MOVWF  x01
2E52:  MOVLW  06
2E54:  MOVWF  x02
2E56:  MOVWF  x03
2E58:  MOVWF  x04
2E5A:  CLRF   x05
2E5C:  CLRF   x06
2E5E:  MOVLW  FE
2E60:  MOVWF  x07
2E62:  MOVWF  x08
2E64:  CLRF   x09
2E66:  CLRF   x0A
2E68:  MOVLW  C0
2E6A:  MOVWF  x0B
2E6C:  MOVLW  F8
2E6E:  MOVWF  x0C
2E70:  MOVLW  FC
2E72:  MOVWF  x0D
2E74:  MOVLW  4E
2E76:  MOVWF  x0E
2E78:  MOVLW  46
2E7A:  MOVWF  x0F
2E7C:  MOVWF  x10
2E7E:  MOVWF  x11
2E80:  MOVLW  4E
2E82:  MOVWF  x12
2E84:  MOVLW  7C
2E86:  MOVWF  x13
2E88:  MOVLW  78
2E8A:  MOVWF  x14
2E8C:  MOVLW  40
2E8E:  MOVWF  x15
2E90:  MOVLW  18
2E92:  MOVWF  x16
2E94:  MOVLW  3C
2E96:  MOVWF  x17
2E98:  MOVLW  76
2E9A:  MOVWF  x18
2E9C:  MOVLW  E6
2E9E:  MOVWF  x19
2EA0:  MOVLW  CE
2EA2:  MOVWF  x1A
2EA4:  MOVLW  CC
2EA6:  MOVWF  x1B
2EA8:  MOVLW  80
2EAA:  MOVWF  x1C
2EAC:  CLRF   x1D
2EAE:  CLRF   x1E
2EB0:  CLRF   x1F
2EB2:  CLRF   x20
2EB4:  CLRF   x21
2EB6:  CLRF   x22
2EB8:  CLRF   x23
2EBA:  CLRF   x24
2EBC:  CLRF   x25
2EBE:  CLRF   x26
2EC0:  CLRF   x27
2EC2:  CLRF   x28
2EC4:  CLRF   x29
2EC6:  CLRF   x2A
2EC8:  CLRF   x2B
2ECA:  CLRF   x2C
2ECC:  CLRF   x2D
2ECE:  CLRF   x2E
2ED0:  CLRF   x2F
2ED2:  CLRF   x30
2ED4:  MOVLW  01
2ED6:  MOVWF  x31
2ED8:  MOVLW  07
2EDA:  MOVWF  x32
2EDC:  MOVLW  0F
2EDE:  MOVWF  x33
2EE0:  MOVLW  1F
2EE2:  MOVWF  x34
2EE4:  MOVWF  x35
2EE6:  MOVLW  3F
2EE8:  MOVWF  x36
2EEA:  MOVWF  x37
2EEC:  MOVWF  x38
2EEE:  MOVWF  x39
2EF0:  MOVLW  1F
2EF2:  MOVWF  x3A
2EF4:  MOVLW  0F
2EF6:  MOVWF  x3B
2EF8:  MOVLW  03
2EFA:  MOVWF  x3C
2EFC:  CLRF   x3D
2EFE:  CLRF   x3E
2F00:  CLRF   x3F
2F02:  CLRF   x40
2F04:  CLRF   x41
2F06:  CLRF   x42
2F08:  CLRF   x43
2F0A:  CLRF   x44
2F0C:  CLRF   x45
2F0E:  CLRF   x46
2F10:  CLRF   x47
2F12:  CLRF   x48
2F14:  MOVLW  0F
2F16:  MOVWF  x49
2F18:  MOVWF  x4A
2F1A:  CLRF   x4B
2F1C:  CLRF   x4C
2F1E:  CLRF   x4D
2F20:  MOVWF  x4E
2F22:  MOVWF  x4F
2F24:  MOVWF  x50
2F26:  CLRF   x51
2F28:  CLRF   x52
2F2A:  CLRF   x53
2F2C:  CLRF   x54
2F2E:  MOVWF  x55
2F30:  MOVWF  x56
2F32:  CLRF   x57
2F34:  CLRF   x58
2F36:  MOVLW  03
2F38:  MOVWF  x59
2F3A:  MOVLW  07
2F3C:  MOVWF  x5A
2F3E:  MOVLW  0E
2F40:  MOVWF  x5B
2F42:  MOVLW  0C
2F44:  MOVWF  x5C
2F46:  MOVLW  18
2F48:  MOVWF  x5D
2F4A:  MOVWF  x5E
2F4C:  MOVLW  0C
2F4E:  MOVWF  x5F
2F50:  MOVLW  06
2F52:  MOVWF  x60
2F54:  MOVLW  0F
2F56:  MOVWF  x61
2F58:  MOVWF  x62
2F5A:  MOVWF  x63
2F5C:  CLRF   x64
2F5E:  CLRF   x65
2F60:  MOVLW  01
2F62:  MOVWF  x66
2F64:  MOVLW  0F
2F66:  MOVWF  x67
2F68:  MOVLW  0E
2F6A:  MOVWF  x68
2F6C:  MOVLW  0C
2F6E:  MOVWF  x69
2F70:  MOVLW  18
2F72:  MOVWF  x6A
2F74:  MOVLW  0C
2F76:  MOVWF  x6B
2F78:  MOVLW  0F
2F7A:  MOVWF  x6C
2F7C:  MOVLW  07
2F7E:  MOVWF  x6D
2F80:  MOVLW  01
2F82:  MOVWF  x6E
2F84:  CLRF   x6F
2F86:  MOVLW  04
2F88:  MOVWF  x70
2F8A:  MOVLW  0E
2F8C:  MOVWF  x71
2F8E:  MOVLW  0C
2F90:  MOVWF  x72
2F92:  MOVLW  18
2F94:  MOVWF  x73
2F96:  MOVLW  0C
2F98:  MOVWF  x74
2F9A:  MOVLW  0F
2F9C:  MOVWF  x75
2F9E:  MOVLW  07
2FA0:  MOVWF  x76
2FA2:  CLRF   x77
2FA4:  CLRF   x78
2FA6:  CLRF   x79
2FA8:  MOVLW  0F
2FAA:  MOVWF  x7A
2FAC:  MOVWF  x7B
2FAE:  CLRF   x7C
2FB0:  CLRF   x7D
2FB2:  MOVWF  x7E
2FB4:  MOVWF  x7F
2FB6:  MOVWF  x80
2FB8:  CLRF   x81
2FBA:  CLRF   x82
2FBC:  CLRF   x83
2FBE:  CLRF   x84
2FC0:  CLRF   x85
2FC2:  CLRF   x86
2FC4:  MOVWF  x87
2FC6:  MOVWF  x88
2FC8:  CLRF   x89
2FCA:  CLRF   x8A
2FCC:  CLRF   x8B
2FCE:  MOVLW  07
2FD0:  MOVWF  x8C
2FD2:  MOVWF  x8D
2FD4:  MOVLW  0C
2FD6:  MOVWF  x8E
2FD8:  MOVWF  x8F
2FDA:  MOVLW  18
2FDC:  MOVWF  x90
2FDE:  MOVLW  1C
2FE0:  MOVWF  x91
2FE2:  MOVLW  0C
2FE4:  MOVWF  x92
2FE6:  MOVLW  06
2FE8:  MOVWF  x93
2FEA:  MOVWF  x94
2FEC:  CLRF   x95
2FEE:  MOVLW  04
2FF0:  MOVWF  x96
2FF2:  MOVLW  0E
2FF4:  MOVWF  x97
2FF6:  MOVLW  0C
2FF8:  MOVWF  x98
2FFA:  MOVLW  18
2FFC:  MOVWF  x99
2FFE:  MOVLW  0C
3000:  MOVWF  x9A
3002:  MOVLW  0F
3004:  MOVWF  x9B
3006:  MOVLW  07
3008:  MOVWF  x9C
300A:  CLRF   x9D
300C:  CLRF   x9E
300E:  CLRF   x9F
3010:  CLRF   xA0
3012:  CLRF   xA1
3014:  CLRF   xA2
3016:  CLRF   xA3
3018:  CLRF   xA4
301A:  CLRF   xA5
301C:  CLRF   xA6
301E:  CLRF   xA7
3020:  CLRF   xA8
3022:  CLRF   xA9
3024:  CLRF   xAA
3026:  CLRF   xAB
3028:  CLRF   xAC
302A:  CLRF   xAD
302C:  CLRF   xAE
302E:  CLRF   xAF
3030:  CLRF   xB0
3032:  CLRF   xB1
3034:  CLRF   xB2
3036:  CLRF   xB3
3038:  CLRF   xB4
303A:  CLRF   xB5
303C:  CLRF   xB6
303E:  CLRF   xB7
3040:  CLRF   xB8
3042:  CLRF   xB9
3044:  CLRF   xBA
3046:  CLRF   xBB
3048:  CLRF   xBC
304A:  CLRF   xBD
304C:  CLRF   xBE
304E:  CLRF   xBF
3050:  CLRF   xC0
3052:  CLRF   xC1
3054:  CLRF   xC2
3056:  CLRF   xC3
3058:  CLRF   xC4
305A:  CLRF   xC5
305C:  CLRF   xC6
305E:  CLRF   xC7
3060:  CLRF   xC8
3062:  CLRF   xC9
3064:  CLRF   xCA
3066:  CLRF   xCB
3068:  CLRF   xCC
306A:  CLRF   xCD
306C:  CLRF   xCE
306E:  CLRF   xCF
3070:  CLRF   xD0
3072:  CLRF   xD1
3074:  CLRF   xD2
3076:  CLRF   xD3
3078:  CLRF   xD4
307A:  CLRF   xD5
307C:  CLRF   xD6
307E:  CLRF   xD7
3080:  CLRF   xD8
3082:  CLRF   xD9
3084:  CLRF   xDA
3086:  CLRF   xDB
3088:  CLRF   xDC
308A:  CLRF   xDD
308C:  CLRF   xDE
308E:  CLRF   xDF
3090:  CLRF   xE0
3092:  CLRF   xE1
3094:  CLRF   xE2
3096:  CLRF   xE3
3098:  CLRF   xE4
309A:  CLRF   xE5
309C:  CLRF   xE6
309E:  CLRF   xE7
30A0:  CLRF   xE8
30A2:  CLRF   xE9
30A4:  CLRF   xEA
30A6:  CLRF   xEB
30A8:  CLRF   xEC
30AA:  CLRF   xED
30AC:  CLRF   xEE
30AE:  CLRF   xEF
30B0:  CLRF   xF0
30B2:  CLRF   xF1
30B4:  CLRF   xF2
30B6:  CLRF   xF3
30B8:  CLRF   xF4
30BA:  CLRF   xF5
30BC:  CLRF   xF6
30BE:  CLRF   xF7
30C0:  CLRF   xF8
30C2:  CLRF   xF9
30C4:  CLRF   xFA
30C6:  CLRF   xFB
30C8:  CLRF   xFC
30CA:  CLRF   xFD
30CC:  CLRF   xFE
30CE:  CLRF   xFF
30D0:  MOVLB  4
30D2:  CLRF   x00
30D4:  CLRF   x01
30D6:  CLRF   x02
30D8:  CLRF   x03
30DA:  CLRF   x04
30DC:  CLRF   x05
30DE:  CLRF   x06
30E0:  CLRF   x07
30E2:  CLRF   x08
30E4:  CLRF   x09
30E6:  CLRF   x0A
30E8:  CLRF   x0B
30EA:  CLRF   x0C
30EC:  CLRF   x0D
30EE:  CLRF   x0E
30F0:  CLRF   x0F
30F2:  CLRF   x10
30F4:  CLRF   x11
30F6:  CLRF   x12
30F8:  CLRF   x13
30FA:  CLRF   x14
30FC:  CLRF   x15
30FE:  CLRF   x16
3100:  CLRF   x17
3102:  CLRF   x18
3104:  CLRF   x19
3106:  CLRF   x1A
3108:  CLRF   x1B
310A:  CLRF   x1C
310C:  MOVLW  20
310E:  MOVWF  x1F
3110:  MOVWF  x20
3112:  MOVLW  3A
3114:  MOVWF  x21
3116:  MOVLW  20
3118:  MOVWF  x22
311A:  MOVWF  x23
311C:  CLRF   x24
311E:  MOVWF  x25
3120:  MOVWF  x26
3122:  MOVLW  2F
3124:  MOVWF  x27
3126:  MOVLW  20
3128:  MOVWF  x28
312A:  MOVWF  x29
312C:  MOVLW  2F
312E:  MOVWF  x2A
3130:  MOVLW  32
3132:  MOVWF  x2B
3134:  MOVLW  30
3136:  MOVWF  x2C
3138:  MOVLW  20
313A:  MOVWF  x2D
313C:  MOVWF  x2E
313E:  CLRF   x2F
3140:  MOVLW  48
3142:  MOVWF  x30
3144:  MOVLW  3A
3146:  MOVWF  x31
3148:  MOVLW  30
314A:  MOVWF  x32
314C:  MOVWF  x33
314E:  MOVWF  x34
3150:  MOVWF  x35
3152:  MOVWF  x36
3154:  MOVLW  3A
3156:  MOVWF  x37
3158:  MOVLW  30
315A:  MOVWF  x38
315C:  MOVWF  x39
315E:  MOVLW  20
3160:  MOVWF  x3A
3162:  CLRF   x3B
3164:  MOVLW  54
3166:  MOVWF  x3C
3168:  MOVLW  3A
316A:  MOVWF  x3D
316C:  MOVLW  30
316E:  MOVWF  x3E
3170:  MOVWF  x3F
3172:  MOVWF  x40
3174:  MOVWF  x41
3176:  MOVWF  x42
3178:  MOVLW  3A
317A:  MOVWF  x43
317C:  MOVLW  30
317E:  MOVWF  x44
3180:  MOVWF  x45
3182:  MOVLW  20
3184:  MOVWF  x46
3186:  CLRF   x47
3188:  MOVLW  52
318A:  MOVWF  x48
318C:  MOVLW  65
318E:  MOVWF  x49
3190:  MOVLW  6C
3192:  MOVWF  x4A
3194:  MOVLW  6F
3196:  MOVWF  x4B
3198:  MOVLW  67
319A:  MOVWF  x4C
319C:  MOVLW  69
319E:  MOVWF  x4D
31A0:  MOVLW  6F
31A2:  MOVWF  x4E
31A4:  CLRF   x4F
31A6:  MOVLW  44
31A8:  MOVWF  x50
31AA:  MOVLW  61
31AC:  MOVWF  x51
31AE:  MOVLW  74
31B0:  MOVWF  x52
31B2:  MOVLW  61
31B4:  MOVWF  x53
31B6:  CLRF   x54
31B8:  MOVLW  54
31BA:  MOVWF  x55
31BC:  MOVLW  69
31BE:  MOVWF  x56
31C0:  MOVLW  6D
31C2:  MOVWF  x57
31C4:  MOVLW  65
31C6:  MOVWF  x58
31C8:  MOVLW  72
31CA:  MOVWF  x59
31CC:  CLRF   x5A
31CE:  MOVLW  53
31D0:  MOVWF  x5B
31D2:  MOVLW  6F
31D4:  MOVWF  x5C
31D6:  MOVLW  62
31D8:  MOVWF  x5D
31DA:  MOVLW  72
31DC:  MOVWF  x5E
31DE:  MOVLW  65
31E0:  MOVWF  x5F
31E2:  CLRF   x60
31E4:  MOVLW  48
31E6:  MOVWF  x61
31E8:  MOVLW  6F
31EA:  MOVWF  x62
31EC:  MOVLW  72
31EE:  MOVWF  x63
31F0:  MOVLW  61
31F2:  MOVWF  x64
31F4:  MOVLW  73
31F6:  MOVWF  x65
31F8:  CLRF   x66
31FA:  MOVLW  4D
31FC:  MOVWF  x67
31FE:  MOVLW  69
3200:  MOVWF  x68
3202:  MOVLW  6E
3204:  MOVWF  x69
3206:  MOVLW  75
3208:  MOVWF  x6A
320A:  MOVLW  74
320C:  MOVWF  x6B
320E:  MOVLW  6F
3210:  MOVWF  x6C
3212:  MOVLW  73
3214:  MOVWF  x6D
3216:  CLRF   x6E
3218:  MOVLW  4D
321A:  MOVWF  x6F
321C:  MOVLW  65
321E:  MOVWF  x70
3220:  MOVLW  73
3222:  MOVWF  x71
3224:  CLRF   x72
3226:  MOVLW  44
3228:  MOVWF  x73
322A:  MOVLW  69
322C:  MOVWF  x74
322E:  MOVLW  61
3230:  MOVWF  x75
3232:  CLRF   x76
3234:  MOVLW  41
3236:  MOVWF  x77
3238:  MOVLW  6E
323A:  MOVWF  x78
323C:  MOVLW  6F
323E:  MOVWF  x79
3240:  CLRF   x7A
3242:  MOVLW  49
3244:  MOVWF  x7B
3246:  MOVLW  6E
3248:  MOVWF  x7C
324A:  MOVLW  69
324C:  MOVWF  x7D
324E:  MOVLW  74
3250:  MOVWF  x7E
3252:  MOVLW  20
3254:  MOVWF  x7F
3256:  MOVWF  x80
3258:  MOVLW  74
325A:  MOVWF  x81
325C:  MOVLW  65
325E:  MOVWF  x82
3260:  MOVLW  6D
3262:  MOVWF  x83
3264:  MOVLW  70
3266:  MOVWF  x84
3268:  CLRF   x85
326A:  MOVLW  53
326C:  MOVWF  x86
326E:  MOVLW  74
3270:  MOVWF  x87
3272:  MOVLW  6F
3274:  MOVWF  x88
3276:  MOVLW  70
3278:  MOVWF  x89
327A:  MOVLW  20
327C:  MOVWF  x8A
327E:  MOVWF  x8B
3280:  MOVLW  74
3282:  MOVWF  x8C
3284:  MOVLW  65
3286:  MOVWF  x8D
3288:  MOVLW  6D
328A:  MOVWF  x8E
328C:  MOVLW  70
328E:  MOVWF  x8F
3290:  CLRF   x90
3292:  MOVLW  52
3294:  MOVWF  x91
3296:  MOVLW  65
3298:  MOVWF  x92
329A:  MOVLW  73
329C:  MOVWF  x93
329E:  MOVLW  65
32A0:  MOVWF  x94
32A2:  MOVLW  74
32A4:  MOVWF  x95
32A6:  MOVLW  20
32A8:  MOVWF  x96
32AA:  MOVLW  74
32AC:  MOVWF  x97
32AE:  MOVLW  65
32B0:  MOVWF  x98
32B2:  MOVLW  6D
32B4:  MOVWF  x99
32B6:  MOVLW  70
32B8:  MOVWF  x9A
32BA:  CLRF   x9B
32BC:  MOVLW  44
32BE:  MOVWF  x9C
32C0:  MOVLW  69
32C2:  MOVWF  x9D
32C4:  MOVLW  61
32C6:  MOVWF  x9E
32C8:  MOVLW  20
32CA:  MOVWF  x9F
32CC:  MOVLW  73
32CE:  MOVWF  xA0
32D0:  MOVLW  65
32D2:  MOVWF  xA1
32D4:  MOVLW  6D
32D6:  MOVWF  xA2
32D8:  CLRF   xA3
32DA:  MOVLW  53
32DC:  MOVWF  xA4
32DE:  MOVLW  45
32E0:  MOVWF  xA5
32E2:  MOVLW  47
32E4:  MOVWF  xA6
32E6:  MOVLW  55
32E8:  MOVWF  xA7
32EA:  MOVLW  4E
32EC:  MOVWF  xA8
32EE:  MOVLW  44
32F0:  MOVWF  xA9
32F2:  MOVLW  41
32F4:  MOVWF  xAA
32F6:  CLRF   xAB
32F8:  MOVLW  54
32FA:  MOVWF  xAC
32FC:  MOVLW  45
32FE:  MOVWF  xAD
3300:  MOVLW  52
3302:  MOVWF  xAE
3304:  MOVLW  43
3306:  MOVWF  xAF
3308:  MOVLW  41
330A:  MOVWF  xB0
330C:  CLRF   xB1
330E:  MOVLW  51
3310:  MOVWF  xB2
3312:  MOVLW  55
3314:  MOVWF  xB3
3316:  MOVLW  41
3318:  MOVWF  xB4
331A:  MOVLW  52
331C:  MOVWF  xB5
331E:  MOVLW  54
3320:  MOVWF  xB6
3322:  MOVLW  41
3324:  MOVWF  xB7
3326:  CLRF   xB8
3328:  MOVLW  51
332A:  MOVWF  xB9
332C:  MOVLW  55
332E:  MOVWF  xBA
3330:  MOVLW  49
3332:  MOVWF  xBB
3334:  MOVLW  4E
3336:  MOVWF  xBC
3338:  MOVLW  54
333A:  MOVWF  xBD
333C:  MOVLW  41
333E:  MOVWF  xBE
3340:  CLRF   xBF
3342:  MOVLW  53
3344:  MOVWF  xC0
3346:  MOVLW  45
3348:  MOVWF  xC1
334A:  MOVLW  58
334C:  MOVWF  xC2
334E:  MOVLW  54
3350:  MOVWF  xC3
3352:  MOVLW  41
3354:  MOVWF  xC4
3356:  CLRF   xC5
3358:  MOVLW  53
335A:  MOVWF  xC6
335C:  MOVLW  41
335E:  MOVWF  xC7
3360:  MOVLW  42
3362:  MOVWF  xC8
3364:  MOVLW  41
3366:  MOVWF  xC9
3368:  MOVLW  44
336A:  MOVWF  xCA
336C:  MOVLW  4F
336E:  MOVWF  xCB
3370:  CLRF   xCC
3372:  MOVLW  44
3374:  MOVWF  xCD
3376:  MOVLW  4F
3378:  MOVWF  xCE
337A:  MOVLW  4D
337C:  MOVWF  xCF
337E:  MOVLW  49
3380:  MOVWF  xD0
3382:  MOVLW  4E
3384:  MOVWF  xD1
3386:  MOVLW  47
3388:  MOVWF  xD2
338A:  MOVLW  4F
338C:  MOVWF  xD3
338E:  CLRF   xD4
....................  
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD); 
3390:  MOVF   FC1,W
3392:  ANDLW  C0
3394:  IORLW  0F
3396:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_2); 
3398:  BCF    FC0.0
339A:  BCF    FC0.1
339C:  BCF    FC0.2
339E:  BCF    FC0.7
33A0:  BSF    FC2.0
....................    setup_psp(PSP_DISABLED); 
33A2:  BCF    F96.4
....................    setup_wdt(WDT_OFF); 
33A4:  BCF    FD1.0
....................    //Para 20MHZ 
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_2|RTCC_8_bit); 
33A6:  MOVLW  C0
33A8:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
33AA:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
33AC:  MOVLW  00
33AE:  MOVWF  FCA
33B0:  MOVLW  00
33B2:  MOVWF  FCB
....................    //Para 8MHZ 
....................    /*setup_timer_0(RTCC_INTERNAL|RTCC_DIV_8|RTCC_8_bit); 
....................    setup_timer_1(T1_DISABLED); 
....................    setup_timer_2(T2_DISABLED,0,1);*/ 
....................    setup_comparator(NC_NC_NC_NC); 
33B4:  MOVLW  07
33B6:  MOVWF  FB4
33B8:  MOVF   F92,W
33BA:  MOVWF  F92
33BC:  MOVLW  10
33BE:  MOVWF  00
33C0:  DECFSZ 00,F
33C2:  BRA    33C0
33C4:  NOP   
33C6:  MOVF   FB4,W
33C8:  BCF    FA1.6
....................    setup_vref(FALSE); 
33CA:  CLRF   FB5
....................    clear_interrupt(INT_TIMER0);     //LIMPA AS INTERRUPÇOES 
33CC:  BCF    FF2.2
....................    clear_interrupt(INT_TIMER1); 
33CE:  BCF    F9E.0
....................    enable_interrupts(INT_TIMER0);   //HABILITA A INTERRUPÇÃO DO TIMER0 
33D0:  BSF    FF2.5
....................    enable_interrupts(INT_TIMER1);   //HABILITA A INTERRUPÇÃO DO TIMER1 
33D2:  BSF    F9D.0
....................    enable_interrupts(GLOBAL);       //HABILITA AS INTERRUPÇOES GLOBAIS 
33D4:  MOVLW  C0
33D6:  IORWF  FF2,F
....................    setup_oscillator(OSC_16MHZ);                // Set internal oscillator to 8MHz 
33D8:  MOVLW  60
33DA:  MOVWF  FD3
33DC:  MOVLW  40
33DE:  MOVWF  F9B
33E0:  MOVF   FD3,W
....................    port_b_pullups(TRUE);                      // Enable PORTB internal weak pull-ups 
33E2:  BCF    FF1.7
....................    /*---INICIALIZA FUNÇOES---*/ 
....................    SSD1306_Begin(); 
33E4:  MOVLB  0
33E6:  GOTO   0CA4
....................    SSD1306_Display();  
33EA:  CALL   0E18
....................    SSD1306_ClearDisplay();    // Clear the buffer. 
33EE:  CALL   0F4A
....................    inicializar_flags(); 
33F2:  GOTO   0F70
33F6:  CLRF   16
33F8:  BTFSC  FF2.7
33FA:  BSF    16.7
33FC:  BCF    FF2.7
....................    delay_ms(50); 
33FE:  MOVLW  32
3400:  MOVLB  5
3402:  MOVWF  x49
3404:  MOVLB  0
3406:  CALL   0324
340A:  BTFSC  16.7
340C:  BSF    FF2.7
....................     
....................    for(position_count = 0; position_count < 3; position_count++){ 
340E:  MOVLB  4
3410:  CLRF   xD7
3412:  MOVF   xD7,W
3414:  SUBLW  02
3416:  BNC   345C
....................       horimetro.hhr = horimetro.hhr << 8;    
3418:  MOVFF  506,507
341C:  MOVFF  505,506
3420:  MOVFF  504,505
3424:  MOVLB  5
3426:  CLRF   x04
....................       horimetro.hhr += read_eeprom(HR_START + position_count);  
3428:  MOVLW  50
342A:  MOVLB  4
342C:  ADDWF  xD7,W
342E:  MOVLB  5
3430:  MOVWF  x0C
3432:  MOVFF  FF2,50D
3436:  BCF    FF2.7
3438:  MOVFF  50C,FA9
343C:  BCF    FA6.6
343E:  BCF    FA6.7
3440:  BSF    FA6.0
3442:  MOVF   FA8,W
3444:  BTFSC  x0D.7
3446:  BSF    FF2.7
3448:  ADDWF  x04,F
344A:  MOVLW  00
344C:  ADDWFC x05,F
344E:  MOVLW  00
3450:  ADDWFC x06,F
3452:  MOVLW  00
3454:  ADDWFC x07,F
....................    } 
3456:  MOVLB  4
3458:  INCF   xD7,F
345A:  BRA    3412
....................    if(horimetro.hhr == 0xFFFFFFFF)horimetro.hhr=0x00000000; 
345C:  MOVLB  5
345E:  INCFSZ x04,W
3460:  BRA    3476
3462:  INCFSZ x05,W
3464:  BRA    3476
3466:  INCFSZ x06,W
3468:  BRA    3476
346A:  INCFSZ x07,W
346C:  BRA    3476
346E:  CLRF   x07
3470:  CLRF   x06
3472:  CLRF   x05
3474:  CLRF   x04
....................    position_count = 0; 
3476:  MOVLB  4
3478:  CLRF   xD7
....................    for(position_count = 0; position_count < 2; position_count++){ 
347A:  CLRF   xD7
347C:  MOVF   xD7,W
347E:  SUBLW  01
3480:  BNC   34B6
....................       horimetro.hmin = horimetro.hmin << 8;    
3482:  MOVFF  502,503
3486:  MOVLB  5
3488:  CLRF   x02
....................       horimetro.hmin += read_eeprom(TP_START + position_count); 
348A:  MOVLW  56
348C:  MOVLB  4
348E:  ADDWF  xD7,W
3490:  MOVLB  5
3492:  MOVWF  x0C
3494:  MOVFF  FF2,50D
3498:  BCF    FF2.7
349A:  MOVFF  50C,FA9
349E:  BCF    FA6.6
34A0:  BCF    FA6.7
34A2:  BSF    FA6.0
34A4:  MOVF   FA8,W
34A6:  BTFSC  x0D.7
34A8:  BSF    FF2.7
34AA:  ADDWF  x02,F
34AC:  MOVLW  00
34AE:  ADDWFC x03,F
....................    } 
34B0:  MOVLB  4
34B2:  INCF   xD7,F
34B4:  BRA    347C
....................    if(horimetro.hmin == 0xFFFF)horimetro.hmin=0x0000; 
34B6:  MOVLB  5
34B8:  INCFSZ x02,W
34BA:  BRA    34C4
34BC:  INCFSZ x03,W
34BE:  BRA    34C4
34C0:  CLRF   x03
34C2:  CLRF   x02
....................    hori[9] = horimetro.hmin % 10 + 0x30; 
34C4:  MOVFF  503,50D
34C8:  MOVFF  502,50C
34CC:  CLRF   x0F
34CE:  MOVLW  0A
34D0:  MOVWF  x0E
34D2:  MOVLB  0
34D4:  CALL   0FA4
34D8:  MOVLB  5
34DA:  MOVLW  30
34DC:  ADDWF  00,W
34DE:  MOVLB  4
34E0:  MOVWF  x39
....................    hori[8] = horimetro.hmin / 10 + 0x30; 
34E2:  MOVFF  503,50D
34E6:  MOVFF  502,50C
34EA:  MOVLB  5
34EC:  CLRF   x0F
34EE:  MOVLW  0A
34F0:  MOVWF  x0E
34F2:  MOVLB  0
34F4:  CALL   0FA4
34F8:  MOVLW  30
34FA:  MOVLB  5
34FC:  ADDWF  01,W
34FE:  MOVLB  4
3500:  MOVWF  x38
....................    readm = 1; 
3502:  BSF    1C.2
....................    conv_valor(hori, horimetro.hhr);   
3504:  MOVFF  505,50D
3508:  MOVFF  504,50C
350C:  MOVLW  04
350E:  MOVLB  5
3510:  MOVWF  x0F
3512:  MOVLW  30
3514:  MOVWF  x0E
3516:  MOVFF  505,511
351A:  MOVFF  504,510
351E:  MOVLB  0
3520:  CALL   0FEA
....................     
....................    while(True){ 
....................     
....................  
....................       atualiza_menu(); 
3524:  GOTO   1D96
....................        
....................       if(horimetro.hor != min &&  menu2.flagmenu!=2){ 
3528:  MOVLB  4
352A:  MOVF   xD9,W
352C:  MOVLB  5
352E:  SUBWF  x01,W
3530:  BTFSC  FD8.2
3532:  BRA    364E
3534:  MOVLB  4
3536:  MOVF   xEE,W
3538:  SUBLW  02
353A:  BTFSS  FD8.2
353C:  BRA    3542
353E:  MOVLB  5
3540:  BRA    364E
....................          horimetro.hor = min; 
3542:  MOVFF  4D9,501
....................          horimetro.hmin++; 
3546:  MOVLB  5
3548:  INCF   x02,F
354A:  BTFSC  FD8.2
354C:  INCF   x03,F
....................          if(flagi == 1 && flags ==0 && flagr ==0){ 
354E:  MOVLB  4
3550:  BTFSS  xD5.1
3552:  BRA    3564
3554:  BTFSC  xD5.2
3556:  BRA    3564
3558:  BTFSC  xD5.3
355A:  BRA    3564
....................             horimetro.tmin++;    
355C:  MOVLB  5
355E:  INCF   x08,F
3560:  BTFSC  FD8.2
3562:  INCF   x09,F
....................          } 
....................          if(horimetro.hmin>59){ 
3564:  MOVLB  5
3566:  MOVF   x03,F
3568:  BNZ   3570
356A:  MOVF   x02,W
356C:  SUBLW  3B
356E:  BC    3584
....................             horimetro.hhr++; 
3570:  MOVLW  01
3572:  ADDWF  x04,F
3574:  BTFSC  FD8.0
3576:  INCF   x05,F
3578:  BTFSC  FD8.2
357A:  INCF   x06,F
357C:  BTFSC  FD8.2
357E:  INCF   x07,F
....................             horimetro.hmin = 0; 
3580:  CLRF   x03
3582:  CLRF   x02
....................          } 
....................          if(horimetro.tmin>59){ 
3584:  MOVF   x09,F
3586:  BNZ   358E
3588:  MOVF   x08,W
358A:  SUBLW  3B
358C:  BC    3598
....................             horimetro.thr++; 
358E:  INCF   x0A,F
3590:  BTFSC  FD8.2
3592:  INCF   x0B,F
....................             horimetro.tmin = 0; 
3594:  CLRF   x09
3596:  CLRF   x08
....................          } 
....................          hori[9] = horimetro.hmin % 10 + 0x30; 
3598:  MOVFF  503,50D
359C:  MOVFF  502,50C
35A0:  CLRF   x0F
35A2:  MOVLW  0A
35A4:  MOVWF  x0E
35A6:  MOVLB  0
35A8:  CALL   0FA4
35AC:  MOVLB  5
35AE:  MOVLW  30
35B0:  ADDWF  00,W
35B2:  MOVLB  4
35B4:  MOVWF  x39
....................          hori[8] = horimetro.hmin / 10 + 0x30; 
35B6:  MOVFF  503,50D
35BA:  MOVFF  502,50C
35BE:  MOVLB  5
35C0:  CLRF   x0F
35C2:  MOVLW  0A
35C4:  MOVWF  x0E
35C6:  MOVLB  0
35C8:  CALL   0FA4
35CC:  MOVLW  30
35CE:  MOVLB  5
35D0:  ADDWF  01,W
35D2:  MOVLB  4
35D4:  MOVWF  x38
....................          conv_valor(hori, horimetro.hhr); 
35D6:  MOVFF  505,50D
35DA:  MOVFF  504,50C
35DE:  MOVLW  04
35E0:  MOVLB  5
35E2:  MOVWF  x0F
35E4:  MOVLW  30
35E6:  MOVWF  x0E
35E8:  MOVFF  505,511
35EC:  MOVFF  504,510
35F0:  MOVLB  0
35F2:  CALL   0FEA
....................          tmr[9] = horimetro.tmin % 10 + 0x30; 
35F6:  MOVFF  509,50D
35FA:  MOVFF  508,50C
35FE:  MOVLB  5
3600:  CLRF   x0F
3602:  MOVLW  0A
3604:  MOVWF  x0E
3606:  MOVLB  0
3608:  CALL   0FA4
360C:  MOVLB  5
360E:  MOVLW  30
3610:  ADDWF  00,W
3612:  MOVLB  4
3614:  MOVWF  x45
....................          tmr[8] = horimetro.tmin / 10 + 0x30;   
3616:  MOVFF  509,50D
361A:  MOVFF  508,50C
361E:  MOVLB  5
3620:  CLRF   x0F
3622:  MOVLW  0A
3624:  MOVWF  x0E
3626:  MOVLB  0
3628:  CALL   0FA4
362C:  MOVLW  30
362E:  MOVLB  5
3630:  ADDWF  01,W
3632:  MOVLB  4
3634:  MOVWF  x44
....................          conv_valor(tmr, horimetro.thr); 
3636:  MOVLW  04
3638:  MOVLB  5
363A:  MOVWF  x0F
363C:  MOVLW  3C
363E:  MOVWF  x0E
3640:  MOVFF  50B,511
3644:  MOVFF  50A,510
3648:  MOVLB  0
364A:  CALL   0FEA
....................       } 
....................  
....................       if(flagr == 1 && flagi == 0 && flags ==0){ 
364E:  MOVLB  4
3650:  BTFSS  xD5.3
3652:  BRA    36CC
3654:  BTFSC  xD5.1
3656:  BRA    36CC
3658:  BTFSC  xD5.2
365A:  BRA    36CC
....................          horimetro.tmin == 0; 
365C:  MOVLB  5
365E:  MOVF   x08,F
3660:  BNZ   3666
3662:  MOVF   x09,F
3664:  BZ    366A
3666:  MOVLW  00
3668:  BRA    366A
....................          horimetro.thr == 0; 
366A:  MOVF   x0A,F
366C:  BNZ   3672
366E:  MOVF   x0B,F
3670:  BZ    3676
3672:  MOVLW  00
3674:  BRA    3676
....................          tmr[9] = horimetro.tmin % 10 + 0x30; 
3676:  MOVFF  509,50D
367A:  MOVFF  508,50C
367E:  CLRF   x0F
3680:  MOVLW  0A
3682:  MOVWF  x0E
3684:  MOVLB  0
3686:  CALL   0FA4
368A:  MOVLB  5
368C:  MOVLW  30
368E:  ADDWF  00,W
3690:  MOVLB  4
3692:  MOVWF  x45
....................          tmr[8] = horimetro.tmin / 10 + 0x30; 
3694:  MOVFF  509,50D
3698:  MOVFF  508,50C
369C:  MOVLB  5
369E:  CLRF   x0F
36A0:  MOVLW  0A
36A2:  MOVWF  x0E
36A4:  MOVLB  0
36A6:  CALL   0FA4
36AA:  MOVLW  30
36AC:  MOVLB  5
36AE:  ADDWF  01,W
36B0:  MOVLB  4
36B2:  MOVWF  x44
....................          conv_valor(tmr, horimetro.thr); 
36B4:  MOVLW  04
36B6:  MOVLB  5
36B8:  MOVWF  x0F
36BA:  MOVLW  3C
36BC:  MOVWF  x0E
36BE:  MOVFF  50B,511
36C2:  MOVFF  50A,510
36C6:  MOVLB  0
36C8:  CALL   0FEA
....................       } 
....................  
....................    } 
36CC:  MOVLB  0
36CE:  BRA    3524
....................     
.................... } 
....................  
.................... void trata_teclas(void){ 
....................   /*---TECLA CONF---*/ 
36D0:  SLEEP 
....................   if(!input(bot1)){ 
*
048E:  BSF    F95.3
0490:  BTFSC  F83.3
0492:  BRA    04BC
....................       debouncing = 10;                   //BOTAO PRESSIONADO: FLAG DE DEBOUCING CARREGADA COM O VALOR 25 
0494:  MOVLB  4
0496:  CLRF   xE0
0498:  MOVLW  0A
049A:  MOVWF  xDF
....................       while(debouncing > 0)debouncing--; //ENQUANTO CONTADOR NAO É ZERADO FICA PRESO NO LAÇO DECREMENTANDO(TEMPO DE ESTABILIZAR BOTÃO) 
049C:  MOVF   xDF,F
049E:  BNZ   04A4
04A0:  MOVF   xE0,F
04A2:  BZ    04AE
04A4:  MOVF   xDF,W
04A6:  BTFSC  FD8.2
04A8:  DECF   xE0,F
04AA:  DECF   xDF,F
04AC:  BRA    049C
....................       while(!input(bot1))flag1 = 0;      //SE O BOTAO CONTINUAR PRESSIONADO FICA PRESO NO LOOP SEM FAZER NADA ATÉ QUE SEJA SOLTO O BOTÃO 
04AE:  BSF    F95.3
04B0:  BTFSC  F83.3
04B2:  BRA    04B8
04B4:  BCF    1C.3
04B6:  BRA    04AE
....................       flag1 = 1;                         //FLAG QUE SINALIZA QUE UM BITÃO FOI PRESSIONADO 
04B8:  BSF    1C.3
04BA:  MOVLB  0
....................   } 
....................   /*---SAI DA TELA DE DESCANSO PRO MENU 1---*/ 
....................   if(flag1 && menu1.flagmenu == 0){    //SE A FLAG DE SINALIZAÇÃO ESTIVER SETADA E O MENU1 ESTIVER NA OPOSIÇÃO 0(POSIÇÃO DE DESCANSO) 
04BC:  BTFSS  1C.3
04BE:  BRA    04D6
04C0:  MOVLB  4
04C2:  MOVF   xEB,F
04C4:  BTFSC  FD8.2
04C6:  BRA    04CC
04C8:  MOVLB  0
04CA:  BRA    04D6
....................       menu1.flagmenu = 1;              //O MENU 1 IRA PARA PRIMERA POSIÇÃO ONDE MOSTRARA A LISTA DE OPÇOES 
04CC:  MOVLW  01
04CE:  MOVWF  xEB
....................       menu1.flagtrava =1;              //SETA A FLAG DE INTERTRAVAMENTO DO MENU1 
04D0:  MOVWF  xEA
....................       flag1 = 0;                       //RESETA A FLAG DE SINALIZAÇÃO DE PRESSIONAMENTO DO BOTÃO 
04D2:  BCF    1C.3
04D4:  MOVLB  0
....................   } 
....................   /*---ENTRA NA PRIMERA OPÇÃO DO MENU 1---*/ 
....................   if (flag1 == 1 && menu1.flagmenu==1 && menu2.flagmenu ==0 ){ //CONDIÇOES DE INTERTRAVAMENTO PARA ENTRAR NA PRIMERA OPÇÃO DO MENU1 
04D6:  BTFSS  1C.3
04D8:  BRA    04FA
04DA:  MOVLB  4
04DC:  DECFSZ xEB,W
04DE:  BRA    04E2
04E0:  BRA    04E6
04E2:  MOVLB  0
04E4:  BRA    04FA
04E6:  MOVF   xEE,F
04E8:  BTFSC  FD8.2
04EA:  BRA    04F0
04EC:  MOVLB  0
04EE:  BRA    04FA
....................       menu2.flagmenu = 1; 
04F0:  MOVLW  01
04F2:  MOVWF  xEE
....................       menu2.flagtrava =1; 
04F4:  MOVWF  xED
....................       flag1 = 0; 
04F6:  BCF    1C.3
04F8:  MOVLB  0
....................   } 
....................   /*---ENTRA NA SEGUNDA OPÇÃO DO MENU 1---*/ 
....................   if (flag1 == 1 && menu1.flagmenu==2 && menu3.flagmenu ==0){  //CONDIÇOES DE INTERTRAVAMENTO PARA ENTRAR NA SEGUNDA OPÇÃO DO MENU1 
04FA:  BTFSS  1C.3
04FC:  BRA    0520
04FE:  MOVLB  4
0500:  MOVF   xEB,W
0502:  SUBLW  02
0504:  BTFSC  FD8.2
0506:  BRA    050C
0508:  MOVLB  0
050A:  BRA    0520
050C:  MOVF   xF1,F
050E:  BTFSC  FD8.2
0510:  BRA    0516
0512:  MOVLB  0
0514:  BRA    0520
....................       menu3.flagmenu = 1; 
0516:  MOVLW  01
0518:  MOVWF  xF1
....................       menu3.flagtrava = 1; 
051A:  MOVWF  xF0
....................       flag1 = 0; 
051C:  BCF    1C.3
051E:  MOVLB  0
....................   } 
....................   /*---ENTRA NA TERCEIRA OPÇÃO DO MENU 1---*/   //CONDIÇOES DE INTERTRAVAMENTO PARA ENTRAR NA TERCEIRA OPÇÃO DO MENU1 
....................   if (flag1 == 1 && menu1.flagmenu==3 && menu4.flagmenu ==0){ 
0520:  BTFSS  1C.3
0522:  BRA    0546
0524:  MOVLB  4
0526:  MOVF   xEB,W
0528:  SUBLW  03
052A:  BTFSC  FD8.2
052C:  BRA    0532
052E:  MOVLB  0
0530:  BRA    0546
0532:  MOVF   xF4,F
0534:  BTFSC  FD8.2
0536:  BRA    053C
0538:  MOVLB  0
053A:  BRA    0546
....................       menu4.flagmenu = 1; 
053C:  MOVLW  01
053E:  MOVWF  xF4
....................       menu4.flagtrava = 1; 
0540:  MOVWF  xF3
....................       flag1 = 0; 
0542:  BCF    1C.3
0544:  MOVLB  0
....................   } 
....................   /*---ENTRA NA QUARTA OPÇÃO DO MENU 1---*/   //CONDIÇOES DE INTERTRAVAMENTO PARA ENTRAR NA TERCEIRA OPÇÃO DO MENU1 
....................   if (flag1 == 1 && menu1.flagmenu==4){ 
0546:  BTFSS  1C.3
0548:  BRA    0562
054A:  MOVLB  4
054C:  MOVF   xEB,W
054E:  SUBLW  04
0550:  BTFSC  FD8.2
0552:  BRA    0558
0554:  MOVLB  0
0556:  BRA    0562
....................       menu5.flagmenu = 1; 
0558:  MOVLW  01
055A:  MOVWF  xF7
....................       menu5.flagtrava =1; 
055C:  MOVWF  xF6
....................       flag1 = 0; 
055E:  BCF    1C.3
0560:  MOVLB  0
....................   } 
....................   /*---CONF MENU2---*/ 
....................   if (flag1 == 1 && menu2.flagtrava ==1 ){ //CONDIÇOES PARA TECLA CONFIRMA DENTRO DO SUBMENU2 
0562:  BTFSS  1C.3
0564:  BRA    05A0
0566:  MOVLB  4
0568:  DECFSZ xED,W
056A:  BRA    056E
056C:  BRA    0572
056E:  MOVLB  0
0570:  BRA    05A0
....................       menu2.flagmenu++; 
0572:  INCF   xEE,F
....................       if(menu2.flagmenu >2){              //O MENU IRA INCREMENTAR ATÉ 3 AO PRESSIONAR A TECLA CONFIRMA   
0574:  MOVF   xEE,W
0576:  SUBLW  02
0578:  BC    059C
....................          menu2.flagtrava =0;              //APÓS IRA ZERAR AS FLAGS DE INTERTRAVAMENTO E VOLTAR AO MENU ANTERIOR   
057A:  CLRF   xED
....................          menu2.flagmenu = 0;  
057C:  CLRF   xEE
....................          escreve_ds(hr, min, s_dia, dia, mes, ano); 
057E:  MOVFF  4DA,543
0582:  MOVFF  4D9,544
0586:  MOVFF  4DB,545
058A:  MOVFF  4DC,546
058E:  MOVFF  4DD,547
0592:  MOVFF  4DE,548
0596:  MOVLB  0
0598:  RCALL  034C
059A:  MOVLB  4
....................       } 
....................       flag1 = 0; 
059C:  BCF    1C.3
059E:  MOVLB  0
....................   } 
....................   /*---CONF MENU3---*/ 
....................   if(flag1 ==1 && menu3.flagtrava ==1){   //CONDIÇOES PARA TECLA CONFIRMA DENTRO DO SUBMENU2 
05A0:  BTFSS  1C.3
05A2:  BRA    05DE
05A4:  MOVLB  4
05A6:  DECFSZ xF0,W
05A8:  BRA    05AC
05AA:  BRA    05B0
05AC:  MOVLB  0
05AE:  BRA    05DE
....................       menu3.flagmenu++;                      
05B0:  INCF   xF1,F
....................       if(menu3.flagmenu>4){               //O MENU IRA INCREMENTAR ATÉ 3 AO PRESSIONAR A TECLA CONFIRMA 
05B2:  MOVF   xF1,W
05B4:  SUBLW  04
05B6:  BC    05DA
....................          menu3.flagtrava = 0;             //APÓS IRA ZERAR AS FLAGS DE INTERTRAVAMENTO E VOLTAR AO MENU ANTERIOR 
05B8:  CLRF   xF0
....................          menu3.flagmenu = 0; 
05BA:  CLRF   xF1
....................          escreve_ds(hr, min, s_dia, dia, mes, ano); 
05BC:  MOVFF  4DA,543
05C0:  MOVFF  4D9,544
05C4:  MOVFF  4DB,545
05C8:  MOVFF  4DC,546
05CC:  MOVFF  4DD,547
05D0:  MOVFF  4DE,548
05D4:  MOVLB  0
05D6:  RCALL  034C
05D8:  MOVLB  4
....................       } 
....................       flag1 = 0; 
05DA:  BCF    1C.3
05DC:  MOVLB  0
....................   } 
....................   /*---CONF MENU4---*/ 
....................   if(flag1 ==1 && menu4.flagtrava ==1 && menu4.flagmenu > 0){   //CONDIÇOES PARA TECLA CONFIRMA DENTRO DO SUBMENU2 
05DE:  BTFSS  1C.3
05E0:  BRA    0626
05E2:  MOVLB  4
05E4:  DECFSZ xF3,W
05E6:  BRA    05EA
05E8:  BRA    05EE
05EA:  MOVLB  0
05EC:  BRA    0626
05EE:  MOVF   xF4,F
05F0:  BTFSS  FD8.2
05F2:  BRA    05F8
05F4:  MOVLB  0
05F6:  BRA    0626
....................       if(menu4.flagmenu == 1){ 
05F8:  DECFSZ xF4,W
05FA:  BRA    0602
....................          flagi = 1; 
05FC:  BSF    xD5.1
....................          flags = 0; 
05FE:  BCF    xD5.2
....................          flagr = 0; 
0600:  BCF    xD5.3
....................       } 
....................       if(menu4.flagmenu == 2){ 
0602:  MOVF   xF4,W
0604:  SUBLW  02
0606:  BNZ   060E
....................          flagi = 0; 
0608:  BCF    xD5.1
....................          flags = 1; 
060A:  BSF    xD5.2
....................          flagr = 0; 
060C:  BCF    xD5.3
....................       } 
....................       if(menu4.flagmenu == 3){ 
060E:  MOVF   xF4,W
0610:  SUBLW  03
0612:  BNZ   061A
....................          flagi = 0; 
0614:  BCF    xD5.1
....................          flags = 0; 
0616:  BCF    xD5.2
....................          flagr = 1; 
0618:  BSF    xD5.3
....................       } 
....................       if(menu4.flagmenu>0){               //O MENU IRA INCREMENTAR ATÉ 3 AO PRESSIONAR A TECLA CONFIRMA 
061A:  MOVF   xF4,F
061C:  BZ    0622
....................          menu4.flagtrava = 0;             //APÓS IRA ZERAR AS FLAGS DE INTERTRAVAMENTO E VOLTAR AO MENU ANTERIOR 
061E:  CLRF   xF3
....................          menu4.flagmenu = 0; 
0620:  CLRF   xF4
....................       } 
....................       flag1 = 0; 
0622:  BCF    1C.3
0624:  MOVLB  0
....................   } 
....................   /*---TECLA VOLTA---*/ 
....................   if(!input(bot4)){                       //BOTAO PRESSIONADO: FLAG DE DEBOUCING CARREGADA COM O VALOR 25 
0626:  BSF    F95.0
0628:  BTFSC  F83.0
062A:  BRA    0652
....................       debouncing = 10;                    //ENQUANTO CONTADOR NAO É ZERADO FICA PRESO NO LAÇO DECREMENTANDO(TEMPO DE ESTABILIZAR BOTÃO) 
062C:  MOVLB  4
062E:  CLRF   xE0
0630:  MOVLW  0A
0632:  MOVWF  xDF
....................       while(debouncing > 0)debouncing--;  //SE O BOTAO CONTINUAR PRESSIONADO FICA PRESO NO LOOP SEM FAZER NADA ATÉ QUE SEJA SOLTO O BOTÃO 
0634:  MOVF   xDF,F
0636:  BNZ   063C
0638:  MOVF   xE0,F
063A:  BZ    0646
063C:  MOVF   xDF,W
063E:  BTFSC  FD8.2
0640:  DECF   xE0,F
0642:  DECF   xDF,F
0644:  BRA    0634
....................       while(!input(bot4))                 //FLAG QUE SINALIZA QUE UM BITÃO FOI PRESSIONADO 
....................       flag2 = 1; 
0646:  BSF    F95.0
0648:  BTFSC  F83.0
064A:  BRA    0650
064C:  BSF    1C.4
064E:  BRA    0646
0650:  MOVLB  0
....................   } 
....................   /*---VOLTA MENU 1---*/ 
....................   if(flag2==1 && menu1.flagmenu>0 && menu2.flagmenu==0 && menu3.flagmenu==0 && menu4.flagmenu==0){ //CONDIÇOES PARA TECLA VOLTA PARA IR PARA TELA DE DESCANSO 
0652:  BTFSS  1C.4
0654:  BRA    0688
0656:  MOVLB  4
0658:  MOVF   xEB,F
065A:  BTFSS  FD8.2
065C:  BRA    0662
065E:  MOVLB  0
0660:  BRA    0688
0662:  MOVF   xEE,F
0664:  BTFSC  FD8.2
0666:  BRA    066C
0668:  MOVLB  0
066A:  BRA    0688
066C:  MOVF   xF1,F
066E:  BTFSC  FD8.2
0670:  BRA    0676
0672:  MOVLB  0
0674:  BRA    0688
0676:  MOVF   xF4,F
0678:  BTFSC  FD8.2
067A:  BRA    0680
067C:  MOVLB  0
067E:  BRA    0688
....................       menu1.flagmenu=0; 
0680:  CLRF   xEB
....................       menu1.flagtrava=0; 
0682:  CLRF   xEA
....................       flag2=0; 
0684:  BCF    1C.4
0686:  MOVLB  0
....................   } 
....................   /*---VOLTA MENU 2---*/ 
....................   if(flag2==1 && menu1.flagmenu>0 && menu2.flagmenu>0){  //CONDIÇOES PARA TECLA VOLTA PARA IR PARA INCREMENTAR A FLAG ATÉ VOLTAR AO MENU1 
0688:  BTFSS  1C.4
068A:  BRA    06AE
068C:  MOVLB  4
068E:  MOVF   xEB,F
0690:  BTFSS  FD8.2
0692:  BRA    0698
0694:  MOVLB  0
0696:  BRA    06AE
0698:  MOVF   xEE,F
069A:  BTFSS  FD8.2
069C:  BRA    06A2
069E:  MOVLB  0
06A0:  BRA    06AE
....................       menu2.flagmenu--; 
06A2:  DECF   xEE,F
....................       if(menu2.flagmenu == 0)menu2.flagtrava = 0; 
06A4:  MOVF   xEE,F
06A6:  BTFSC  FD8.2
06A8:  CLRF   xED
....................       flag2 = 0; 
06AA:  BCF    1C.4
06AC:  MOVLB  0
....................   } 
....................   /*---VOLTA MENU 3---*/ 
....................   if(flag2==1 && menu1.flagmenu>0 && menu3.flagmenu>0){  //CONDIÇOES PARA TECLA VOLTA PARA IR PARA INCREMENTAR A FLAG ATÉ VOLTAR AO MENU1 
06AE:  BTFSS  1C.4
06B0:  BRA    06D4
06B2:  MOVLB  4
06B4:  MOVF   xEB,F
06B6:  BTFSS  FD8.2
06B8:  BRA    06BE
06BA:  MOVLB  0
06BC:  BRA    06D4
06BE:  MOVF   xF1,F
06C0:  BTFSS  FD8.2
06C2:  BRA    06C8
06C4:  MOVLB  0
06C6:  BRA    06D4
....................       menu3.flagmenu--; 
06C8:  DECF   xF1,F
....................       if(menu3.flagmenu==0)menu3.flagtrava = 0; 
06CA:  MOVF   xF1,F
06CC:  BTFSC  FD8.2
06CE:  CLRF   xF0
....................       flag2 = 0; 
06D0:  BCF    1C.4
06D2:  MOVLB  0
....................   } 
....................   /*---VOLTA MENU 4---*/ 
....................   if(flag2==1 && menu4.flagmenu>0 && menu4.flagtrava == 1){  //CONDIÇOES PARA TECLA VOLTA PARA IR PARA INCREMENTAR A FLAG ATÉ VOLTAR AO MENU1 
06D4:  BTFSS  1C.4
06D6:  BRA    06FA
06D8:  MOVLB  4
06DA:  MOVF   xF4,F
06DC:  BTFSS  FD8.2
06DE:  BRA    06E4
06E0:  MOVLB  0
06E2:  BRA    06FA
06E4:  DECFSZ xF3,W
06E6:  BRA    06EA
06E8:  BRA    06EE
06EA:  MOVLB  0
06EC:  BRA    06FA
....................       menu4.flagtrava--; 
06EE:  DECF   xF3,F
....................       if(menu4.flagtrava==0)menu4.flagmenu = 0; 
06F0:  MOVF   xF3,F
06F2:  BTFSC  FD8.2
06F4:  CLRF   xF4
....................       flag2 = 0; 
06F6:  BCF    1C.4
06F8:  MOVLB  0
....................   } 
....................   /*---TECLA CIMA--*/ 
....................   if(!input(bot2)){ 
06FA:  BSF    F95.1
06FC:  BTFSC  F83.1
06FE:  BRA    0726
....................       debouncing = 10;                    //BOTAO PRESSIONADO: FLAG DE DEBOUCING CARREGADA COM O VALOR 25 
0700:  MOVLB  4
0702:  CLRF   xE0
0704:  MOVLW  0A
0706:  MOVWF  xDF
....................       while(debouncing > 0)debouncing--;  //ENQUANTO CONTADOR NAO É ZERADO FICA PRESO NO LAÇO DECREMENTANDO(TEMPO DE ESTABILIZAR BOTÃO) 
0708:  MOVF   xDF,F
070A:  BNZ   0710
070C:  MOVF   xE0,F
070E:  BZ    071A
0710:  MOVF   xDF,W
0712:  BTFSC  FD8.2
0714:  DECF   xE0,F
0716:  DECF   xDF,F
0718:  BRA    0708
....................       while(!input(bot2))                 //SE O BOTAO CONTINUAR PRESSIONADO FICA PRESO NO LOOP SEM FAZER NADA ATÉ QUE SEJA SOLTO O BOTÃO 
....................       flag4 = 1;                          //FLAG QUE SINALIZA QUE UM BITÃO FOI PRESSIONADO 
071A:  BSF    F95.1
071C:  BTFSC  F83.1
071E:  BRA    0724
0720:  BSF    1C.6
0722:  BRA    071A
0724:  MOVLB  0
....................   } 
....................   /*---NAVEGAÇÃO NO MENU 1---*/ 
....................   if(flag4== 1 && menu1.flagmenu > 0 && menu1.flagtrava ==1 && menu2.flagtrava ==0 && menu3.flagtrava ==0 && menu4.flagtrava ==0){ 
0726:  BTFSS  1C.6
0728:  BRA    076C
072A:  MOVLB  4
072C:  MOVF   xEB,F
072E:  BTFSS  FD8.2
0730:  BRA    0736
0732:  MOVLB  0
0734:  BRA    076C
0736:  DECFSZ xEA,W
0738:  BRA    073C
073A:  BRA    0740
073C:  MOVLB  0
073E:  BRA    076C
0740:  MOVF   xED,F
0742:  BTFSC  FD8.2
0744:  BRA    074A
0746:  MOVLB  0
0748:  BRA    076C
074A:  MOVF   xF0,F
074C:  BTFSC  FD8.2
074E:  BRA    0754
0750:  MOVLB  0
0752:  BRA    076C
0754:  MOVF   xF3,F
0756:  BTFSC  FD8.2
0758:  BRA    075E
075A:  MOVLB  0
075C:  BRA    076C
....................       if(menu1.flagmenu == 1)menu1.flagmenu = 5;         //PARA NAVEGAR NO MENU(P/CIMA P/BAIXO)GARANTIR QUE NAO TENHA NENHUMA FLAG DE SUBMENU SETADA 
075E:  DECFSZ xEB,W
0760:  BRA    0766
0762:  MOVLW  05
0764:  MOVWF  xEB
....................       menu1.flagmenu--; 
0766:  DECF   xEB,F
....................       flag4 = 0; 
0768:  BCF    1C.6
076A:  MOVLB  0
....................   } 
....................   /*---INCREMENTO DA VARIAVEL MES DO MENU DATA---*/ 
....................   if(flag4==1 && menu3.flagmenu == 1){                   //BLOCO COM A LOGICA DOS MESES COM MAIS E MENOS DIAS 
076C:  BTFSS  1C.6
076E:  BRA    07BA
0770:  MOVLB  4
0772:  DECFSZ xF1,W
0774:  BRA    0778
0776:  BRA    077C
0778:  MOVLB  0
077A:  BRA    07BA
....................       mes++;                                             //DECREMENTA DIRETAMENTE A VARIAVEL 
077C:  INCF   xDD,F
....................       if(mes == 4 || mes == 6 || mes == 9 || mes == 12){  
077E:  MOVF   xDD,W
0780:  SUBLW  04
0782:  BZ    0796
0784:  MOVF   xDD,W
0786:  SUBLW  06
0788:  BZ    0796
078A:  MOVF   xDD,W
078C:  SUBLW  09
078E:  BZ    0796
0790:  MOVF   xDD,W
0792:  SUBLW  0C
0794:  BNZ   079C
....................          flag30 = 1; 
0796:  BSF    xD5.0
....................          flag28 = 0; 
0798:  BCF    1C.7
....................       } 
....................       else if(mes == 2){ 
079A:  BRA    07AC
079C:  MOVF   xDD,W
079E:  SUBLW  02
07A0:  BNZ   07A8
....................          flag28=1; 
07A2:  BSF    1C.7
....................          flag30=0; 
07A4:  BCF    xD5.0
....................       } 
....................       else{ 
07A6:  BRA    07AC
....................          flag28=0; 
07A8:  BCF    1C.7
....................          flag30=0; 
07AA:  BCF    xD5.0
....................       } 
....................       if(mes>12)mes=1; 
07AC:  MOVF   xDD,W
07AE:  SUBLW  0C
07B0:  BC    07B6
07B2:  MOVLW  01
07B4:  MOVWF  xDD
....................       flag4=0; 
07B6:  BCF    1C.6
07B8:  MOVLB  0
....................   } 
....................   /*---INCREMENTO DA VARIAVEL DIA DO MENU DATA---*/ 
....................   if(flag4==1 && menu3.flagmenu == 2){                   //BLOCO COM A LOGICA DAS RESTRIÇOES DE DIAS PARA MESES COM 30, 31 E 28 DIAS 
07BA:  BTFSS  1C.6
07BC:  BRA    07FC
07BE:  MOVLB  4
07C0:  MOVF   xF1,W
07C2:  SUBLW  02
07C4:  BTFSC  FD8.2
07C6:  BRA    07CC
07C8:  MOVLB  0
07CA:  BRA    07FC
....................       dia++;                                             //DECREMENTA DIRETAMENTE A VARIAVEL 
07CC:  INCF   xDC,F
....................       if(flag30==1){ 
07CE:  BTFSS  xD5.0
07D0:  BRA    07DE
....................          if(dia>30)dia=1; 
07D2:  MOVF   xDC,W
07D4:  SUBLW  1E
07D6:  BC    07DC
07D8:  MOVLW  01
07DA:  MOVWF  xDC
....................       } 
....................       else if(flag28==1){ 
07DC:  BRA    07F8
07DE:  BTFSS  1C.7
07E0:  BRA    07EE
....................          if(dia>28)dia=1; 
07E2:  MOVF   xDC,W
07E4:  SUBLW  1C
07E6:  BC    07EC
07E8:  MOVLW  01
07EA:  MOVWF  xDC
....................       } 
....................       else if(dia>31)dia=1; 
07EC:  BRA    07F8
07EE:  MOVF   xDC,W
07F0:  SUBLW  1F
07F2:  BC    07F8
07F4:  MOVLW  01
07F6:  MOVWF  xDC
....................       flag4=0; 
07F8:  BCF    1C.6
07FA:  MOVLB  0
....................   } 
....................   /*---INCREMENTO DA VARIAVEL ANO DO MENU DATA---*/ 
....................   if(flag4==1 && menu3.flagmenu==3){                     //BLOCO COM A LOGICA DO INCREMENTO DO ANO 
07FC:  BTFSS  1C.6
07FE:  BRA    081E
0800:  MOVLB  4
0802:  MOVF   xF1,W
0804:  SUBLW  03
0806:  BTFSC  FD8.2
0808:  BRA    080E
080A:  MOVLB  0
080C:  BRA    081E
....................       ano++;                                             //DECREMENTA DIRETAMENTE A VARIAVEL 
080E:  INCF   xDE,F
....................       if(ano>60)ano = 10; 
0810:  MOVF   xDE,W
0812:  SUBLW  3C
0814:  BC    081A
0816:  MOVLW  0A
0818:  MOVWF  xDE
....................       flag4=0; 
081A:  BCF    1C.6
081C:  MOVLB  0
....................   } 
....................   /*---INCREMENTO DIA DA SEMANA---*/ 
....................   if(flag4==1 && menu3.flagmenu==4){ 
081E:  BTFSS  1C.6
0820:  BRA    0840
0822:  MOVLB  4
0824:  MOVF   xF1,W
0826:  SUBLW  04
0828:  BTFSC  FD8.2
082A:  BRA    0830
082C:  MOVLB  0
082E:  BRA    0840
....................       s_dia++; 
0830:  INCF   xDB,F
....................       if(s_dia>7)s_dia = 1; 
0832:  MOVF   xDB,W
0834:  SUBLW  07
0836:  BC    083C
0838:  MOVLW  01
083A:  MOVWF  xDB
....................       flag4 = 0; 
083C:  BCF    1C.6
083E:  MOVLB  0
....................   } 
....................   /*---INCREMENTO DA VARIAVEL HORA DO MENU HORA---*/ 
....................   if(flag4==1 && menu2.flagmenu==1){                     //BLOCO COM A LOGICA DO INCREMENTO DAS HORAS 00 ATÉ 23 
0840:  BTFSS  1C.6
0842:  BRA    085E
0844:  MOVLB  4
0846:  DECFSZ xEE,W
0848:  BRA    084C
084A:  BRA    0850
084C:  MOVLB  0
084E:  BRA    085E
....................       hr++;                                            //DECREMENTA DIRETAMENTE A VARIAVEL 
0850:  INCF   xDA,F
....................       if(hr>23)hr=0; 
0852:  MOVF   xDA,W
0854:  SUBLW  17
0856:  BTFSS  FD8.0
0858:  CLRF   xDA
....................       flag4=0; 
085A:  BCF    1C.6
085C:  MOVLB  0
....................   } 
....................   /*---INCREMENTO DA VARIAVEL MINUTOS DO MENU HORA---*/  
....................   if(flag4==1 && menu2.flagmenu==2){ 
085E:  BTFSS  1C.6
0860:  BRA    087E
0862:  MOVLB  4
0864:  MOVF   xEE,W
0866:  SUBLW  02
0868:  BTFSC  FD8.2
086A:  BRA    0870
086C:  MOVLB  0
086E:  BRA    087E
....................      min++; 
0870:  INCF   xD9,F
....................      if(min>59)min=0; 
0872:  MOVF   xD9,W
0874:  SUBLW  3B
0876:  BTFSS  FD8.0
0878:  CLRF   xD9
....................                  //DECREMENTA DIRETAMENTE A VARIAVEL 
....................      flag4=0; 
087A:  BCF    1C.6
087C:  MOVLB  0
....................    }  
....................   /*---INCREMENTO DO SUBMENU3 TIMER ---*/ 
....................   if(flag4== 1 && menu4.flagtrava ==1 && menu4.flagmenu >= 0){ 
087E:  BTFSS  1C.6
0880:  BRA    089C
0882:  MOVLB  4
0884:  DECFSZ xF3,W
0886:  BRA    088A
0888:  BRA    088E
088A:  MOVLB  0
088C:  BRA    089C
....................      menu4.flagmenu--; 
088E:  DECF   xF4,F
....................      if(menu4.flagmenu == 0)menu4.flagmenu = 3;         //PARA NAVEGAR NO MENU(P/CIMA P/BAIXO)GARANTIR QUE NAO TENHA NENHUMA FLAG DE SUBMENU SETADA 
0890:  MOVF   xF4,F
0892:  BNZ   0898
0894:  MOVLW  03
0896:  MOVWF  xF4
....................      flag4 = 0; 
0898:  BCF    1C.6
089A:  MOVLB  0
....................   } 
....................   /*---TECLA BAIXO---*/ 
....................   if(!input(bot3)){  
089C:  BSF    F95.2
089E:  BTFSC  F83.2
08A0:  BRA    08C8
....................       debouncing = 10;                    //BOTAO PRESSIONADO: FLAG DE DEBOUCING CARREGADA COM O VALOR 25 
08A2:  MOVLB  4
08A4:  CLRF   xE0
08A6:  MOVLW  0A
08A8:  MOVWF  xDF
....................       while(debouncing > 0)debouncing--;  //ENQUANTO CONTADOR NAO É ZERADO FICA PRESO NO LAÇO DECREMENTANDO(TEMPO DE ESTABILIZAR BOTÃO) 
08AA:  MOVF   xDF,F
08AC:  BNZ   08B2
08AE:  MOVF   xE0,F
08B0:  BZ    08BC
08B2:  MOVF   xDF,W
08B4:  BTFSC  FD8.2
08B6:  DECF   xE0,F
08B8:  DECF   xDF,F
08BA:  BRA    08AA
....................       while(!input(bot3))                 //SE O BOTAO CONTINUAR PRESSIONADO FICA PRESO NO LOOP SEM FAZER NADA ATÉ QUE SEJA SOLTO O BOTÃO 
....................       flag3 = 1;                          //FLAG QUE SINALIZA QUE UM BITÃO FOI PRESSIONADO 
08BC:  BSF    F95.2
08BE:  BTFSC  F83.2
08C0:  BRA    08C6
08C2:  BSF    1C.5
08C4:  BRA    08BC
08C6:  MOVLB  0
....................   } 
....................   /*---NAVEGAÇÃO MENU 1---*/ 
....................   if(flag3 == 1 && menu1.flagmenu > 0 && menu1.flagtrava ==1 && menu2.flagtrava == 0 && menu3.flagtrava ==0 && menu4.flagtrava ==0){  
08C8:  BTFSS  1C.5
08CA:  BRA    0910
08CC:  MOVLB  4
08CE:  MOVF   xEB,F
08D0:  BTFSS  FD8.2
08D2:  BRA    08D8
08D4:  MOVLB  0
08D6:  BRA    0910
08D8:  DECFSZ xEA,W
08DA:  BRA    08DE
08DC:  BRA    08E2
08DE:  MOVLB  0
08E0:  BRA    0910
08E2:  MOVF   xED,F
08E4:  BTFSC  FD8.2
08E6:  BRA    08EC
08E8:  MOVLB  0
08EA:  BRA    0910
08EC:  MOVF   xF0,F
08EE:  BTFSC  FD8.2
08F0:  BRA    08F6
08F2:  MOVLB  0
08F4:  BRA    0910
08F6:  MOVF   xF3,F
08F8:  BTFSC  FD8.2
08FA:  BRA    0900
08FC:  MOVLB  0
08FE:  BRA    0910
....................       menu1.flagmenu++;                   //PARA NAVEGAR NO MENU(P/CIMA P/BAIXO)GARANTIR QUE NAO TENHA NENHUMA FLAG DE SUBMENU SETADA 
0900:  INCF   xEB,F
....................       if(menu1.flagmenu > 4)menu1.flagmenu = 1; 
0902:  MOVF   xEB,W
0904:  SUBLW  04
0906:  BC    090C
0908:  MOVLW  01
090A:  MOVWF  xEB
....................       flag3 = 0; 
090C:  BCF    1C.5
090E:  MOVLB  0
....................   } 
....................   /*DECREMENTA A VARIAVEL MES DO MENU DATA*/ 
....................   if(flag3==1 && menu3.flagmenu == 1){                   //BLOCO COM A LOGICA DOS MESES COM MAIS E MENOS DIAS 
0910:  BTFSS  1C.5
0912:  BRA    0976
0914:  MOVLB  4
0916:  DECFSZ xF1,W
0918:  BRA    091C
091A:  BRA    0920
091C:  MOVLB  0
091E:  BRA    0976
....................     mes--;                                               //DECREMENTA DIRETAMENTE A VARIAVEL       
0920:  DECF   xDD,F
....................       if(mes == 4 || mes == 6 || mes == 9 || mes == 12){ 
0922:  MOVF   xDD,W
0924:  SUBLW  04
0926:  BZ    093A
0928:  MOVF   xDD,W
092A:  SUBLW  06
092C:  BZ    093A
092E:  MOVF   xDD,W
0930:  SUBLW  09
0932:  BZ    093A
0934:  MOVF   xDD,W
0936:  SUBLW  0C
0938:  BNZ   0940
....................          flag30=1; 
093A:  BSF    xD5.0
....................          flag28=0; 
093C:  BCF    1C.7
....................       } 
....................       else if(mes == 2){ 
093E:  BRA    0950
0940:  MOVF   xDD,W
0942:  SUBLW  02
0944:  BNZ   094C
....................          flag28=1; 
0946:  BSF    1C.7
....................          flag30=0; 
0948:  BCF    xD5.0
....................       } 
....................       else{ 
094A:  BRA    0950
....................          flag28=0; 
094C:  BCF    1C.7
....................          flag30=0; 
094E:  BCF    xD5.0
....................       } 
....................       if(mes < 1)mes=12; 
0950:  MOVF   xDD,F
0952:  BNZ   0958
0954:  MOVLW  0C
0956:  MOVWF  xDD
....................       flag3 = 0; 
0958:  BCF    1C.5
....................       escreve_ds(hr, min, s_dia, dia, mes, ano); 
095A:  MOVFF  4DA,543
095E:  MOVFF  4D9,544
0962:  MOVFF  4DB,545
0966:  MOVFF  4DC,546
096A:  MOVFF  4DD,547
096E:  MOVFF  4DE,548
0972:  MOVLB  0
0974:  RCALL  034C
....................   } 
....................   /*DECREMENTA A VARIAVEL DIA DO MENU DATA*/ 
....................   if(flag3==1 && menu3.flagmenu == 2){                   //BLOCO COM A LOGICA DAS RESTRIÇOES DE DIAS PARA MESES COM 30, 31 E 28 DIAS 
0976:  BTFSS  1C.5
0978:  BRA    09CC
097A:  MOVLB  4
097C:  MOVF   xF1,W
097E:  SUBLW  02
0980:  BTFSC  FD8.2
0982:  BRA    0988
0984:  MOVLB  0
0986:  BRA    09CC
....................       dia--;                                             //DECREMENTA DIRETAMENTE A VARIAVEL  
0988:  DECF   xDC,F
....................       if(flag30 == 1){ 
098A:  BTFSS  xD5.0
098C:  BRA    0998
....................          if(dia==0)dia=30; 
098E:  MOVF   xDC,F
0990:  BNZ   0996
0992:  MOVLW  1E
0994:  MOVWF  xDC
....................       } 
....................       else if(flag28 == 1){ 
0996:  BRA    09AE
0998:  BTFSS  1C.7
099A:  BRA    09A6
....................          if(dia==0)dia=28; 
099C:  MOVF   xDC,F
099E:  BNZ   09A4
09A0:  MOVLW  1C
09A2:  MOVWF  xDC
....................       } 
....................       else if(dia==0)dia=31; 
09A4:  BRA    09AE
09A6:  MOVF   xDC,F
09A8:  BNZ   09AE
09AA:  MOVLW  1F
09AC:  MOVWF  xDC
....................       //if(mes<1)mes=12; 
....................       flag3 = 0; 
09AE:  BCF    1C.5
....................       escreve_ds(hr, min, s_dia, dia, mes, ano); 
09B0:  MOVFF  4DA,543
09B4:  MOVFF  4D9,544
09B8:  MOVFF  4DB,545
09BC:  MOVFF  4DC,546
09C0:  MOVFF  4DD,547
09C4:  MOVFF  4DE,548
09C8:  MOVLB  0
09CA:  RCALL  034C
....................   } 
....................   /*---DECREMENTO DA VARIAVEL ANO DO MENU DATA---*/       
....................   if(flag3==1 && menu3.flagmenu==3){                     //BLOCO COM A LOGICA DO DECREMENTO DO ANO 
09CC:  BTFSS  1C.5
09CE:  BRA    09EE
09D0:  MOVLB  4
09D2:  MOVF   xF1,W
09D4:  SUBLW  03
09D6:  BTFSC  FD8.2
09D8:  BRA    09DE
09DA:  MOVLB  0
09DC:  BRA    09EE
....................       ano--;                                             //DECREMENTA DIRETAMENTE A VARIAVEL 
09DE:  DECF   xDE,F
....................       if(ano==10)ano = 60; 
09E0:  MOVF   xDE,W
09E2:  SUBLW  0A
09E4:  BNZ   09EA
09E6:  MOVLW  3C
09E8:  MOVWF  xDE
....................       flag3 = 0; 
09EA:  BCF    1C.5
09EC:  MOVLB  0
....................   } 
....................   if(flag3==1 && menu3.flagmenu==4){ 
09EE:  BTFSS  1C.5
09F0:  BRA    0A28
09F2:  MOVLB  4
09F4:  MOVF   xF1,W
09F6:  SUBLW  04
09F8:  BTFSC  FD8.2
09FA:  BRA    0A00
09FC:  MOVLB  0
09FE:  BRA    0A28
....................       s_dia--; 
0A00:  DECF   xDB,F
....................       if(s_dia==0)s_dia = 7; 
0A02:  MOVF   xDB,F
0A04:  BNZ   0A0A
0A06:  MOVLW  07
0A08:  MOVWF  xDB
....................       flag3 = 0; 
0A0A:  BCF    1C.5
....................       escreve_ds(hr, min, s_dia, dia, mes, ano); 
0A0C:  MOVFF  4DA,543
0A10:  MOVFF  4D9,544
0A14:  MOVFF  4DB,545
0A18:  MOVFF  4DC,546
0A1C:  MOVFF  4DD,547
0A20:  MOVFF  4DE,548
0A24:  MOVLB  0
0A26:  RCALL  034C
....................   } 
....................   /*---DECREMENTO DA VARIAVEL HORA DO MENU HORA---*/ 
....................   if(flag3==1 && menu2.flagmenu ==1){                    //BLOCO COM A LOGICA DO DECREMENTO DAS HORAS 00 ATÉ 23 
0A28:  BTFSS  1C.5
0A2A:  BRA    0A46
0A2C:  MOVLB  4
0A2E:  DECFSZ xEE,W
0A30:  BRA    0A34
0A32:  BRA    0A38
0A34:  MOVLB  0
0A36:  BRA    0A46
....................       hr--;                                            //DECREMENTA DIRETAMENTE A VARIAVEL  
0A38:  DECF   xDA,F
....................       if(hr<=0)hr=23; 
0A3A:  MOVF   xDA,F
0A3C:  BNZ   0A42
0A3E:  MOVLW  17
0A40:  MOVWF  xDA
....................       flag3=0; 
0A42:  BCF    1C.5
0A44:  MOVLB  0
....................   } 
....................   /*---DECREMENTO DA VARIAVEL MINUTOS DO MENU HORA---*/ 
....................   if(flag3==1 && menu2.flagmenu ==2){                  //BLOCO COM A LOGICA DO DECREMENTO DOS MINUTOS 00 ATÉ 59  
0A46:  BTFSS  1C.5
0A48:  BRA    0A66
0A4A:  MOVLB  4
0A4C:  MOVF   xEE,W
0A4E:  SUBLW  02
0A50:  BTFSC  FD8.2
0A52:  BRA    0A58
0A54:  MOVLB  0
0A56:  BRA    0A66
....................       if(min==0)min=59; 
0A58:  MOVF   xD9,F
0A5A:  BNZ   0A60
0A5C:  MOVLW  3B
0A5E:  MOVWF  xD9
....................       min--;                                             //DECREMENTA DIRETAMENTE A VARIAVEL 
0A60:  DECF   xD9,F
....................       flag3=0; 
0A62:  BCF    1C.5
0A64:  MOVLB  0
....................   } 
....................   /*---DECREMENTO DO SUBMENU3 TIMER ---*/ 
....................   if(flag3== 1 && menu4.flagtrava ==1 && menu4.flagmenu >= 0){ 
0A66:  BTFSS  1C.5
0A68:  BRA    0A84
0A6A:  MOVLB  4
0A6C:  DECFSZ xF3,W
0A6E:  BRA    0A72
0A70:  BRA    0A76
0A72:  MOVLB  0
0A74:  BRA    0A84
....................       menu4.flagmenu++; 
0A76:  INCF   xF4,F
....................       if(menu4.flagmenu > 3)menu4.flagmenu = 1;         //PARA NAVEGAR NO MENU(P/CIMA P/BAIXO)GARANTIR QUE NAO TENHA NENHUMA FLAG DE SUBMENU SETADA 
0A78:  MOVF   xF4,W
0A7A:  SUBLW  03
0A7C:  BC    0A82
0A7E:  MOVLW  01
0A80:  MOVWF  xF4
....................       flag3 = 0; 
0A82:  BCF    1C.5
0A84:  MOVLB  0
....................   } 
.................... } 
0A86:  GOTO   0AD4 (RETURN)
....................  
.................... void atualiza_menu(void){ 
....................    switch(menu1.flagmenu){ 
*
1D96:  MOVLB  4
1D98:  MOVF   xEB,W
1D9A:  ADDLW  FB
1D9C:  BTFSC  FD8.0
1D9E:  GOTO   262C
1DA2:  ADDLW  05
1DA4:  MOVLB  0
1DA6:  GOTO   2690
....................       case 0 : 
....................          init = 1; 
1DAA:  BSF    1C.1
....................          if(aux == 50){ 
1DAC:  MOVLB  4
1DAE:  MOVF   xE5,W
1DB0:  SUBLW  32
1DB2:  BNZ   1DBE
1DB4:  MOVF   xE6,F
1DB6:  BNZ   1DBE
....................             le_DS1307(); 
1DB8:  MOVLB  0
1DBA:  BRA    1A1E
1DBC:  MOVLB  4
....................          } 
....................       break; 
1DBE:  GOTO   262C
....................       case 1 : 
....................          if(menu2.flagtrava == 0){ 
1DC2:  MOVLB  4
1DC4:  MOVF   xED,F
1DC6:  BNZ   1E4C
....................          SSD1306_ClearDisplay();    // Clear the buffer. 
1DC8:  MOVLB  0
1DCA:  CALL   0F4A
....................          SSD1306_DrawText(2, 4, txt1, 2); 
1DCE:  MOVLW  02
1DD0:  MOVLB  5
1DD2:  MOVWF  x0C
1DD4:  MOVLW  04
1DD6:  MOVWF  x0D
1DD8:  MOVWF  x0F
1DDA:  MOVLW  48
1DDC:  MOVWF  x0E
1DDE:  MOVLW  02
1DE0:  MOVWF  x10
1DE2:  MOVLB  0
1DE4:  RCALL  1656
....................          SSD1306_DrawRect(0,2,128,18); 
1DE6:  MOVLB  5
1DE8:  CLRF   x0C
1DEA:  MOVLW  02
1DEC:  MOVWF  x0D
1DEE:  MOVLW  80
1DF0:  MOVWF  x0E
1DF2:  MOVLW  12
1DF4:  MOVWF  x0F
1DF6:  MOVLB  0
1DF8:  RCALL  1B7C
....................          SSD1306_DrawText(2, 25, txt2, 2); 
1DFA:  MOVLW  02
1DFC:  MOVLB  5
1DFE:  MOVWF  x0C
1E00:  MOVLW  19
1E02:  MOVWF  x0D
1E04:  MOVLW  04
1E06:  MOVWF  x0F
1E08:  MOVLW  50
1E0A:  MOVWF  x0E
1E0C:  MOVLW  02
1E0E:  MOVWF  x10
1E10:  MOVLB  0
1E12:  RCALL  1656
....................          //SSD1306_DrawRect(0,23,128,18); 
....................          SSD1306_DrawText(2, 46, txt3, 2); 
1E14:  MOVLW  02
1E16:  MOVLB  5
1E18:  MOVWF  x0C
1E1A:  MOVLW  2E
1E1C:  MOVWF  x0D
1E1E:  MOVLW  04
1E20:  MOVWF  x0F
1E22:  MOVLW  55
1E24:  MOVWF  x0E
1E26:  MOVLW  02
1E28:  MOVWF  x10
1E2A:  MOVLB  0
1E2C:  RCALL  1656
....................          //SSD1306_DrawRect(0,44,128,18); 
....................          SSD1306_Display(); 
1E2E:  CALL   0E18
1E32:  CLRF   16
1E34:  BTFSC  FF2.7
1E36:  BSF    16.7
1E38:  BCF    FF2.7
....................          delay_ms(2);  
1E3A:  MOVLW  02
1E3C:  MOVLB  5
1E3E:  MOVWF  x49
1E40:  MOVLB  0
1E42:  CALL   0324
1E46:  BTFSC  16.7
1E48:  BSF    FF2.7
1E4A:  MOVLB  4
....................          } 
....................          switch(menu2.flagmenu){    
1E4C:  MOVF   xEE,W
1E4E:  XORLW  01
1E50:  MOVLB  0
1E52:  BZ    1E5A
1E54:  XORLW  03
1E56:  BZ    1EB4
1E58:  BRA    1F0E
....................             case 1: 
....................                atualiza_disp(); 
1E5A:  RCALL  1BE2
....................                SSD1306_ClearDisplay();    // Clear the buffer. 
1E5C:  CALL   0F4A
....................                SSD1306_DrawText(32, 4, txt5, 2); 
1E60:  MOVLW  20
1E62:  MOVLB  5
1E64:  MOVWF  x0C
1E66:  MOVLW  04
1E68:  MOVWF  x0D
1E6A:  MOVWF  x0F
1E6C:  MOVLW  61
1E6E:  MOVWF  x0E
1E70:  MOVLW  02
1E72:  MOVWF  x10
1E74:  MOVLB  0
1E76:  CALL   1656
....................                SSD1306_DrawText(32, 25, horas, 2); 
1E7A:  MOVLW  20
1E7C:  MOVLB  5
1E7E:  MOVWF  x0C
1E80:  MOVLW  19
1E82:  MOVWF  x0D
1E84:  MOVLW  04
1E86:  MOVWF  x0F
1E88:  MOVLW  1F
1E8A:  MOVWF  x0E
1E8C:  MOVLW  02
1E8E:  MOVWF  x10
1E90:  MOVLB  0
1E92:  CALL   1656
....................                SSD1306_Display(); 
1E96:  CALL   0E18
1E9A:  CLRF   16
1E9C:  BTFSC  FF2.7
1E9E:  BSF    16.7
1EA0:  BCF    FF2.7
....................                delay_ms(2); 
1EA2:  MOVLW  02
1EA4:  MOVLB  5
1EA6:  MOVWF  x49
1EA8:  MOVLB  0
1EAA:  CALL   0324
1EAE:  BTFSC  16.7
1EB0:  BSF    FF2.7
....................             break; 
1EB2:  BRA    1F0E
....................             case 2: 
....................                atualiza_disp(); 
1EB4:  RCALL  1BE2
....................                SSD1306_ClearDisplay();    // Clear the buffer. 
1EB6:  CALL   0F4A
....................                SSD1306_DrawText(20, 4, txt6, 2); 
1EBA:  MOVLW  14
1EBC:  MOVLB  5
1EBE:  MOVWF  x0C
1EC0:  MOVLW  04
1EC2:  MOVWF  x0D
1EC4:  MOVWF  x0F
1EC6:  MOVLW  67
1EC8:  MOVWF  x0E
1ECA:  MOVLW  02
1ECC:  MOVWF  x10
1ECE:  MOVLB  0
1ED0:  CALL   1656
....................                SSD1306_DrawText(32, 25, horas, 2); 
1ED4:  MOVLW  20
1ED6:  MOVLB  5
1ED8:  MOVWF  x0C
1EDA:  MOVLW  19
1EDC:  MOVWF  x0D
1EDE:  MOVLW  04
1EE0:  MOVWF  x0F
1EE2:  MOVLW  1F
1EE4:  MOVWF  x0E
1EE6:  MOVLW  02
1EE8:  MOVWF  x10
1EEA:  MOVLB  0
1EEC:  CALL   1656
....................                SSD1306_Display(); 
1EF0:  CALL   0E18
1EF4:  CLRF   16
1EF6:  BTFSC  FF2.7
1EF8:  BSF    16.7
1EFA:  BCF    FF2.7
....................                delay_ms(2); 
1EFC:  MOVLW  02
1EFE:  MOVLB  5
1F00:  MOVWF  x49
1F02:  MOVLB  0
1F04:  CALL   0324
1F08:  BTFSC  16.7
1F0A:  BSF    FF2.7
....................             break; 
1F0C:  BRA    1F0E
....................           } 
....................        break; 
1F0E:  MOVLB  4
1F10:  BRA    262C
....................        case 2 : 
....................          if(menu3.flagtrava == 0){ 
1F12:  MOVLB  4
1F14:  MOVF   xF0,F
1F16:  BNZ   1FA2
....................          SSD1306_ClearDisplay();    // Clear the buffer. 
1F18:  MOVLB  0
1F1A:  CALL   0F4A
....................          SSD1306_DrawText(2, 4, txt1, 2); 
1F1E:  MOVLW  02
1F20:  MOVLB  5
1F22:  MOVWF  x0C
1F24:  MOVLW  04
1F26:  MOVWF  x0D
1F28:  MOVWF  x0F
1F2A:  MOVLW  48
1F2C:  MOVWF  x0E
1F2E:  MOVLW  02
1F30:  MOVWF  x10
1F32:  MOVLB  0
1F34:  CALL   1656
....................          //SSD1306_DrawRect(0,2,128,18); 
....................          SSD1306_DrawText(2, 25, txt2, 2); 
1F38:  MOVLW  02
1F3A:  MOVLB  5
1F3C:  MOVWF  x0C
1F3E:  MOVLW  19
1F40:  MOVWF  x0D
1F42:  MOVLW  04
1F44:  MOVWF  x0F
1F46:  MOVLW  50
1F48:  MOVWF  x0E
1F4A:  MOVLW  02
1F4C:  MOVWF  x10
1F4E:  MOVLB  0
1F50:  CALL   1656
....................          SSD1306_DrawRect(0,23,128,18); 
1F54:  MOVLB  5
1F56:  CLRF   x0C
1F58:  MOVLW  17
1F5A:  MOVWF  x0D
1F5C:  MOVLW  80
1F5E:  MOVWF  x0E
1F60:  MOVLW  12
1F62:  MOVWF  x0F
1F64:  MOVLB  0
1F66:  RCALL  1B7C
....................          SSD1306_DrawText(2, 46, txt3, 2); 
1F68:  MOVLW  02
1F6A:  MOVLB  5
1F6C:  MOVWF  x0C
1F6E:  MOVLW  2E
1F70:  MOVWF  x0D
1F72:  MOVLW  04
1F74:  MOVWF  x0F
1F76:  MOVLW  55
1F78:  MOVWF  x0E
1F7A:  MOVLW  02
1F7C:  MOVWF  x10
1F7E:  MOVLB  0
1F80:  CALL   1656
....................          //SSD1306_DrawRect(0,44,128,18); 
....................          SSD1306_Display(); 
1F84:  CALL   0E18
1F88:  CLRF   16
1F8A:  BTFSC  FF2.7
1F8C:  BSF    16.7
1F8E:  BCF    FF2.7
....................          delay_ms(2); 
1F90:  MOVLW  02
1F92:  MOVLB  5
1F94:  MOVWF  x49
1F96:  MOVLB  0
1F98:  CALL   0324
1F9C:  BTFSC  16.7
1F9E:  BSF    FF2.7
1FA0:  MOVLB  4
....................          } 
....................          switch(menu3.flagmenu){    
1FA2:  MOVLW  01
1FA4:  SUBWF  xF1,W
1FA6:  ADDLW  FC
1FA8:  BTFSC  FD8.0
1FAA:  BRA    2354
1FAC:  ADDLW  04
1FAE:  MOVLB  0
1FB0:  GOTO   2664
....................             case 1: 
....................                atualiza_disp(); 
1FB4:  RCALL  1BE2
....................                SSD1306_ClearDisplay();    // Clear the buffer. 
1FB6:  CALL   0F4A
....................                SSD1306_DrawText(45, 4, txt7, 2); 
1FBA:  MOVLW  2D
1FBC:  MOVLB  5
1FBE:  MOVWF  x0C
1FC0:  MOVLW  04
1FC2:  MOVWF  x0D
1FC4:  MOVWF  x0F
1FC6:  MOVLW  6F
1FC8:  MOVWF  x0E
1FCA:  MOVLW  02
1FCC:  MOVWF  x10
1FCE:  MOVLB  0
1FD0:  CALL   1656
....................                SSD1306_DrawText(5, 25, data, 2); 
1FD4:  MOVLW  05
1FD6:  MOVLB  5
1FD8:  MOVWF  x0C
1FDA:  MOVLW  19
1FDC:  MOVWF  x0D
1FDE:  MOVLW  04
1FE0:  MOVWF  x0F
1FE2:  MOVLW  25
1FE4:  MOVWF  x0E
1FE6:  MOVLW  02
1FE8:  MOVWF  x10
1FEA:  MOVLB  0
1FEC:  CALL   1656
....................                SSD1306_Display(); 
1FF0:  CALL   0E18
1FF4:  CLRF   16
1FF6:  BTFSC  FF2.7
1FF8:  BSF    16.7
1FFA:  BCF    FF2.7
....................                delay_ms(2); 
1FFC:  MOVLW  02
1FFE:  MOVLB  5
2000:  MOVWF  x49
2002:  MOVLB  0
2004:  CALL   0324
2008:  BTFSC  16.7
200A:  BSF    FF2.7
....................             break; 
200C:  MOVLB  4
200E:  BRA    2354
....................             case 2: 
....................                atualiza_disp(); 
2010:  RCALL  1BE2
....................                SSD1306_ClearDisplay();    // Clear the buffer. 
2012:  CALL   0F4A
....................                SSD1306_DrawText(45, 4, txt8, 2); 
2016:  MOVLW  2D
2018:  MOVLB  5
201A:  MOVWF  x0C
201C:  MOVLW  04
201E:  MOVWF  x0D
2020:  MOVWF  x0F
2022:  MOVLW  73
2024:  MOVWF  x0E
2026:  MOVLW  02
2028:  MOVWF  x10
202A:  MOVLB  0
202C:  CALL   1656
....................                SSD1306_DrawText(5, 25, data, 2); 
2030:  MOVLW  05
2032:  MOVLB  5
2034:  MOVWF  x0C
2036:  MOVLW  19
2038:  MOVWF  x0D
203A:  MOVLW  04
203C:  MOVWF  x0F
203E:  MOVLW  25
2040:  MOVWF  x0E
2042:  MOVLW  02
2044:  MOVWF  x10
2046:  MOVLB  0
2048:  CALL   1656
....................                SSD1306_Display(); 
204C:  CALL   0E18
2050:  CLRF   16
2052:  BTFSC  FF2.7
2054:  BSF    16.7
2056:  BCF    FF2.7
....................                delay_ms(2); 
2058:  MOVLW  02
205A:  MOVLB  5
205C:  MOVWF  x49
205E:  MOVLB  0
2060:  CALL   0324
2064:  BTFSC  16.7
2066:  BSF    FF2.7
....................             break; 
2068:  MOVLB  4
206A:  BRA    2354
....................             case 3: 
....................                atualiza_disp(); 
206C:  RCALL  1BE2
....................                SSD1306_ClearDisplay();    // Clear the buffer. 
206E:  CALL   0F4A
....................                SSD1306_DrawText(45, 4, txt9, 2); 
2072:  MOVLW  2D
2074:  MOVLB  5
2076:  MOVWF  x0C
2078:  MOVLW  04
207A:  MOVWF  x0D
207C:  MOVWF  x0F
207E:  MOVLW  77
2080:  MOVWF  x0E
2082:  MOVLW  02
2084:  MOVWF  x10
2086:  MOVLB  0
2088:  CALL   1656
....................                SSD1306_DrawText(5, 25, data, 2); 
208C:  MOVLW  05
208E:  MOVLB  5
2090:  MOVWF  x0C
2092:  MOVLW  19
2094:  MOVWF  x0D
2096:  MOVLW  04
2098:  MOVWF  x0F
209A:  MOVLW  25
209C:  MOVWF  x0E
209E:  MOVLW  02
20A0:  MOVWF  x10
20A2:  MOVLB  0
20A4:  CALL   1656
....................                SSD1306_Display(); 
20A8:  CALL   0E18
20AC:  CLRF   16
20AE:  BTFSC  FF2.7
20B0:  BSF    16.7
20B2:  BCF    FF2.7
....................                delay_ms(2); 
20B4:  MOVLW  02
20B6:  MOVLB  5
20B8:  MOVWF  x49
20BA:  MOVLB  0
20BC:  CALL   0324
20C0:  BTFSC  16.7
20C2:  BSF    FF2.7
....................             break; 
20C4:  MOVLB  4
20C6:  BRA    2354
....................             case 4: 
....................                switch(s_dia){ 
20C8:  MOVLW  01
20CA:  MOVLB  4
20CC:  SUBWF  xDB,W
20CE:  ADDLW  F9
20D0:  BTFSC  FD8.0
20D2:  BRA    2350
20D4:  ADDLW  07
20D6:  MOVLB  0
20D8:  GOTO   2632
....................                   case 1: 
....................                      SSD1306_ClearDisplay();    // Clear the buffer. 
20DC:  CALL   0F4A
....................                      SSD1306_DrawText(25, 4, txt13, 2); 
20E0:  MOVLW  19
20E2:  MOVLB  5
20E4:  MOVWF  x0C
20E6:  MOVLW  04
20E8:  MOVWF  x0D
20EA:  MOVWF  x0F
20EC:  MOVLW  9C
20EE:  MOVWF  x0E
20F0:  MOVLW  02
20F2:  MOVWF  x10
20F4:  MOVLB  0
20F6:  CALL   1656
....................                      SSD1306_DrawText(25, 25, dom, 2); 
20FA:  MOVLW  19
20FC:  MOVLB  5
20FE:  MOVWF  x0C
2100:  MOVWF  x0D
2102:  MOVLW  04
2104:  MOVWF  x0F
2106:  MOVLW  CD
2108:  MOVWF  x0E
210A:  MOVLW  02
210C:  MOVWF  x10
210E:  MOVLB  0
2110:  CALL   1656
....................                      SSD1306_Display(); 
2114:  CALL   0E18
2118:  CLRF   16
211A:  BTFSC  FF2.7
211C:  BSF    16.7
211E:  BCF    FF2.7
....................                      delay_ms(2); 
2120:  MOVLW  02
2122:  MOVLB  5
2124:  MOVWF  x49
2126:  MOVLB  0
2128:  CALL   0324
212C:  BTFSC  16.7
212E:  BSF    FF2.7
....................                   break; 
2130:  MOVLB  4
2132:  BRA    2350
....................                   case 2: 
....................                      SSD1306_ClearDisplay();    // Clear the buffer. 
2134:  CALL   0F4A
....................                      SSD1306_DrawText(25, 4, txt13, 2); 
2138:  MOVLW  19
213A:  MOVLB  5
213C:  MOVWF  x0C
213E:  MOVLW  04
2140:  MOVWF  x0D
2142:  MOVWF  x0F
2144:  MOVLW  9C
2146:  MOVWF  x0E
2148:  MOVLW  02
214A:  MOVWF  x10
214C:  MOVLB  0
214E:  CALL   1656
....................                      SSD1306_DrawText(25, 25, seg1, 2); 
2152:  MOVLW  19
2154:  MOVLB  5
2156:  MOVWF  x0C
2158:  MOVWF  x0D
215A:  MOVLW  04
215C:  MOVWF  x0F
215E:  MOVLW  A4
2160:  MOVWF  x0E
2162:  MOVLW  02
2164:  MOVWF  x10
2166:  MOVLB  0
2168:  CALL   1656
....................                      SSD1306_Display(); 
216C:  CALL   0E18
2170:  CLRF   16
2172:  BTFSC  FF2.7
2174:  BSF    16.7
2176:  BCF    FF2.7
....................                      delay_ms(2); 
2178:  MOVLW  02
217A:  MOVLB  5
217C:  MOVWF  x49
217E:  MOVLB  0
2180:  CALL   0324
2184:  BTFSC  16.7
2186:  BSF    FF2.7
....................                   break;  
2188:  MOVLB  4
218A:  BRA    2350
....................                   case 3: 
....................                      SSD1306_ClearDisplay();    // Clear the buffer. 
218C:  CALL   0F4A
....................                      SSD1306_DrawText(25, 4, txt13, 2); 
2190:  MOVLW  19
2192:  MOVLB  5
2194:  MOVWF  x0C
2196:  MOVLW  04
2198:  MOVWF  x0D
219A:  MOVWF  x0F
219C:  MOVLW  9C
219E:  MOVWF  x0E
21A0:  MOVLW  02
21A2:  MOVWF  x10
21A4:  MOVLB  0
21A6:  CALL   1656
....................                      SSD1306_DrawText(35, 25, ter, 2); 
21AA:  MOVLW  23
21AC:  MOVLB  5
21AE:  MOVWF  x0C
21B0:  MOVLW  19
21B2:  MOVWF  x0D
21B4:  MOVLW  04
21B6:  MOVWF  x0F
21B8:  MOVLW  AC
21BA:  MOVWF  x0E
21BC:  MOVLW  02
21BE:  MOVWF  x10
21C0:  MOVLB  0
21C2:  CALL   1656
....................                      SSD1306_Display(); 
21C6:  CALL   0E18
21CA:  CLRF   16
21CC:  BTFSC  FF2.7
21CE:  BSF    16.7
21D0:  BCF    FF2.7
....................                      delay_ms(2); 
21D2:  MOVLW  02
21D4:  MOVLB  5
21D6:  MOVWF  x49
21D8:  MOVLB  0
21DA:  CALL   0324
21DE:  BTFSC  16.7
21E0:  BSF    FF2.7
....................                   break;  
21E2:  MOVLB  4
21E4:  BRA    2350
....................                   case 4: 
....................                      SSD1306_ClearDisplay();    // Clear the buffer. 
21E6:  CALL   0F4A
....................                      SSD1306_DrawText(25, 4, txt13, 2); 
21EA:  MOVLW  19
21EC:  MOVLB  5
21EE:  MOVWF  x0C
21F0:  MOVLW  04
21F2:  MOVWF  x0D
21F4:  MOVWF  x0F
21F6:  MOVLW  9C
21F8:  MOVWF  x0E
21FA:  MOVLW  02
21FC:  MOVWF  x10
21FE:  MOVLB  0
2200:  CALL   1656
....................                      SSD1306_DrawText(30, 25, qua, 2); 
2204:  MOVLW  1E
2206:  MOVLB  5
2208:  MOVWF  x0C
220A:  MOVLW  19
220C:  MOVWF  x0D
220E:  MOVLW  04
2210:  MOVWF  x0F
2212:  MOVLW  B2
2214:  MOVWF  x0E
2216:  MOVLW  02
2218:  MOVWF  x10
221A:  MOVLB  0
221C:  CALL   1656
....................                      SSD1306_Display(); 
2220:  CALL   0E18
2224:  CLRF   16
2226:  BTFSC  FF2.7
2228:  BSF    16.7
222A:  BCF    FF2.7
....................                      delay_ms(2); 
222C:  MOVLW  02
222E:  MOVLB  5
2230:  MOVWF  x49
2232:  MOVLB  0
2234:  CALL   0324
2238:  BTFSC  16.7
223A:  BSF    FF2.7
....................                   break;  
223C:  MOVLB  4
223E:  BRA    2350
....................                   case 5: 
....................                      SSD1306_ClearDisplay();    // Clear the buffer. 
2240:  CALL   0F4A
....................                      SSD1306_DrawText(25, 4, txt13, 2); 
2244:  MOVLW  19
2246:  MOVLB  5
2248:  MOVWF  x0C
224A:  MOVLW  04
224C:  MOVWF  x0D
224E:  MOVWF  x0F
2250:  MOVLW  9C
2252:  MOVWF  x0E
2254:  MOVLW  02
2256:  MOVWF  x10
2258:  MOVLB  0
225A:  CALL   1656
....................                      SSD1306_DrawText(30, 25, qui, 2); 
225E:  MOVLW  1E
2260:  MOVLB  5
2262:  MOVWF  x0C
2264:  MOVLW  19
2266:  MOVWF  x0D
2268:  MOVLW  04
226A:  MOVWF  x0F
226C:  MOVLW  B9
226E:  MOVWF  x0E
2270:  MOVLW  02
2272:  MOVWF  x10
2274:  MOVLB  0
2276:  CALL   1656
....................                      SSD1306_Display(); 
227A:  CALL   0E18
227E:  CLRF   16
2280:  BTFSC  FF2.7
2282:  BSF    16.7
2284:  BCF    FF2.7
....................                      delay_ms(2); 
2286:  MOVLW  02
2288:  MOVLB  5
228A:  MOVWF  x49
228C:  MOVLB  0
228E:  CALL   0324
2292:  BTFSC  16.7
2294:  BSF    FF2.7
....................                   break;  
2296:  MOVLB  4
2298:  BRA    2350
....................                   case 6: 
....................                      SSD1306_ClearDisplay();    // Clear the buffer. 
229A:  CALL   0F4A
....................                      SSD1306_DrawText(25, 4, txt13, 2); 
229E:  MOVLW  19
22A0:  MOVLB  5
22A2:  MOVWF  x0C
22A4:  MOVLW  04
22A6:  MOVWF  x0D
22A8:  MOVWF  x0F
22AA:  MOVLW  9C
22AC:  MOVWF  x0E
22AE:  MOVLW  02
22B0:  MOVWF  x10
22B2:  MOVLB  0
22B4:  CALL   1656
....................                      SSD1306_DrawText(35, 25, sex, 2); 
22B8:  MOVLW  23
22BA:  MOVLB  5
22BC:  MOVWF  x0C
22BE:  MOVLW  19
22C0:  MOVWF  x0D
22C2:  MOVLW  04
22C4:  MOVWF  x0F
22C6:  MOVLW  C0
22C8:  MOVWF  x0E
22CA:  MOVLW  02
22CC:  MOVWF  x10
22CE:  MOVLB  0
22D0:  CALL   1656
....................                      SSD1306_Display(); 
22D4:  CALL   0E18
22D8:  CLRF   16
22DA:  BTFSC  FF2.7
22DC:  BSF    16.7
22DE:  BCF    FF2.7
....................                      delay_ms(2); 
22E0:  MOVLW  02
22E2:  MOVLB  5
22E4:  MOVWF  x49
22E6:  MOVLB  0
22E8:  CALL   0324
22EC:  BTFSC  16.7
22EE:  BSF    FF2.7
....................                   break;  
22F0:  MOVLB  4
22F2:  BRA    2350
....................                   case 7: 
....................                      SSD1306_ClearDisplay();    // Clear the buffer. 
22F4:  CALL   0F4A
....................                      SSD1306_DrawText(25, 4, txt13, 2); 
22F8:  MOVLW  19
22FA:  MOVLB  5
22FC:  MOVWF  x0C
22FE:  MOVLW  04
2300:  MOVWF  x0D
2302:  MOVWF  x0F
2304:  MOVLW  9C
2306:  MOVWF  x0E
2308:  MOVLW  02
230A:  MOVWF  x10
230C:  MOVLB  0
230E:  CALL   1656
....................                      SSD1306_DrawText(30, 25, sab, 2); 
2312:  MOVLW  1E
2314:  MOVLB  5
2316:  MOVWF  x0C
2318:  MOVLW  19
231A:  MOVWF  x0D
231C:  MOVLW  04
231E:  MOVWF  x0F
2320:  MOVLW  C6
2322:  MOVWF  x0E
2324:  MOVLW  02
2326:  MOVWF  x10
2328:  MOVLB  0
232A:  CALL   1656
....................                      SSD1306_Display(); 
232E:  CALL   0E18
2332:  CLRF   16
2334:  BTFSC  FF2.7
2336:  BSF    16.7
2338:  BCF    FF2.7
....................                      delay_ms(2); 
233A:  MOVLW  02
233C:  MOVLB  5
233E:  MOVWF  x49
2340:  MOVLB  0
2342:  CALL   0324
2346:  BTFSC  16.7
2348:  BSF    FF2.7
....................                   break;  
234A:  MOVLB  4
234C:  BRA    2350
234E:  MOVLB  4
2350:  MOVLB  0
2352:  MOVLB  4
....................                } 
....................           } 
....................         break; 
2354:  BRA    262C
....................         case 3 : 
....................          if(menu4.flagtrava == 0){ 
2356:  MOVLB  4
2358:  MOVF   xF3,F
235A:  BNZ   23E8
....................          SSD1306_ClearDisplay();    // Clear the buffer. 
235C:  MOVLB  0
235E:  CALL   0F4A
....................          SSD1306_DrawText(2, 4, txt1, 2); 
2362:  MOVLW  02
2364:  MOVLB  5
2366:  MOVWF  x0C
2368:  MOVLW  04
236A:  MOVWF  x0D
236C:  MOVWF  x0F
236E:  MOVLW  48
2370:  MOVWF  x0E
2372:  MOVLW  02
2374:  MOVWF  x10
2376:  MOVLB  0
2378:  CALL   1656
....................          //SSD1306_DrawRect(0,2,128,18); 
....................          SSD1306_DrawText(2, 25, txt2, 2); 
237C:  MOVLW  02
237E:  MOVLB  5
2380:  MOVWF  x0C
2382:  MOVLW  19
2384:  MOVWF  x0D
2386:  MOVLW  04
2388:  MOVWF  x0F
238A:  MOVLW  50
238C:  MOVWF  x0E
238E:  MOVLW  02
2390:  MOVWF  x10
2392:  MOVLB  0
2394:  CALL   1656
....................          //SSD1306_DrawRect(0,23,128,18); 
....................          SSD1306_DrawText(2, 46, txt3, 2); 
2398:  MOVLW  02
239A:  MOVLB  5
239C:  MOVWF  x0C
239E:  MOVLW  2E
23A0:  MOVWF  x0D
23A2:  MOVLW  04
23A4:  MOVWF  x0F
23A6:  MOVLW  55
23A8:  MOVWF  x0E
23AA:  MOVLW  02
23AC:  MOVWF  x10
23AE:  MOVLB  0
23B0:  CALL   1656
....................          SSD1306_DrawRect(0,44,128,18); 
23B4:  MOVLB  5
23B6:  CLRF   x0C
23B8:  MOVLW  2C
23BA:  MOVWF  x0D
23BC:  MOVLW  80
23BE:  MOVWF  x0E
23C0:  MOVLW  12
23C2:  MOVWF  x0F
23C4:  MOVLB  0
23C6:  CALL   1B7C
....................          SSD1306_Display(); 
23CA:  CALL   0E18
23CE:  CLRF   16
23D0:  BTFSC  FF2.7
23D2:  BSF    16.7
23D4:  BCF    FF2.7
....................          delay_ms(2); 
23D6:  MOVLW  02
23D8:  MOVLB  5
23DA:  MOVWF  x49
23DC:  MOVLB  0
23DE:  CALL   0324
23E2:  BTFSC  16.7
23E4:  BSF    FF2.7
23E6:  MOVLB  4
....................          } 
....................          switch(menu4.flagmenu){ 
23E8:  MOVF   xF4,W
23EA:  XORLW  01
23EC:  MOVLB  0
23EE:  BZ    23FC
23F0:  XORLW  03
23F2:  BZ    2486
23F4:  XORLW  01
23F6:  BTFSC  FD8.2
23F8:  BRA    2510
23FA:  BRA    259A
....................             case 1: 
....................                   SSD1306_ClearDisplay();    // Clear the buffer. 
23FC:  CALL   0F4A
....................                   SSD1306_DrawText(2, 4, txt10, 2); 
2400:  MOVLW  02
2402:  MOVLB  5
2404:  MOVWF  x0C
2406:  MOVLW  04
2408:  MOVWF  x0D
240A:  MOVWF  x0F
240C:  MOVLW  7B
240E:  MOVWF  x0E
2410:  MOVLW  02
2412:  MOVWF  x10
2414:  MOVLB  0
2416:  CALL   1656
....................                   SSD1306_DrawRect(0,2,128,18); 
241A:  MOVLB  5
241C:  CLRF   x0C
241E:  MOVLW  02
2420:  MOVWF  x0D
2422:  MOVLW  80
2424:  MOVWF  x0E
2426:  MOVLW  12
2428:  MOVWF  x0F
242A:  MOVLB  0
242C:  CALL   1B7C
....................                   SSD1306_DrawText(2, 25, txt11, 2); 
2430:  MOVLW  02
2432:  MOVLB  5
2434:  MOVWF  x0C
2436:  MOVLW  19
2438:  MOVWF  x0D
243A:  MOVLW  04
243C:  MOVWF  x0F
243E:  MOVLW  86
2440:  MOVWF  x0E
2442:  MOVLW  02
2444:  MOVWF  x10
2446:  MOVLB  0
2448:  CALL   1656
....................                   //SSD1306_DrawRect(0,23,128,18); 
....................                   SSD1306_DrawText(2, 46, txt12, 2); 
244C:  MOVLW  02
244E:  MOVLB  5
2450:  MOVWF  x0C
2452:  MOVLW  2E
2454:  MOVWF  x0D
2456:  MOVLW  04
2458:  MOVWF  x0F
245A:  MOVLW  91
245C:  MOVWF  x0E
245E:  MOVLW  02
2460:  MOVWF  x10
2462:  MOVLB  0
2464:  CALL   1656
....................                   //SSD1306_DrawRect(0,44,128,18); 
....................                   SSD1306_Display(); 
2468:  CALL   0E18
246C:  CLRF   16
246E:  BTFSC  FF2.7
2470:  BSF    16.7
2472:  BCF    FF2.7
....................                   delay_ms(2); 
2474:  MOVLW  02
2476:  MOVLB  5
2478:  MOVWF  x49
247A:  MOVLB  0
247C:  CALL   0324
2480:  BTFSC  16.7
2482:  BSF    FF2.7
....................             break; 
2484:  BRA    259A
....................             case 2: 
....................                   SSD1306_ClearDisplay();    // Clear the buffer. 
2486:  CALL   0F4A
....................                   SSD1306_DrawText(2, 4, txt10, 2); 
248A:  MOVLW  02
248C:  MOVLB  5
248E:  MOVWF  x0C
2490:  MOVLW  04
2492:  MOVWF  x0D
2494:  MOVWF  x0F
2496:  MOVLW  7B
2498:  MOVWF  x0E
249A:  MOVLW  02
249C:  MOVWF  x10
249E:  MOVLB  0
24A0:  CALL   1656
....................                   //SSD1306_DrawRect(0,2,128,18); 
....................                   SSD1306_DrawText(2, 25, txt11, 2); 
24A4:  MOVLW  02
24A6:  MOVLB  5
24A8:  MOVWF  x0C
24AA:  MOVLW  19
24AC:  MOVWF  x0D
24AE:  MOVLW  04
24B0:  MOVWF  x0F
24B2:  MOVLW  86
24B4:  MOVWF  x0E
24B6:  MOVLW  02
24B8:  MOVWF  x10
24BA:  MOVLB  0
24BC:  CALL   1656
....................                   SSD1306_DrawRect(0,23,128,18); 
24C0:  MOVLB  5
24C2:  CLRF   x0C
24C4:  MOVLW  17
24C6:  MOVWF  x0D
24C8:  MOVLW  80
24CA:  MOVWF  x0E
24CC:  MOVLW  12
24CE:  MOVWF  x0F
24D0:  MOVLB  0
24D2:  CALL   1B7C
....................                   SSD1306_DrawText(2, 46, txt12, 2); 
24D6:  MOVLW  02
24D8:  MOVLB  5
24DA:  MOVWF  x0C
24DC:  MOVLW  2E
24DE:  MOVWF  x0D
24E0:  MOVLW  04
24E2:  MOVWF  x0F
24E4:  MOVLW  91
24E6:  MOVWF  x0E
24E8:  MOVLW  02
24EA:  MOVWF  x10
24EC:  MOVLB  0
24EE:  CALL   1656
....................                   //SSD1306_DrawRect(0,44,128,18); 
....................                   SSD1306_Display(); 
24F2:  CALL   0E18
24F6:  CLRF   16
24F8:  BTFSC  FF2.7
24FA:  BSF    16.7
24FC:  BCF    FF2.7
....................                   delay_ms(2); 
24FE:  MOVLW  02
2500:  MOVLB  5
2502:  MOVWF  x49
2504:  MOVLB  0
2506:  CALL   0324
250A:  BTFSC  16.7
250C:  BSF    FF2.7
....................             break; 
250E:  BRA    259A
....................             case 3: 
....................                   SSD1306_ClearDisplay();    // Clear the buffer. 
2510:  CALL   0F4A
....................                   SSD1306_DrawText(2, 4, txt10, 2); 
2514:  MOVLW  02
2516:  MOVLB  5
2518:  MOVWF  x0C
251A:  MOVLW  04
251C:  MOVWF  x0D
251E:  MOVWF  x0F
2520:  MOVLW  7B
2522:  MOVWF  x0E
2524:  MOVLW  02
2526:  MOVWF  x10
2528:  MOVLB  0
252A:  CALL   1656
....................                   //SSD1306_DrawRect(0,2,128,18); 
....................                   SSD1306_DrawText(2, 25, txt11, 2); 
252E:  MOVLW  02
2530:  MOVLB  5
2532:  MOVWF  x0C
2534:  MOVLW  19
2536:  MOVWF  x0D
2538:  MOVLW  04
253A:  MOVWF  x0F
253C:  MOVLW  86
253E:  MOVWF  x0E
2540:  MOVLW  02
2542:  MOVWF  x10
2544:  MOVLB  0
2546:  CALL   1656
....................                   //SSD1306_DrawRect(0,23,128,18); 
....................                   SSD1306_DrawText(2, 46, txt12, 2); 
254A:  MOVLW  02
254C:  MOVLB  5
254E:  MOVWF  x0C
2550:  MOVLW  2E
2552:  MOVWF  x0D
2554:  MOVLW  04
2556:  MOVWF  x0F
2558:  MOVLW  91
255A:  MOVWF  x0E
255C:  MOVLW  02
255E:  MOVWF  x10
2560:  MOVLB  0
2562:  CALL   1656
....................                   SSD1306_DrawRect(0,44,128,18); 
2566:  MOVLB  5
2568:  CLRF   x0C
256A:  MOVLW  2C
256C:  MOVWF  x0D
256E:  MOVLW  80
2570:  MOVWF  x0E
2572:  MOVLW  12
2574:  MOVWF  x0F
2576:  MOVLB  0
2578:  CALL   1B7C
....................                   SSD1306_Display(); 
257C:  CALL   0E18
2580:  CLRF   16
2582:  BTFSC  FF2.7
2584:  BSF    16.7
2586:  BCF    FF2.7
....................                   delay_ms(2); 
2588:  MOVLW  02
258A:  MOVLB  5
258C:  MOVWF  x49
258E:  MOVLB  0
2590:  CALL   0324
2594:  BTFSC  16.7
2596:  BSF    FF2.7
....................             break; 
2598:  BRA    259A
....................          }             
....................         break; 
259A:  MOVLB  4
259C:  BRA    262C
....................         case 4 : 
....................          SSD1306_ClearDisplay();    // Clear the buffer. 
259E:  CALL   0F4A
....................          SSD1306_DrawText(2, 4, txt2, 2); 
25A2:  MOVLW  02
25A4:  MOVLB  5
25A6:  MOVWF  x0C
25A8:  MOVLW  04
25AA:  MOVWF  x0D
25AC:  MOVWF  x0F
25AE:  MOVLW  50
25B0:  MOVWF  x0E
25B2:  MOVLW  02
25B4:  MOVWF  x10
25B6:  MOVLB  0
25B8:  CALL   1656
....................          //SSD1306_DrawRect(0,2,128,18); 
....................          SSD1306_DrawText(2, 25, txt3, 2); 
25BC:  MOVLW  02
25BE:  MOVLB  5
25C0:  MOVWF  x0C
25C2:  MOVLW  19
25C4:  MOVWF  x0D
25C6:  MOVLW  04
25C8:  MOVWF  x0F
25CA:  MOVLW  55
25CC:  MOVWF  x0E
25CE:  MOVLW  02
25D0:  MOVWF  x10
25D2:  MOVLB  0
25D4:  CALL   1656
....................          //SSD1306_DrawRect(0,23,128,18); 
....................          SSD1306_DrawText(2, 46, txt4, 2); 
25D8:  MOVLW  02
25DA:  MOVLB  5
25DC:  MOVWF  x0C
25DE:  MOVLW  2E
25E0:  MOVWF  x0D
25E2:  MOVLW  04
25E4:  MOVWF  x0F
25E6:  MOVLW  5B
25E8:  MOVWF  x0E
25EA:  MOVLW  02
25EC:  MOVWF  x10
25EE:  MOVLB  0
25F0:  CALL   1656
....................          SSD1306_DrawRect(0,44,128,18); 
25F4:  MOVLB  5
25F6:  CLRF   x0C
25F8:  MOVLW  2C
25FA:  MOVWF  x0D
25FC:  MOVLW  80
25FE:  MOVWF  x0E
2600:  MOVLW  12
2602:  MOVWF  x0F
2604:  MOVLB  0
2606:  CALL   1B7C
....................          SSD1306_Display(); 
260A:  CALL   0E18
260E:  CLRF   16
2610:  BTFSC  FF2.7
2612:  BSF    16.7
2614:  BCF    FF2.7
....................          delay_ms(2); 
2616:  MOVLW  02
2618:  MOVLB  5
261A:  MOVWF  x49
261C:  MOVLB  0
261E:  CALL   0324
2622:  BTFSC  16.7
2624:  BSF    FF2.7
....................         break; 
2626:  MOVLB  4
2628:  BRA    262C
262A:  MOVLB  4
....................          
....................    } 
....................  
.................... } 
262C:  MOVLB  0
262E:  GOTO   3528 (RETURN)
....................  
.................... void display_dia() {  
....................    //BUSCA O DIA DA SEMANA DA VARIAVEL W_DAY E ESCREVE O NOME CORRESPONDENTE NO DISPLAY 
....................   switch(s_dia){ 
*
1944:  MOVLB  4
1946:  MOVF   xDB,W
1948:  XORLW  01
194A:  MOVLB  0
194C:  BZ    1964
194E:  XORLW  03
1950:  BZ    197E
1952:  XORLW  01
1954:  BZ    1998
1956:  XORLW  07
1958:  BZ    19B2
195A:  XORLW  01
195C:  BZ    19CC
195E:  XORLW  03
1960:  BZ    19E6
1962:  BRA    1A00
....................     case 1:   
....................  
....................       SSD1306_Drawtext(49, 0, dom, 1); break; 
1964:  MOVLW  31
1966:  MOVLB  5
1968:  MOVWF  x0C
196A:  CLRF   x0D
196C:  MOVLW  04
196E:  MOVWF  x0F
1970:  MOVLW  CD
1972:  MOVWF  x0E
1974:  MOVLW  01
1976:  MOVWF  x10
1978:  MOVLB  0
197A:  RCALL  1656
197C:  BRA    1A1A
....................     case 2:   
....................       SSD1306_Drawtext(49, 0, seg1, 1); break; 
197E:  MOVLW  31
1980:  MOVLB  5
1982:  MOVWF  x0C
1984:  CLRF   x0D
1986:  MOVLW  04
1988:  MOVWF  x0F
198A:  MOVLW  A4
198C:  MOVWF  x0E
198E:  MOVLW  01
1990:  MOVWF  x10
1992:  MOVLB  0
1994:  RCALL  1656
1996:  BRA    1A1A
....................     case 3: 
....................       SSD1306_Drawtext(49, 0, ter, 1); break; 
1998:  MOVLW  31
199A:  MOVLB  5
199C:  MOVWF  x0C
199E:  CLRF   x0D
19A0:  MOVLW  04
19A2:  MOVWF  x0F
19A4:  MOVLW  AC
19A6:  MOVWF  x0E
19A8:  MOVLW  01
19AA:  MOVWF  x10
19AC:  MOVLB  0
19AE:  RCALL  1656
19B0:  BRA    1A1A
....................     case 4: 
....................       SSD1306_Drawtext(49, 0, qua, 1); break; 
19B2:  MOVLW  31
19B4:  MOVLB  5
19B6:  MOVWF  x0C
19B8:  CLRF   x0D
19BA:  MOVLW  04
19BC:  MOVWF  x0F
19BE:  MOVLW  B2
19C0:  MOVWF  x0E
19C2:  MOVLW  01
19C4:  MOVWF  x10
19C6:  MOVLB  0
19C8:  RCALL  1656
19CA:  BRA    1A1A
....................     case 5:   
....................       SSD1306_Drawtext(49, 0, qui, 1); break; 
19CC:  MOVLW  31
19CE:  MOVLB  5
19D0:  MOVWF  x0C
19D2:  CLRF   x0D
19D4:  MOVLW  04
19D6:  MOVWF  x0F
19D8:  MOVLW  B9
19DA:  MOVWF  x0E
19DC:  MOVLW  01
19DE:  MOVWF  x10
19E0:  MOVLB  0
19E2:  RCALL  1656
19E4:  BRA    1A1A
....................     case 6: 
....................       SSD1306_Drawtext(49, 0, sex, 1); break; 
19E6:  MOVLW  31
19E8:  MOVLB  5
19EA:  MOVWF  x0C
19EC:  CLRF   x0D
19EE:  MOVLW  04
19F0:  MOVWF  x0F
19F2:  MOVLW  C0
19F4:  MOVWF  x0E
19F6:  MOVLW  01
19F8:  MOVWF  x10
19FA:  MOVLB  0
19FC:  RCALL  1656
19FE:  BRA    1A1A
....................     default:  
....................       SSD1306_Drawtext(49, 0, sab, 1); break; 
1A00:  MOVLW  31
1A02:  MOVLB  5
1A04:  MOVWF  x0C
1A06:  CLRF   x0D
1A08:  MOVLW  04
1A0A:  MOVWF  x0F
1A0C:  MOVLW  C6
1A0E:  MOVWF  x0E
1A10:  MOVLW  01
1A12:  MOVWF  x10
1A14:  MOVLB  0
1A16:  RCALL  1656
1A18:  BRA    1A1A
....................   } 
....................   
.................... } 
1A1A:  GOTO   1AFC (RETURN)
....................  
.................... void DS1307_display() { 
....................       // FAZ A CONVERSÃO DOS DADOS RECEBIDOS PELA I2C DO DS1307 DE BINARIO PARA DECIMAL 
....................   seg = (seg >> 4) * 10 + (seg & 0x0F); 
*
16A0:  MOVLB  4
16A2:  SWAPF  xD8,W
16A4:  MOVWF  00
16A6:  MOVLW  0F
16A8:  ANDWF  00,F
16AA:  MOVF   00,W
16AC:  MULLW  0A
16AE:  MOVFF  FF3,50C
16B2:  MOVLB  4
16B4:  MOVF   xD8,W
16B6:  ANDLW  0F
16B8:  MOVLB  5
16BA:  ADDWF  x0C,W
16BC:  MOVLB  4
16BE:  MOVWF  xD8
....................   min = (min >> 4) * 10 + (min & 0x0F); 
16C0:  SWAPF  xD9,W
16C2:  MOVWF  00
16C4:  MOVLW  0F
16C6:  ANDWF  00,F
16C8:  MOVF   00,W
16CA:  MULLW  0A
16CC:  MOVFF  FF3,50C
16D0:  MOVLB  4
16D2:  MOVF   xD9,W
16D4:  ANDLW  0F
16D6:  MOVLB  5
16D8:  ADDWF  x0C,W
16DA:  MOVLB  4
16DC:  MOVWF  xD9
....................   hr  = (hr  >> 4) * 10 + (hr  & 0x0F); 
16DE:  SWAPF  xDA,W
16E0:  MOVWF  00
16E2:  MOVLW  0F
16E4:  ANDWF  00,F
16E6:  MOVF   00,W
16E8:  MULLW  0A
16EA:  MOVFF  FF3,50C
16EE:  MOVLB  4
16F0:  MOVF   xDA,W
16F2:  ANDLW  0F
16F4:  MOVLB  5
16F6:  ADDWF  x0C,W
16F8:  MOVLB  4
16FA:  MOVWF  xDA
....................   dia = (dia >> 4) * 10 + (dia & 0x0F); 
16FC:  SWAPF  xDC,W
16FE:  MOVWF  00
1700:  MOVLW  0F
1702:  ANDWF  00,F
1704:  MOVF   00,W
1706:  MULLW  0A
1708:  MOVFF  FF3,50C
170C:  MOVLB  4
170E:  MOVF   xDC,W
1710:  ANDLW  0F
1712:  MOVLB  5
1714:  ADDWF  x0C,W
1716:  MOVLB  4
1718:  MOVWF  xDC
....................   mes = (mes >> 4) * 10 + (mes & 0x0F); 
171A:  SWAPF  xDD,W
171C:  MOVWF  00
171E:  MOVLW  0F
1720:  ANDWF  00,F
1722:  MOVF   00,W
1724:  MULLW  0A
1726:  MOVFF  FF3,50C
172A:  MOVLB  4
172C:  MOVF   xDD,W
172E:  ANDLW  0F
1730:  MOVLB  5
1732:  ADDWF  x0C,W
1734:  MOVLB  4
1736:  MOVWF  xDD
....................   ano = (ano >> 4) * 10 + (ano & 0x0F); 
1738:  SWAPF  xDE,W
173A:  MOVWF  00
173C:  MOVLW  0F
173E:  ANDWF  00,F
1740:  MOVF   00,W
1742:  MULLW  0A
1744:  MOVFF  FF3,50C
1748:  MOVLB  4
174A:  MOVF   xDE,W
174C:  ANDLW  0F
174E:  MOVLB  5
1750:  ADDWF  x0C,W
1752:  MOVLB  4
1754:  MOVWF  xDE
1756:  CLRF   16
1758:  BTFSC  FF2.7
175A:  BSF    16.7
175C:  BCF    FF2.7
....................    
....................       // End conversion 
....................       //CONVERTE O VALOR DECIMAL PARA ASCII PARA SER MOSTRADO NO DISPLAY 
....................   horas[7] = seg % 10 + 0x30; //RESTO DA DIVISÃO POR 10 DE SEG RETORNA APENAS A UNIDADE DO VALOR (EX: 15 % 10 = 5) E ADC +48(0x30) DO ASCII 
175E:  MOVFF  4D8,54A
1762:  MOVLW  0A
1764:  MOVLB  5
1766:  MOVWF  x4B
1768:  MOVLB  0
176A:  CALL   02A6
176E:  BTFSC  16.7
1770:  BSF    FF2.7
1772:  MOVLW  30
1774:  ADDWF  00,W
1776:  MOVLB  4
1778:  MOVWF  x26
177A:  CLRF   16
177C:  BTFSC  FF2.7
177E:  BSF    16.7
1780:  BCF    FF2.7
....................   horas[6] = seg / 10 + 0x30; //DIVIDE UM INTEIRO POR 10, CASO HOUVER RESTO O MESMO É DESCARTADO, RESTANDO APENAS O VALOR DA DEZENA, SOMA +48 ASCII 
1782:  MOVFF  4D8,54A
1786:  MOVLW  0A
1788:  MOVLB  5
178A:  MOVWF  x4B
178C:  MOVLB  0
178E:  CALL   02A6
1792:  BTFSC  16.7
1794:  BSF    FF2.7
1796:  MOVLW  30
1798:  ADDWF  01,W
179A:  MOVLB  4
179C:  MOVWF  x25
179E:  CLRF   16
17A0:  BTFSC  FF2.7
17A2:  BSF    16.7
17A4:  BCF    FF2.7
....................   horas[4] = min % 10 + 0x30; 
17A6:  MOVFF  4D9,54A
17AA:  MOVLW  0A
17AC:  MOVLB  5
17AE:  MOVWF  x4B
17B0:  MOVLB  0
17B2:  CALL   02A6
17B6:  BTFSC  16.7
17B8:  BSF    FF2.7
17BA:  MOVLW  30
17BC:  ADDWF  00,W
17BE:  MOVLB  4
17C0:  MOVWF  x23
17C2:  CLRF   16
17C4:  BTFSC  FF2.7
17C6:  BSF    16.7
17C8:  BCF    FF2.7
....................   horas[3] = min / 10 + 0x30; 
17CA:  MOVFF  4D9,54A
17CE:  MOVLW  0A
17D0:  MOVLB  5
17D2:  MOVWF  x4B
17D4:  MOVLB  0
17D6:  CALL   02A6
17DA:  BTFSC  16.7
17DC:  BSF    FF2.7
17DE:  MOVLW  30
17E0:  ADDWF  01,W
17E2:  MOVLB  4
17E4:  MOVWF  x22
17E6:  CLRF   16
17E8:  BTFSC  FF2.7
17EA:  BSF    16.7
17EC:  BCF    FF2.7
....................   horas[1] = hr  % 10 + 0x30; 
17EE:  MOVFF  4DA,54A
17F2:  MOVLW  0A
17F4:  MOVLB  5
17F6:  MOVWF  x4B
17F8:  MOVLB  0
17FA:  CALL   02A6
17FE:  BTFSC  16.7
1800:  BSF    FF2.7
1802:  MOVLW  30
1804:  ADDWF  00,W
1806:  MOVLB  4
1808:  MOVWF  x20
180A:  CLRF   16
180C:  BTFSC  FF2.7
180E:  BSF    16.7
1810:  BCF    FF2.7
....................   horas[0] = hr  / 10 + 0x30; 
1812:  MOVFF  4DA,54A
1816:  MOVLW  0A
1818:  MOVLB  5
181A:  MOVWF  x4B
181C:  MOVLB  0
181E:  CALL   02A6
1822:  BTFSC  16.7
1824:  BSF    FF2.7
1826:  MOVLW  30
1828:  ADDWF  01,W
182A:  MOVLB  4
182C:  MOVWF  x1F
182E:  CLRF   16
1830:  BTFSC  FF2.7
1832:  BSF    16.7
1834:  BCF    FF2.7
....................   data[9] = ano % 10 + 0x30; 
1836:  MOVFF  4DE,54A
183A:  MOVLW  0A
183C:  MOVLB  5
183E:  MOVWF  x4B
1840:  MOVLB  0
1842:  CALL   02A6
1846:  BTFSC  16.7
1848:  BSF    FF2.7
184A:  MOVLW  30
184C:  ADDWF  00,W
184E:  MOVLB  4
1850:  MOVWF  x2E
1852:  CLRF   16
1854:  BTFSC  FF2.7
1856:  BSF    16.7
1858:  BCF    FF2.7
....................   data[8] = ano / 10 + 0x30; 
185A:  MOVFF  4DE,54A
185E:  MOVLW  0A
1860:  MOVLB  5
1862:  MOVWF  x4B
1864:  MOVLB  0
1866:  CALL   02A6
186A:  BTFSC  16.7
186C:  BSF    FF2.7
186E:  MOVLW  30
1870:  ADDWF  01,W
1872:  MOVLB  4
1874:  MOVWF  x2D
1876:  CLRF   16
1878:  BTFSC  FF2.7
187A:  BSF    16.7
187C:  BCF    FF2.7
....................   data[4] = mes % 10 + 0x30; 
187E:  MOVFF  4DD,54A
1882:  MOVLW  0A
1884:  MOVLB  5
1886:  MOVWF  x4B
1888:  MOVLB  0
188A:  CALL   02A6
188E:  BTFSC  16.7
1890:  BSF    FF2.7
1892:  MOVLW  30
1894:  ADDWF  00,W
1896:  MOVLB  4
1898:  MOVWF  x29
189A:  CLRF   16
189C:  BTFSC  FF2.7
189E:  BSF    16.7
18A0:  BCF    FF2.7
....................   data[3] = mes / 10 + 0x30; 
18A2:  MOVFF  4DD,54A
18A6:  MOVLW  0A
18A8:  MOVLB  5
18AA:  MOVWF  x4B
18AC:  MOVLB  0
18AE:  CALL   02A6
18B2:  BTFSC  16.7
18B4:  BSF    FF2.7
18B6:  MOVLW  30
18B8:  ADDWF  01,W
18BA:  MOVLB  4
18BC:  MOVWF  x28
18BE:  CLRF   16
18C0:  BTFSC  FF2.7
18C2:  BSF    16.7
18C4:  BCF    FF2.7
....................   data[1] = dia % 10 + 0x30; 
18C6:  MOVFF  4DC,54A
18CA:  MOVLW  0A
18CC:  MOVLB  5
18CE:  MOVWF  x4B
18D0:  MOVLB  0
18D2:  CALL   02A6
18D6:  BTFSC  16.7
18D8:  BSF    FF2.7
18DA:  MOVLW  30
18DC:  ADDWF  00,W
18DE:  MOVLB  4
18E0:  MOVWF  x26
18E2:  CLRF   16
18E4:  BTFSC  FF2.7
18E6:  BSF    16.7
18E8:  BCF    FF2.7
....................   data[0] = dia / 10 + 0x30; 
18EA:  MOVFF  4DC,54A
18EE:  MOVLW  0A
18F0:  MOVLB  5
18F2:  MOVWF  x4B
18F4:  MOVLB  0
18F6:  CALL   02A6
18FA:  BTFSC  16.7
18FC:  BSF    FF2.7
18FE:  MOVLW  30
1900:  ADDWF  01,W
1902:  MOVLB  4
1904:  MOVWF  x25
....................   SSD1306_ClearDisplay();    // Clear the buffer.  
1906:  MOVLB  0
1908:  CALL   0F4A
....................   SSD1306_DrawText(15,  12, data, 1);        // IMPRIME A STRING DE DATA NO DISPLAY 
190C:  MOVLW  0F
190E:  MOVLB  5
1910:  MOVWF  x0C
1912:  MOVLW  0C
1914:  MOVWF  x0D
1916:  MOVLW  04
1918:  MOVWF  x0F
191A:  MOVLW  25
191C:  MOVWF  x0E
191E:  MOVLW  01
1920:  MOVWF  x10
1922:  MOVLB  0
1924:  RCALL  1656
....................   SSD1306_DrawText(84, 12, horas, 1);        // IMPRIME A STRING DE TEMPO NO DISPLAY 
1926:  MOVLW  54
1928:  MOVLB  5
192A:  MOVWF  x0C
192C:  MOVLW  0C
192E:  MOVWF  x0D
1930:  MOVLW  04
1932:  MOVWF  x0F
1934:  MOVLW  1F
1936:  MOVWF  x0E
1938:  MOVLW  01
193A:  MOVWF  x10
193C:  MOVLB  0
193E:  RCALL  1656
....................   
.................... } 
1940:  GOTO   1AFA (RETURN)
....................  
.................... void escreve_ds(int8 hr, int8 min, int8 s_dia, int8 dia, int8 mes, int8 ano){ 
....................     // Convert decimal to BCD 
....................          // Convert decimal to BCD 
....................    min = ((min  / 10) << 4) + (min  % 10); 
*
034C:  MOVFF  544,54A
0350:  MOVLW  0A
0352:  MOVLB  5
0354:  MOVWF  x4B
0356:  MOVLB  0
0358:  RCALL  02A6
035A:  SWAPF  01,W
035C:  MOVLB  5
035E:  MOVWF  x49
0360:  MOVLW  F0
0362:  ANDWF  x49,F
0364:  MOVFF  544,54A
0368:  MOVLW  0A
036A:  MOVWF  x4B
036C:  MOVLB  0
036E:  RCALL  02A6
0370:  MOVF   00,W
0372:  MOVLB  5
0374:  ADDWF  x49,W
0376:  MOVWF  x44
....................    hr  = ((hr   / 10) << 4) + (hr   % 10); 
0378:  MOVFF  543,54A
037C:  MOVLW  0A
037E:  MOVWF  x4B
0380:  MOVLB  0
0382:  RCALL  02A6
0384:  SWAPF  01,W
0386:  MOVLB  5
0388:  MOVWF  x49
038A:  MOVLW  F0
038C:  ANDWF  x49,F
038E:  MOVFF  543,54A
0392:  MOVLW  0A
0394:  MOVWF  x4B
0396:  MOVLB  0
0398:  RCALL  02A6
039A:  MOVF   00,W
039C:  MOVLB  5
039E:  ADDWF  x49,W
03A0:  MOVWF  x43
....................    dia = ((dia  / 10) << 4) + (dia  % 10); 
03A2:  MOVFF  546,54A
03A6:  MOVLW  0A
03A8:  MOVWF  x4B
03AA:  MOVLB  0
03AC:  RCALL  02A6
03AE:  SWAPF  01,W
03B0:  MOVLB  5
03B2:  MOVWF  x49
03B4:  MOVLW  F0
03B6:  ANDWF  x49,F
03B8:  MOVFF  546,54A
03BC:  MOVLW  0A
03BE:  MOVWF  x4B
03C0:  MOVLB  0
03C2:  RCALL  02A6
03C4:  MOVF   00,W
03C6:  MOVLB  5
03C8:  ADDWF  x49,W
03CA:  MOVWF  x46
....................    mes = ((mes  / 10) << 4) + (mes  % 10); 
03CC:  MOVFF  547,54A
03D0:  MOVLW  0A
03D2:  MOVWF  x4B
03D4:  MOVLB  0
03D6:  RCALL  02A6
03D8:  SWAPF  01,W
03DA:  MOVLB  5
03DC:  MOVWF  x49
03DE:  MOVLW  F0
03E0:  ANDWF  x49,F
03E2:  MOVFF  547,54A
03E6:  MOVLW  0A
03E8:  MOVWF  x4B
03EA:  MOVLB  0
03EC:  RCALL  02A6
03EE:  MOVF   00,W
03F0:  MOVLB  5
03F2:  ADDWF  x49,W
03F4:  MOVWF  x47
....................    ano = ((ano  / 10) << 4) + (ano  % 10); 
03F6:  MOVFF  548,54A
03FA:  MOVLW  0A
03FC:  MOVWF  x4B
03FE:  MOVLB  0
0400:  RCALL  02A6
0402:  SWAPF  01,W
0404:  MOVLB  5
0406:  MOVWF  x49
0408:  MOVLW  F0
040A:  ANDWF  x49,F
040C:  MOVFF  548,54A
0410:  MOVLW  0A
0412:  MOVWF  x4B
0414:  MOVLB  0
0416:  RCALL  02A6
0418:  MOVF   00,W
041A:  MOVLB  5
041C:  ADDWF  x49,W
041E:  MOVWF  x48
....................     // End conversion 
....................  
....................    // ESCREVE DADOS DA HORA NO DS1307 RTC 
....................     i2c_start(SSD1306_STREAM);             // INICIA I2C 
0420:  BSF    F93.0
0422:  NOP   
0424:  BSF    F93.1
0426:  NOP   
0428:  BCF    F8A.0
042A:  BCF    F93.0
042C:  NOP   
042E:  BCF    F8A.1
0430:  BCF    F93.1
....................     i2c_write(SSD1306_STREAM, 0xD0);       // ENDEREÇO DS1307 
0432:  MOVLW  D0
0434:  MOVWF  x49
0436:  MOVLB  0
0438:  RCALL  02D2
....................     i2c_write(SSD1306_STREAM, 0);          // ENVIA PARA O ENDEREÇO DO REGISTRADOR 
043A:  MOVLB  5
043C:  CLRF   x49
043E:  MOVLB  0
0440:  RCALL  02D2
....................     i2c_write(SSD1306_STREAM, 0);          // RESETA OS SEGUNDOS E INICIA O OSCILADOR 
0442:  MOVLB  5
0444:  CLRF   x49
0446:  MOVLB  0
0448:  RCALL  02D2
....................     i2c_write(SSD1306_STREAM, min);        // ESCREVE O VALOR DOS MINS NO DS1307 
044A:  MOVFF  544,549
044E:  RCALL  02D2
....................     i2c_write(SSD1306_STREAM, hr);          // ESCREVE O VALOR DAS HRS NO DS1307 
0450:  MOVFF  543,549
0454:  RCALL  02D2
....................     i2c_write(SSD1306_STREAM, s_dia);      // ESCREVE O VALOR DO DIA DA SEMANA NO DS1307 
0456:  MOVFF  545,549
045A:  RCALL  02D2
....................     i2c_write(SSD1306_STREAM, dia);        // ESCREVE O VALOR DO DIA NO DS1307 
045C:  MOVFF  546,549
0460:  RCALL  02D2
....................     i2c_write(SSD1306_STREAM, mes);         // ESCREVE O VALOR DO MES DS1307 
0462:  MOVFF  547,549
0466:  RCALL  02D2
....................     i2c_write(SSD1306_STREAM, ano);          // ESCREVE O VALOR DO ANO NO DS1307 
0468:  MOVFF  548,549
046C:  RCALL  02D2
....................     i2c_stop(SSD1306_STREAM);              // PARA A COMUNICAÇÃO I2C 
046E:  BCF    F93.0
0470:  NOP   
0472:  BSF    F93.1
0474:  BTFSS  F81.1
0476:  BRA    0474
0478:  NOP   
047A:  BRA    047C
047C:  NOP   
047E:  BSF    F93.0
0480:  NOP   
....................   
....................     delay_ms(200);                     // AGUARDA 200MS    
0482:  MOVLW  C8
0484:  MOVLB  5
0486:  MOVWF  x49
0488:  MOVLB  0
048A:  RCALL  0324
.................... } 
048C:  RETLW  00
....................  
.................... void le_DS1307(void){ 
....................     // Read current time and date 
....................     i2c_start(SSD1306_STREAM);              // Start I2C 
*
1A1E:  BSF    F93.0
1A20:  NOP   
1A22:  BSF    F93.1
1A24:  NOP   
1A26:  BCF    F8A.0
1A28:  BCF    F93.0
1A2A:  NOP   
1A2C:  BCF    F8A.1
1A2E:  BCF    F93.1
1A30:  CLRF   16
1A32:  BTFSC  FF2.7
1A34:  BSF    16.7
1A36:  BCF    FF2.7
....................     i2c_write(SSD1306_STREAM, 0xD0);        // DS1307 address 
1A38:  MOVLW  D0
1A3A:  MOVLB  5
1A3C:  MOVWF  x49
1A3E:  MOVLB  0
1A40:  CALL   02D2
1A44:  BTFSC  16.7
1A46:  BSF    FF2.7
1A48:  CLRF   16
1A4A:  BTFSC  FF2.7
1A4C:  BSF    16.7
1A4E:  BCF    FF2.7
....................     i2c_write(SSD1306_STREAM, 0);           // Send register address 
1A50:  MOVLB  5
1A52:  CLRF   x49
1A54:  MOVLB  0
1A56:  CALL   02D2
1A5A:  BTFSC  16.7
1A5C:  BSF    FF2.7
....................     i2c_start(SSD1306_STREAM);              // Restart I2C 
1A5E:  BSF    F93.0
1A60:  NOP   
1A62:  BSF    F93.1
1A64:  NOP   
1A66:  BTFSS  F81.1
1A68:  BRA    1A66
1A6A:  BCF    F8A.0
1A6C:  BCF    F93.0
1A6E:  NOP   
1A70:  BCF    F8A.1
1A72:  BCF    F93.1
1A74:  CLRF   16
1A76:  BTFSC  FF2.7
1A78:  BSF    16.7
1A7A:  BCF    FF2.7
....................     i2c_write(SSD1306_STREAM, 0xD1);        // Initialize data read 
1A7C:  MOVLW  D1
1A7E:  MOVLB  5
1A80:  MOVWF  x49
1A82:  MOVLB  0
1A84:  CALL   02D2
1A88:  BTFSC  16.7
1A8A:  BSF    FF2.7
....................     seg =   i2c_read(SSD1306_STREAM, 1);      // Read seconds from register 0 
1A8C:  MOVLW  01
1A8E:  MOVWF  00
1A90:  CALL   10D8
1A94:  MOVFF  01,4D8
....................     min =   i2c_read(SSD1306_STREAM, 2);      // Read minuts from register 1 
1A98:  MOVLW  02
1A9A:  MOVWF  00
1A9C:  CALL   10D8
1AA0:  MOVFF  01,4D9
....................     hr  =   i2c_read(SSD1306_STREAM, 3);      // Read hour from register 2 
1AA4:  MOVLW  03
1AA6:  MOVWF  00
1AA8:  CALL   10D8
1AAC:  MOVFF  01,4DA
....................     s_dia = i2c_read(SSD1306_STREAM, 4);      // Read day of week from register 3 
1AB0:  MOVLW  04
1AB2:  MOVWF  00
1AB4:  CALL   10D8
1AB8:  MOVFF  01,4DB
....................     dia =   i2c_read(SSD1306_STREAM, 5);      // Read day from register 4 
1ABC:  MOVLW  05
1ABE:  MOVWF  00
1AC0:  CALL   10D8
1AC4:  MOVFF  01,4DC
....................     mes =   i2c_read(SSD1306_STREAM, 6);      // Read month from register 5 
1AC8:  MOVLW  06
1ACA:  MOVWF  00
1ACC:  CALL   10D8
1AD0:  MOVFF  01,4DD
....................     ano =   i2c_read(SSD1306_STREAM, 7);      // Read year from register 6 
1AD4:  MOVLW  07
1AD6:  MOVWF  00
1AD8:  CALL   10D8
1ADC:  MOVFF  01,4DE
....................     i2c_stop(SSD1306_STREAM);               // Stop I2C 
1AE0:  BCF    F93.0
1AE2:  NOP   
1AE4:  BSF    F93.1
1AE6:  BTFSS  F81.1
1AE8:  BRA    1AE6
1AEA:  NOP   
1AEC:  BRA    1AEE
1AEE:  NOP   
1AF0:  BSF    F93.0
1AF2:  NOP   
....................  
....................   SSD1306_ClearDisplay();    // Clear the buffer. 
1AF4:  CALL   0F4A
....................   DS1307_display();   // Diaplay time & Date 
1AF8:  BRA    16A0
....................   display_dia();      // Display day of the week 
1AFA:  BRA    1944
....................   SSD1306_DrawText(2, 25, hori, 2); 
1AFC:  MOVLW  02
1AFE:  MOVLB  5
1B00:  MOVWF  x0C
1B02:  MOVLW  19
1B04:  MOVWF  x0D
1B06:  MOVLW  04
1B08:  MOVWF  x0F
1B0A:  MOVLW  30
1B0C:  MOVWF  x0E
1B0E:  MOVLW  02
1B10:  MOVWF  x10
1B12:  MOVLB  0
1B14:  RCALL  1656
....................   SSD1306_DrawText(2, 45, tmr, 2); 
1B16:  MOVLW  02
1B18:  MOVLB  5
1B1A:  MOVWF  x0C
1B1C:  MOVLW  2D
1B1E:  MOVWF  x0D
1B20:  MOVLW  04
1B22:  MOVWF  x0F
1B24:  MOVLW  3C
1B26:  MOVWF  x0E
1B28:  MOVLW  02
1B2A:  MOVWF  x10
1B2C:  MOVLB  0
1B2E:  RCALL  1656
....................   SSD1306_Display(); 
1B30:  CALL   0E18
1B34:  CLRF   16
1B36:  BTFSC  FF2.7
1B38:  BSF    16.7
1B3A:  BCF    FF2.7
....................   delay_ms(2); 
1B3C:  MOVLW  02
1B3E:  MOVLB  5
1B40:  MOVWF  x49
1B42:  MOVLB  0
1B44:  CALL   0324
1B48:  BTFSC  16.7
1B4A:  BSF    FF2.7
.................... } 
1B4C:  GOTO   1DBC (RETURN)
....................  
.................... void conv_valor(char buff[],unsigned int16 aux){ 
....................   unsigned char dezena,unidade,centena, milhar, dmilhar; 
....................   unsigned int16 aux1; 
....................   dmilhar = 0; 
*
0FEA:  MOVLB  5
0FEC:  CLRF   x16
....................   milhar = 0; 
0FEE:  CLRF   x15
....................   centena = 0; 
0FF0:  CLRF   x14
....................   dezena  = 0; 
0FF2:  CLRF   x12
....................   unidade = 0; 
0FF4:  CLRF   x13
....................   aux1 = aux;  
0FF6:  MOVFF  511,518
0FFA:  MOVFF  510,517
....................   for(;aux>=10000;aux -=10000){dmilhar++;} 
0FFE:  MOVF   x11,W
1000:  SUBLW  26
1002:  BC    101A
1004:  XORLW  FF
1006:  BNZ   100E
1008:  MOVF   x10,W
100A:  SUBLW  0F
100C:  BC    101A
100E:  INCF   x16,F
1010:  MOVLW  10
1012:  SUBWF  x10,F
1014:  MOVLW  27
1016:  SUBWFB x11,F
1018:  BRA    0FFE
....................   for(;aux>=1000;aux -=1000){milhar++;} 
101A:  MOVF   x11,W
101C:  SUBLW  02
101E:  BC    1036
1020:  XORLW  FF
1022:  BNZ   102A
1024:  MOVF   x10,W
1026:  SUBLW  E7
1028:  BC    1036
102A:  INCF   x15,F
102C:  MOVLW  E8
102E:  SUBWF  x10,F
1030:  MOVLW  03
1032:  SUBWFB x11,F
1034:  BRA    101A
....................   for(;aux>=100;aux -=100){centena++;} 
1036:  MOVF   x11,F
1038:  BNZ   1040
103A:  MOVF   x10,W
103C:  SUBLW  63
103E:  BC    104C
1040:  INCF   x14,F
1042:  MOVLW  64
1044:  SUBWF  x10,F
1046:  MOVLW  00
1048:  SUBWFB x11,F
104A:  BRA    1036
....................   for(;aux>=10;aux -=10){dezena++;} 
104C:  MOVF   x11,F
104E:  BNZ   1056
1050:  MOVF   x10,W
1052:  SUBLW  09
1054:  BC    1062
1056:  INCF   x12,F
1058:  MOVLW  0A
105A:  SUBWF  x10,F
105C:  MOVLW  00
105E:  SUBWFB x11,F
1060:  BRA    104C
....................   for(;aux>=1;aux -=1){unidade++;} 
1062:  MOVF   x11,F
1064:  BNZ   106C
1066:  MOVF   x10,W
1068:  SUBLW  00
106A:  BC    1078
106C:  INCF   x13,F
106E:  MOVLW  01
1070:  SUBWF  x10,F
1072:  MOVLW  00
1074:  SUBWFB x11,F
1076:  BRA    1062
....................   dmilhar = (dmilhar + 48); 
1078:  MOVLW  30
107A:  ADDWF  x16,F
....................   milhar  = (milhar  + 48);   
107C:  ADDWF  x15,F
....................   centena = (centena + 48); 
107E:  ADDWF  x14,F
....................   dezena  = (dezena  + 48); 
1080:  ADDWF  x12,F
....................   unidade = (unidade + 48); 
1082:  ADDWF  x13,F
....................    
....................    
....................    
....................    
....................    
....................   buff[6] = unidade; 
1084:  MOVLW  06
1086:  ADDWF  x0E,W
1088:  MOVWF  FE9
108A:  MOVLW  00
108C:  ADDWFC x0F,W
108E:  MOVWF  FEA
1090:  MOVFF  513,FEF
....................   buff[5] = dezena; 
1094:  MOVLW  05
1096:  ADDWF  x0E,W
1098:  MOVWF  FE9
109A:  MOVLW  00
109C:  ADDWFC x0F,W
109E:  MOVWF  FEA
10A0:  MOVFF  512,FEF
....................   buff[4] = centena; 
10A4:  MOVLW  04
10A6:  ADDWF  x0E,W
10A8:  MOVWF  FE9
10AA:  MOVLW  00
10AC:  ADDWFC x0F,W
10AE:  MOVWF  FEA
10B0:  MOVFF  514,FEF
....................   buff[3] = milhar; 
10B4:  MOVLW  03
10B6:  ADDWF  x0E,W
10B8:  MOVWF  FE9
10BA:  MOVLW  00
10BC:  ADDWFC x0F,W
10BE:  MOVWF  FEA
10C0:  MOVFF  515,FEF
....................   buff[2] = dmilhar; 
10C4:  MOVLW  02
10C6:  ADDWF  x0E,W
10C8:  MOVWF  FE9
10CA:  MOVLW  00
10CC:  ADDWFC x0F,W
10CE:  MOVWF  FEA
10D0:  MOVFF  516,FEF
.................... } 
10D4:  MOVLB  0
10D6:  RETLW  00
....................  
.................... void atualiza_disp(void){ 
*
1BE2:  CLRF   16
1BE4:  BTFSC  FF2.7
1BE6:  BSF    16.7
1BE8:  BCF    FF2.7
....................   horas[7] = seg % 10 + 0x30; //RESTO DA DIVISÃO POR 10 DE SEG RETORNA APENAS A UNIDADE DO VALOR (EX: 15 % 10 = 5) E ADC +48(0x30) DO ASCII 
1BEA:  MOVFF  4D8,54A
1BEE:  MOVLW  0A
1BF0:  MOVLB  5
1BF2:  MOVWF  x4B
1BF4:  MOVLB  0
1BF6:  CALL   02A6
1BFA:  BTFSC  16.7
1BFC:  BSF    FF2.7
1BFE:  MOVLW  30
1C00:  ADDWF  00,W
1C02:  MOVLB  4
1C04:  MOVWF  x26
1C06:  CLRF   16
1C08:  BTFSC  FF2.7
1C0A:  BSF    16.7
1C0C:  BCF    FF2.7
....................   horas[6] = seg / 10 + 0x30; //DIVIDE UM INTEIRO POR 10, CASO HOUVER RESTO O MESMO É DESCARTADO, RESTANDO APENAS O VALOR DA DEZENA, SOMA +48 ASCII 
1C0E:  MOVFF  4D8,54A
1C12:  MOVLW  0A
1C14:  MOVLB  5
1C16:  MOVWF  x4B
1C18:  MOVLB  0
1C1A:  CALL   02A6
1C1E:  BTFSC  16.7
1C20:  BSF    FF2.7
1C22:  MOVLW  30
1C24:  ADDWF  01,W
1C26:  MOVLB  4
1C28:  MOVWF  x25
1C2A:  CLRF   16
1C2C:  BTFSC  FF2.7
1C2E:  BSF    16.7
1C30:  BCF    FF2.7
....................   horas[4] = min % 10 + 0x30; 
1C32:  MOVFF  4D9,54A
1C36:  MOVLW  0A
1C38:  MOVLB  5
1C3A:  MOVWF  x4B
1C3C:  MOVLB  0
1C3E:  CALL   02A6
1C42:  BTFSC  16.7
1C44:  BSF    FF2.7
1C46:  MOVLW  30
1C48:  ADDWF  00,W
1C4A:  MOVLB  4
1C4C:  MOVWF  x23
1C4E:  CLRF   16
1C50:  BTFSC  FF2.7
1C52:  BSF    16.7
1C54:  BCF    FF2.7
....................   horas[3] = min / 10 + 0x30; 
1C56:  MOVFF  4D9,54A
1C5A:  MOVLW  0A
1C5C:  MOVLB  5
1C5E:  MOVWF  x4B
1C60:  MOVLB  0
1C62:  CALL   02A6
1C66:  BTFSC  16.7
1C68:  BSF    FF2.7
1C6A:  MOVLW  30
1C6C:  ADDWF  01,W
1C6E:  MOVLB  4
1C70:  MOVWF  x22
1C72:  CLRF   16
1C74:  BTFSC  FF2.7
1C76:  BSF    16.7
1C78:  BCF    FF2.7
....................   horas[1] = hr  % 10 + 0x30; 
1C7A:  MOVFF  4DA,54A
1C7E:  MOVLW  0A
1C80:  MOVLB  5
1C82:  MOVWF  x4B
1C84:  MOVLB  0
1C86:  CALL   02A6
1C8A:  BTFSC  16.7
1C8C:  BSF    FF2.7
1C8E:  MOVLW  30
1C90:  ADDWF  00,W
1C92:  MOVLB  4
1C94:  MOVWF  x20
1C96:  CLRF   16
1C98:  BTFSC  FF2.7
1C9A:  BSF    16.7
1C9C:  BCF    FF2.7
....................   horas[0] = hr  / 10 + 0x30; 
1C9E:  MOVFF  4DA,54A
1CA2:  MOVLW  0A
1CA4:  MOVLB  5
1CA6:  MOVWF  x4B
1CA8:  MOVLB  0
1CAA:  CALL   02A6
1CAE:  BTFSC  16.7
1CB0:  BSF    FF2.7
1CB2:  MOVLW  30
1CB4:  ADDWF  01,W
1CB6:  MOVLB  4
1CB8:  MOVWF  x1F
1CBA:  CLRF   16
1CBC:  BTFSC  FF2.7
1CBE:  BSF    16.7
1CC0:  BCF    FF2.7
....................   data[9] = ano % 10 + 0x30; 
1CC2:  MOVFF  4DE,54A
1CC6:  MOVLW  0A
1CC8:  MOVLB  5
1CCA:  MOVWF  x4B
1CCC:  MOVLB  0
1CCE:  CALL   02A6
1CD2:  BTFSC  16.7
1CD4:  BSF    FF2.7
1CD6:  MOVLW  30
1CD8:  ADDWF  00,W
1CDA:  MOVLB  4
1CDC:  MOVWF  x2E
1CDE:  CLRF   16
1CE0:  BTFSC  FF2.7
1CE2:  BSF    16.7
1CE4:  BCF    FF2.7
....................   data[8] = ano / 10 + 0x30; 
1CE6:  MOVFF  4DE,54A
1CEA:  MOVLW  0A
1CEC:  MOVLB  5
1CEE:  MOVWF  x4B
1CF0:  MOVLB  0
1CF2:  CALL   02A6
1CF6:  BTFSC  16.7
1CF8:  BSF    FF2.7
1CFA:  MOVLW  30
1CFC:  ADDWF  01,W
1CFE:  MOVLB  4
1D00:  MOVWF  x2D
1D02:  CLRF   16
1D04:  BTFSC  FF2.7
1D06:  BSF    16.7
1D08:  BCF    FF2.7
....................   data[4] = mes % 10 + 0x30; 
1D0A:  MOVFF  4DD,54A
1D0E:  MOVLW  0A
1D10:  MOVLB  5
1D12:  MOVWF  x4B
1D14:  MOVLB  0
1D16:  CALL   02A6
1D1A:  BTFSC  16.7
1D1C:  BSF    FF2.7
1D1E:  MOVLW  30
1D20:  ADDWF  00,W
1D22:  MOVLB  4
1D24:  MOVWF  x29
1D26:  CLRF   16
1D28:  BTFSC  FF2.7
1D2A:  BSF    16.7
1D2C:  BCF    FF2.7
....................   data[3] = mes / 10 + 0x30; 
1D2E:  MOVFF  4DD,54A
1D32:  MOVLW  0A
1D34:  MOVLB  5
1D36:  MOVWF  x4B
1D38:  MOVLB  0
1D3A:  CALL   02A6
1D3E:  BTFSC  16.7
1D40:  BSF    FF2.7
1D42:  MOVLW  30
1D44:  ADDWF  01,W
1D46:  MOVLB  4
1D48:  MOVWF  x28
1D4A:  CLRF   16
1D4C:  BTFSC  FF2.7
1D4E:  BSF    16.7
1D50:  BCF    FF2.7
....................   data[1] = dia % 10 + 0x30; 
1D52:  MOVFF  4DC,54A
1D56:  MOVLW  0A
1D58:  MOVLB  5
1D5A:  MOVWF  x4B
1D5C:  MOVLB  0
1D5E:  CALL   02A6
1D62:  BTFSC  16.7
1D64:  BSF    FF2.7
1D66:  MOVLW  30
1D68:  ADDWF  00,W
1D6A:  MOVLB  4
1D6C:  MOVWF  x26
1D6E:  CLRF   16
1D70:  BTFSC  FF2.7
1D72:  BSF    16.7
1D74:  BCF    FF2.7
....................   data[0] = dia / 10 + 0x30; 
1D76:  MOVFF  4DC,54A
1D7A:  MOVLW  0A
1D7C:  MOVLB  5
1D7E:  MOVWF  x4B
1D80:  MOVLB  0
1D82:  CALL   02A6
1D86:  BTFSC  16.7
1D88:  BSF    FF2.7
1D8A:  MOVLW  30
1D8C:  ADDWF  01,W
1D8E:  MOVLB  4
1D90:  MOVWF  x25
.................... } 
1D92:  MOVLB  0
1D94:  RETLW  00
....................           

Configuration Fuses:
   Word  1: CE3C   IESO FCMEN HSPLL PLL5 CPUDIV4 USBDIV
   Word  2: 0E39   NOBROWNOUT WDT128 NOWDT BORV20 NOPUT VREGEN
   Word  3: 8500   NOPBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 00A1   STVREN NODEBUG NOLVP NOXINST ICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB

ROM data:
007FF8: B0 B1 B2 B3 B4 B5 B6 B7 
